<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TinyFx</name>
    </assembly>
    <members>
        <member name="T:TinyFx.Collections.CollectionExtensions">
            <summary>
            集合类扩展方法
            </summary>
        </member>
        <member name="M:TinyFx.Collections.CollectionExtensions.ToPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            集合对象分页
            </summary>
            <typeparam name="T">集合泛型类型</typeparam>
            <param name="list">集合对象</param>
            <param name="size">分页大小</param>
            <param name="index">当前页索引，从1开始</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Collections.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历每个元素使用Action操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="action"></param>
        </member>
        <member name="M:TinyFx.Collections.CollectionExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            遍历每个元素使用Action异步操作
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Collections.ObjectPool`1">
            <summary>
            线程安全对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TinyFx.Collections.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            构造函数
            </summary>
            <param name="objectGenerator">构建对象的构造器，当对象池中无对象时使用此构造器构造新的对象放入对象池</param>
        </member>
        <member name="M:TinyFx.Collections.ObjectPool`1.Get">
            <summary>
            从对象池中取对象，如没有创建一个加入对象池并返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Collections.ObjectPool`1.TryTake(`0@)">
            <summary>
            尝试从对象池中取对象，如果没有返回false
            </summary>
            <param name="item">从对象池取出的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Collections.ObjectPool`1.Put(`0)">
            <summary>
            将对象放入对象池
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:TinyFx.Collections.SerializableDictionary`2">
            <summary>
            可XML序列化的字典集合
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            此方法是保留方法，请不要使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            从对象的 XML 表示形式生成该对象
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            将对象转换为其 XML 表示形式
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.Add(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            添加集合
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.Add(System.Collections.IDictionary)">
            <summary>
            添加集合
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.SerializeXml">
            <summary>
            序列化到Xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Collections.SerializableDictionary`2.DeserializeXml(System.String)">
            <summary>
            XML反序列化获得集合
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.CacheValue`1">
            <summary>
            缓存值
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TinyFx.CacheValue`1.HasValue">
            <summary>
            是否存在缓存值
            </summary>
        </member>
        <member name="P:TinyFx.CacheValue`1.Value">
            <summary>
            缓存值
            </summary>
        </member>
        <member name="M:TinyFx.CacheValue`1.op_Implicit(`0)~TinyFx.CacheValue{`0}">
            <summary>
            转换器
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:TinyFx.CharsScope">
            <summary>
            字符范围枚举，可使用StringUtil类获取相应的字符集合
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.LowerLetters">
            <summary>
            小写字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.UpperLetters">
            <summary>
            大写字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.Letters">
            <summary>
            字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.NumbersAndLowerLetters">
            <summary>
            数字和小写字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.NumbersAndUpperLetters">
            <summary>
            数字和大写字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.NumbersAndLetters">
            <summary>
            数字字母
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.UsualChinese">
            <summary>
            常用汉字
            </summary>
        </member>
        <member name="F:TinyFx.CharsScope.All">
            <summary>
            数字，字母和汉字
            </summary>
        </member>
        <member name="T:TinyFx.ConsoleUtil">
            <summary>
            控制台输出辅助类
            </summary>
        </member>
        <member name="M:TinyFx.ConsoleUtil.Write(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            输出到控制台，可设置前景色和背景色
            </summary>
            <param name="value"></param>
            <param name="foregroundColor"></param>
            <param name="backgroundColor"></param>
        </member>
        <member name="M:TinyFx.ConsoleUtil.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
            输出到控制台，可设置前景色和背景色
            </summary>
            <param name="value"></param>
            <param name="foregroundColor"></param>
            <param name="backgroundColor"></param>
        </member>
        <member name="T:TinyFx.ConverterBuilder">
            <summary>
            常用类型转换器构建类
            </summary>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterV``1(System.Converter{System.Object,``0})">
            <summary>
            获取值类型转换器，无法转换Null或DBNull，将抛出异常。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterV``1(System.Converter{System.Object,``0},``0)">
            <summary>
            获取值类型转换器，Null或DBNull，或者转换发生异常时，则使用默认值。
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="converter">转换器</param>
            <param name="defaultValue">异常时的默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterR``1(System.Converter{System.Object,``0})">
            <summary>
            获取引用类型转换器，Null或DBNull转换为null。
            </summary>
            <typeparam name="T">引用类型信息</typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterR``1(System.Converter{System.Object,``0},``0)">
            <summary>
            获取引用类型转换器，Null或DBNull转换为null，转换失败则使用默认值。
            </summary>
            <typeparam name="T">引用类型信息</typeparam>
            <param name="converter"></param>
            <param name="defaultValue">转换失败后的默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterN``1(System.Converter{System.Object,``0})">
            <summary>
            获取可空类型转换器，Null或DBNull转换为null。
            </summary>
            <typeparam name="T">可空类型的基类型</typeparam>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetConverterN``1(System.Converter{System.Object,``0},``0)">
            <summary>
            获取可空类型转换器，Null或DBNull转换为null，转换失败则使用默认值。
            </summary>
            <typeparam name="T">可空类型的基类型</typeparam>
            <param name="convert"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetTimeSpanConverter(System.String)">
            <summary>
            TimeSpan转换器，采用将对象转换成字符串后再转换成类型对象
            </summary>
            <param name="formart"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetDateTimeConverter(System.String)">
            <summary>
            DateTime转换器，采用将对象转换成字符串后再转换成类型对象
            </summary>
            <param name="formart">仅用于字符串转换时所需的格式说明符，如"yyyy-MM-dd"</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetDateTimeOffsetConverter(System.String)">
            <summary>
            DateTimeOffset转换器，采用将对象转换成字符串后再转换成类型对象
            </summary>
            <param name="formart">仅用于字符串转换时所需的格式说明符，如"yyyy-MM-dd"</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetBooleanStringConverter">
            <summary>
            String => Boolean转换器
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetBooleanConverter">
            <summary>
            Boolean转换器
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetGuidConverter(System.String)">
            <summary>
            Guid转换器
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetBytesConverter">
            <summary>
            Byte[]转换器，采用将对象BinaryFormatter成byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ConverterBuilder.GetEnumConverter``1">
            <summary>
            Enum转换器，提供将对象值（字符串或值）转换成对应的枚举类型的值
            </summary>
            <typeparam name="T">需要转换的枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EnumInfo">
            <summary>
            枚举类型的描述信息
            </summary>
        </member>
        <member name="P:TinyFx.EnumInfo.EnumType">
            <summary>
            枚举类型信息
            </summary>
        </member>
        <member name="P:TinyFx.EnumInfo.Name">
            <summary>
            枚举名称
            </summary>
        </member>
        <member name="P:TinyFx.EnumInfo.Description">
            <summary>
            Enum类型上添加DescriptionAttribute中定义的描述
            </summary>
        </member>
        <member name="M:TinyFx.EnumInfo.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="M:TinyFx.EnumInfo.GetList">
            <summary>
            获取枚举项列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumInfo.GetItem(System.Int32)">
            <summary>
            获取枚举项信息
            </summary>
            <param name="enumValue">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumInfo.GetItem(System.Object)">
            <summary>
            获取枚举项信息
            </summary>
            <param name="value">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EnumItemInfo">
            <summary>
            枚举类型的值的描述信息
            </summary>
        </member>
        <member name="P:TinyFx.EnumItemInfo.Value">
            <summary>
            枚举int值
            </summary>
        </member>
        <member name="P:TinyFx.EnumItemInfo.Name">
            <summary>
            枚举名称
            </summary>
        </member>
        <member name="P:TinyFx.EnumItemInfo.Description">
            <summary>
            枚举描述，通过DescriptionAttribute定义的描述
            </summary>
        </member>
        <member name="T:TinyFx.EnumUtil">
            <summary>
            枚举辅助类
            </summary>
        </member>
        <member name="F:TinyFx.EnumUtil._descsCache">
            <summary>
            枚举描述缓存
            </summary>
        </member>
        <member name="M:TinyFx.EnumUtil.GetInfo(System.Type)">
            <summary>
            获取枚举类型的描述信息
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetInfo``1">
            <summary>
            获取枚举类型的描述信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetItemInfo(System.Type,System.Object)">
            <summary>
            获取枚举项描述信息
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetItemInfo``1(System.Object)">
            <summary>
            获取枚举项描述信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetDescription(System.Type)">
            <summary>
            获取枚举的Description
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetDescription``1">
            <summary>
            获取枚举的Description
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetItemDescription(System.Type,System.Object)">
            <summary>
            获取枚举项的Description
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.GetItemDescription``1(System.Object)">
            <summary>
            获取枚举项的Description
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EnumUtil.HasFlag(System.Enum,System.Enum)">
            <summary>
            判断flags枚举类型variable是否包含value
            </summary>
            <param name="variable">要验证的Enum值</param>
            <param name="value">判断value是否包含在variable中</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.ExceptionStackEntry">
            <summary>
            异常堆栈信息类
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.AssemblyName">
            <summary>
            获取引发异常的应用程序集名称
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.ClassName">
            <summary>
            获取引发异常的类名
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.MethodName">
            <summary>
            获取引发异常的方法名
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.FileName">
            <summary>
            获取引发异常的文件名
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.LineNumber">
            <summary>
            获取引发异常的行号
            </summary>
        </member>
        <member name="P:TinyFx.ExceptionStackEntry.IsGlobalAssembly">
            <summary>
            获取是否由Framwork引发的异常
            </summary>
        </member>
        <member name="T:TinyFx.ExceptionUtil">
            <summary>
            异常辅助类
            </summary>
        </member>
        <member name="M:TinyFx.ExceptionUtil.AddUserData(System.Exception,System.Object)">
            <summary>
            异常添加用户自定义数据，key默认使用exp.Data的当前索引+1
            </summary>
            <param name="ex">异常</param>
            <param name="data">用户数据</param>
        </member>
        <member name="M:TinyFx.ExceptionUtil.AddUserData(System.Exception,System.String,System.String,System.Object[])">
            <summary>
            异常添加用户自定义数据，key默认使用exp.Data的当前索引+1
            </summary>
            <param name="ex">异常</param>
            <param name="sort">用户数据类型</param>
            <param name="content">用户数据内容</param>
            <param name="args">string.Format(content, args)</param>
        </member>
        <member name="M:TinyFx.ExceptionUtil.SerializeUserData(System.Exception)">
            <summary>
            序列化异常用户数据Exception.Data
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ExceptionUtil.DeserializeUserData(System.String)">
            <summary>
            反序列化异常用户数据
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ExceptionUtil.GetStackEntries(System.String)">
            <summary>
            分析Exception.StackTrace获得类型化信息
            </summary>
            <param name="stackTrace"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ExceptionUtil.GetStackEntries(System.Exception)">
            <summary>
            获取异常的堆栈信息集合
            </summary>
            <param name="ex">抛出的异常</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ExceptionUtil.GetStackEntry(System.Diagnostics.StackFrame)">
            <summary>
            获取异常的堆栈信息
            </summary>
            <param name="frame">堆栈中的一个函数调用</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.ExceptionUtil.GetFirstException(System.Exception)">
            <summary>
            获得第一个抛出的异常
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.IHideObjectMembers">
            <summary>
            此接口只用于隐藏System.Object成员
            </summary>
        </member>
        <member name="M:TinyFx.IHideObjectMembers.Equals(System.Object)">
            <summary>
            隐藏Equals方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IHideObjectMembers.GetType">
            <summary>
            隐藏GetType方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IHideObjectMembers.GetHashCode">
            <summary>
            隐藏GetHashCode方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IHideObjectMembers.ToString">
            <summary>
            隐藏ToString方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.RunningEnvironment">
            <summary>
            程序运行环境
            </summary>
        </member>
        <member name="F:TinyFx.RunningEnvironment.Unknown">
            <summary>
            未知环境
            </summary>
        </member>
        <member name="F:TinyFx.RunningEnvironment.Development">
            <summary>
            研发环境
            </summary>
        </member>
        <member name="F:TinyFx.RunningEnvironment.Test">
            <summary>
            测试环境
            </summary>
        </member>
        <member name="F:TinyFx.RunningEnvironment.Simulation">
            <summary>
            仿真环境
            </summary>
        </member>
        <member name="F:TinyFx.RunningEnvironment.Online">
            <summary>
            线上环境
            </summary>
        </member>
        <member name="T:TinyFx.SerializerUtil">
            <summary>
            序列化辅助类,提供Binary,Xml和Json序列化
            </summary>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeBinary(System.Object)">
            <summary>
            二进制序列化，对象需要 SerializableAttribute
            </summary>
            <param name="source">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeBinary(System.Byte[])">
            <summary>
            二进制反序列化
            </summary>
            <param name="input">序列化字节数组</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeBinary``1(System.Byte[])">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="input">序列化字节数组</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeBinaryToFile(System.Object,System.String)">
            <summary>
            二进制序列化
            </summary>
            <param name="source">序列化对象</param>
            <param name="filename">序列化到文件</param>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeBinaryFromFile(System.String)">
            <summary>
            二进制反序列化
            </summary>
            <param name="filename">文件名</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeBinaryFromFile``1(System.String)">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="filename">文件名</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeXmlToBytes(System.Type,System.Object)">
            <summary>
            Xml序列化到bytes
            </summary>
            <param name="type">序列化对象类型</param>
            <param name="source">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeXmlToBytes``1(``0)">
            <summary>
            Xml序列化到bytes
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="source">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeXml(System.Type,System.Object,System.Text.Encoding)">
            <summary>
            Xml序列化到string
            </summary>
            <param name="type">序列化对象类型</param>
            <param name="source">序列化对象</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeXml``1(``0,System.Text.Encoding)">
            <summary>
            Xml序列化string
            </summary>
            <typeparam name="T">序列化对象类型</typeparam>
            <param name="source">序列化对象</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXmlFromBytes(System.Type,System.Byte[])">
            <summary>
            Xml反序列化从bytes
            </summary>
            <param name="type">反序列化对象类型</param>
            <param name="input">反序列化对象的bytes</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXmlFromBytes``1(System.Byte[])">
            <summary>
            Xml反序列化从bytes
            </summary>
            <typeparam name="T">反序列化对象类型</typeparam>
            <param name="input">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXml(System.Type,System.String,System.Text.Encoding)">
            <summary>
            Xml反序列化从string
            </summary>
            <param name="type">反序列化对象类型</param>
            <param name="input">可反序列化的字符串</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXml(System.Type,System.IO.Stream)">
            <summary>
            Xml反序列化从Stream
            </summary>
            <param name="type"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXml``1(System.IO.Stream)">
            <summary>
            Xml反序列化从Stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeXml``1(System.String,System.Text.Encoding)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">反序列化对象类型</typeparam>
            <param name="input">可反序列化的字符串</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.SerializeJson(System.Object)">
            <summary>
            序列化JSON对象，对象需要 DataContractAttribute,DataMember,IgnoreDataMember
            </summary>
            <param name="source">对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeJson(System.Type,System.String)">
            <summary>
            反序列化JSON对象
            </summary>
            <param name="type">JSON类型</param>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeJson(System.Type,System.IO.Stream,System.Text.Encoding)">
            <summary>
            反序列化JSON对象
            </summary>
            <param name="type"></param>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.SerializerUtil.DeserializeJson``1(System.String)">
            <summary>
            反序列化JSON对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.SimpleTypeNames">
            <summary>
            简单类型名称集合
            基元类型 + TimeSpan + DateTime + Guid + Decimal + String + 任何可从字符串转入的对象（暂未加入判断）
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Byte">
            <summary>
            Byte
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.SByte">
            <summary>
            Sbyte
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Int16">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.UInt16">
            <summary>
            UInt16
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Int32">
            <summary>
            Int32
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.UInt32">
            <summary>
            UInt32
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.UInt64">
            <summary>
            UInt64
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Char">
            <summary>
            Char
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.IntPtr">
            <summary>
            IntPtr
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.UIntPtr">
            <summary>
            UIntPtr
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Decimal">
            <summary>
            Decimal
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.TimeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.DateTime">
            <summary>
            DataTime
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.DateTimeOffset">
            <summary>
            DateTimeOffset
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:TinyFx.SimpleTypeNames.Bytes">
            <summary>
            byte[]
            </summary>
        </member>
        <member name="T:TinyFx.StringUtil">
            <summary>
            字符串操作静态辅助类
            </summary>
            <summary>
            字符串操作静态辅助类
            </summary>
            <summary>
            字符串操作静态辅助类
            </summary>
            <summary>
            字符串操作静态辅助类
            </summary>
            <summary>
            字符串操作静态辅助类
            </summary>
            <summary>
            字符串操作静态辅助类
            TODO: 应考虑重写To(T)方法，使用ConverterBuilder做转换器，支持万能转换！20160707
            </summary>
            <summary>
            字符串操作静态辅助类
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.NumberChars">
            <summary>
            数字字符数组
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.LowerLetterChars">
            <summary>
            小写字母字符数组
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.UpperLetterChars">
            <summary>
            大写字母字符数组
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.LetterChars">
            <summary>
            字母字符数组
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.NumeralRadixChars">
            <summary>
            进位制使用的字符，支持64进制以下
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.CommonPunctuation">
            <summary>
            常用英文标点符号数组
            </summary>
        </member>
        <member name="P:TinyFx.StringUtil.NumeralRadixCache">
            <summary>
            进位制使用的字符对应的值
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.NumberLetterChars">
            <summary>
            数字字母字符数组
            </summary>
        </member>
        <member name="F:TinyFx.StringUtil.UsualChineseChars">
            <summary>
            300个常用汉字
            </summary>
        </member>
        <member name="M:TinyFx.StringUtil.GetCharArray(TinyFx.CharsScope)">
            <summary>
            获取指定字符选取范围的字符数组
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.GetStringWidth(System.String)">
            <summary>
            获取字符串的实际宽度
            全角符号汉字等占2个宽度
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.GetCharWidth(System.Char)">
            <summary>
            获取字符的实际宽度
            全角符号汉字等占2个宽度
            </summary>
            <param name="chr">字符</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.TrimWidth(System.String,System.Int32)">
            <summary>
            截取字符串不超过指定宽度
            </summary>
            <param name="str">字符串</param>
            <param name="width">指定宽度，全角符号汉字等占2个宽度</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.TrimWidthSuffix(System.String,System.Int32)">
            <summary>
            截取字符串不超过指定宽度，如超过使用..或...结尾
            </summary>
            <param name="str"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ReplaceWhiteSpace(System.String,System.String,System.Boolean)">
            <summary>
            替换空白字符
            </summary>
            <param name="src">源字符串</param>
            <param name="newValue">使用此字符串替换空白字符</param>
            <param name="repeated">如果出现连续的空白字符是否重复替换</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ReplaceWhiteSpace(System.String,System.Char,System.Boolean)">
            <summary>
            替换空白字符
            </summary>
            <param name="src">源字符串</param>
            <param name="newChar">使用此字符替换空白字符</param>
            <param name="repeated">如果出现连续的空白字符是否重复替换</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.Replace(System.String,System.Char,System.Int32,System.Int32)">
            <summary>
            使用指定char替换指定位置长度的字符
            </summary>
            <param name="src">源字符串</param>
            <param name="newChar">使用此字符替换指定位置</param>
            <param name="beginIdx">替换起始位置，0开始</param>
            <param name="length">替换长度，必须大于1</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.TrimStart(System.String,System.String,System.Boolean)">
            <summary>
            从当前 System.String 对象移除指定字符的所有前导匹配项
            </summary>
            <param name="src">源字符串</param>
            <param name="start">要删除的起始字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.TrimEnd(System.String,System.String,System.Boolean)">
            <summary>
            从当前 System.String 对象移除指定字符的所有尾部匹配项
            </summary>
            <param name="src">源字符串</param>
            <param name="end">要删除的结束字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.Trim(System.String,System.String,System.String,System.Boolean)">
            <summary>
            从当前 System.String 对象移除指定字符的所有前导和尾部匹配项
            </summary>
            <param name="src"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.StrToHex(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换成为16进制字符串
            </summary>
            <param name="str">要转换成16进制表示的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.BytesToHex(System.Byte[])">
            <summary>
            字节数组转换成为16进制字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.HexToBytes(System.String)">
            <summary>
            将16进制字符串转换成为字节数组，如果要将byte[]转换成hex字符串，可使用BitConverter.ToString()实现。
            </summary>
            <param name="hex">要转换成字节数组的16进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.HexToStr(System.String,System.Text.Encoding)">
            <summary>
            将16进制字符串转换成为字符编码对应的字符串
            </summary>
            <param name="hex">16进制表示的字符串</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.RadixToString(System.UInt64,System.UInt32)">
            <summary>
            将十进制整数转换为指定进位制的字符串表示，如进位制位是2，8，10，16等，最好使用Convert.ToString(value, toBase)方法
            </summary>
            <param name="num">十进制整数</param>
            <param name="radix">进位制，如：36,62</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.RadixToString(System.Int64,System.Int32)">
            <summary>
            将十进制整数转换为指定进位制的字符串表示，如进位制位是2，8，10，16等
            </summary>
            <param name="num">十进制数</param>
            <param name="radix">进位制，如：36,62</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.StringToRadix(System.String,System.UInt32)">
            <summary>
            将指定进位制的字符串表示转换为十进制整数，如进位制位是2，8，10，16等，最好使用Convert.ToXXX(string, fromBase)方法
            </summary>
            <param name="value">指定进位制的字符串表示</param>
            <param name="radix">进位制，如：36,62</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.StringToRadix(System.String,System.Int32)">
            <summary>
            将指定进位制的字符串表示转换为十进制整数，如进位制位是2，8，10，16等
            </summary>
            <param name="value">指定进位制的字符串表示</param>
            <param name="radix">进位制，如：36,62</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ConvertNumberBase(System.String,System.Int32,System.Int32)">
            <summary>
            进位制间相互转换（支持2,8,10,16进制）
            </summary>
            <param name="source">源数据</param>
            <param name="fromBase">源进制， 只能是2，8，10，16</param>
            <param name="toBase">目标进制， 只能是2，8，10，16</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换成Base64编码
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.FromBase64String(System.String,System.Text.Encoding)">
            <summary>
            将Base64编码的字符串还原
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.GetGuidString(System.Boolean)">
            <summary>
            获取不包含'-'的GUID字符串
            </summary>
            <param name="removeSymbol">是否替换间隔符号-</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.LevenshteinDistance(System.String,System.String,System.Boolean)">
            <summary>
            编辑距离（Levenshtein Distance），计算字符串相似度
            </summary>
            <param name="source">源字符串</param>
            <param name="target">目标字符串</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.CamelCase(System.String)">
            <summary>
            使用camel命名法
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.PascalCase(System.String)">
            <summary>
            使用Pascal命名法
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.SplitNewLine(System.String)">
            <summary>
            将字符串按NewLine进行Split
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsCSharpReserved(System.String)">
            <summary>
            是否是.NET保留字
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.Tab(System.Int32)">
            <summary>
            获取连续TAB输入字符串
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.GetFirstLine(System.String)">
            <summary>
            获取字符串第一行，没有返回string.Empty
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IndexOf(System.String,System.Char,System.Int32)">
            <summary>
            查找字符串中指定字符匹配索引（跳过指定次数）
            如：IndexOf("192.12.0.0", '.', 1); 返回6
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <param name="skipNum"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsASCII(System.String)">
            <summary>
            判断字符串是否兼容ASCII编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsGB2312(System.String)">
            <summary>
            判断是否是兼容GB2312编码(GB2312-1980)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsGBK(System.String)">
            <summary>
            判断是否兼容GBK编码（不包括比CP936多的95个字）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsASCII(System.Char)">
            <summary>
            判断字符是否是ASCII编码
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsGB2312(System.Char)">
            <summary>
            判断是否是兼容GB2312编码(GB2312-1980)
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsGBK(System.Char)">
            <summary>
            判断是否兼容GBK编码（不包括比CP936多的95个字）
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsGB18030(System.Char)">
            <summary>
            判断是否兼容GB18030编码(GB18030-2000 GB18030-2005)
            </summary>
            <param name="chr"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.DefaultIfNull(System.String,System.String)">
            <summary>
            如果String为Null则使用指定的默认值
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.DefaultIfNullOrEmpty(System.String,System.String)">
            <summary>
            如果String为Null或Empty则使用指定的默认值
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String)">
            <summary>
            将String转换成公共语言运行时类型。
            公共语言运行时类型: SByte、Byte、Int16、UInt16、Int32、UInt32、Int64、UInt64、Single、Double、Decimal、Boolean、DateTime、Char、String
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String,``0)">
            <summary>
            将String转换成公共语言运行时类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String,System.IFormatProvider)">
            <summary>
            将String转换成公共语言运行时类型。
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String,``0,System.IFormatProvider)">
            <summary>
            将String转换成公共语言运行时类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String,System.Func{System.String,``0})">
            <summary>
            将String转换成指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.To``1(System.String,``0,System.Func{System.String,``0})">
            <summary>
            将String转换成指定类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String)">
            <summary>
            将String转换成可空类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String,System.IFormatProvider)">
            <summary>
            将String转换成可空类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String,``0)">
            <summary>
            将String转换成可空类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String,``0,System.IFormatProvider)">
            <summary>
            将String转换成可空类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String,System.Func{System.String,``0})">
            <summary>
            将String转换成可空类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">目标类型</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToN``1(System.String,``0,System.Func{System.String,``0})">
            <summary>
            将String转换成可空类型。如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="src">将转换的字符串</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSByte(System.String)">
            <summary>
            将String转换成SByte
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSByte(System.String,System.SByte)">
            <summary>
            将String转换成SByte，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSByteN(System.String)">
            <summary>
            将String转换成可空SByte
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSByteN(System.String,System.SByte)">
            <summary>
            将String转换成可空SByte，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToByte(System.String)">
            <summary>
            将String转换成Byte
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToByte(System.String,System.Byte)">
            <summary>
            将String转换成Byte，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToByteN(System.String)">
            <summary>
            将String转换成可空Byte
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToByteN(System.String,System.Byte)">
            <summary>
            将String转换成可空Byte，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt16(System.String)">
            <summary>
            将String转换成Int16(short)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt16(System.String,System.Int16)">
            <summary>
            将String转换成Int16(short)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt16N(System.String)">
            <summary>
            将String转换成可空Int16(short?)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt16N(System.String,System.Int16)">
            <summary>
            将String转换成可空Int16(short?)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt16(System.String)">
            <summary>
            将String转换成UInt16(ushort)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt16(System.String,System.UInt16)">
            <summary>
            将String转换成UInt16(ushort)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt16N(System.String)">
            <summary>
            将String转换成可空UInt16(ushort?)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt16N(System.String,System.UInt16)">
            <summary>
            将String转换成可空UInt16(ushort?)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt32(System.String)">
            <summary>
            将String转换成Int32(int)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt32(System.String,System.Int32)">
            <summary>
            将String转换成Int32，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt32N(System.String)">
            <summary>
            将String转换成可空Int32
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt32N(System.String,System.Int32)">
            <summary>
            将String转换成可空Int32，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt32(System.String)">
            <summary>
            将String转换成UInt32(uint)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt32(System.String,System.UInt32)">
            <summary>
            将String转换成UInt32(uint)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt32N(System.String)">
            <summary>
            将String转换成可空UInt32(uint)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt32N(System.String,System.UInt32)">
            <summary>
            将String转换成可空UInt32(uint)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt64(System.String)">
            <summary>
            将String转换成Int64(long)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt64(System.String,System.Int64)">
            <summary>
            将String转换成Int64(long)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt64N(System.String)">
            <summary>
            将String转换成可空Int64(long?)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToInt64N(System.String,System.Int64)">
            <summary>
            将String转换成可空Int64(long?)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt64(System.String)">
            <summary>
            将String转换成UInt64(ulong)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt64(System.String,System.UInt64)">
            <summary>
            将String转换成UInt64(ulong)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt64N(System.String)">
            <summary>
            将String转换成可空UInt64(ulong)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToUInt64N(System.String,System.UInt64)">
            <summary>
            将String转换成可空UInt64(ulong)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSingle(System.String)">
            <summary>
            将String转换成Single(float)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSingle(System.String,System.Single)">
            <summary>
            将String转换成Single(float)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSingleN(System.String)">
            <summary>
            将String转换成可空Single(float?)
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToSingleN(System.String,System.Single)">
            <summary>
            将String转换成可空Single(float?)，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDouble(System.String)">
            <summary>
            将String转换成Double
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDouble(System.String,System.Double)">
            <summary>
            将String转换成Double，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDoubleN(System.String)">
            <summary>
            将String转换成可空Double
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDoubleN(System.String,System.Double)">
            <summary>
            将String转换成可空Double
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDecimal(System.String)">
            <summary>
            将String转换成Decimal
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDecimal(System.String,System.Decimal)">
            <summary>
            将String转换成Decimal，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDecimalN(System.String)">
            <summary>
            将String转换成可空Decimal
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDecimalN(System.String,System.Decimal)">
            <summary>
            将String转换成可空Decimal，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToBoolean(System.String)">
            <summary>
            将String转换成Boolean
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToBoolean(System.String,System.Boolean)">
            <summary>
            将String转换成Boolean，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToBooleanN(System.String)">
            <summary>
            将String转换成可空Boolean
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToBooleanN(System.String,System.Boolean)">
            <summary>
            将String转换成可空Boolean
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToChar(System.String)">
            <summary>
            将String转换成Char
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToChar(System.String,System.Char)">
            <summary>
            将String转换成Char，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToCharN(System.String)">
            <summary>
            将String转换成可空Char
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToCharN(System.String,System.Char)">
            <summary>
            将String转换成可空Char，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTime(System.String)">
            <summary>
            将String转换成DateTime
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTime(System.String,System.DateTime)">
            <summary>
            将String转换成DateTime，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTimeN(System.String)">
            <summary>
            将String转换成可空DateTime
            </summary>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTimeN(System.String,System.DateTime)">
            <summary>
            将String转换成可空DateTime，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTime(System.String,System.String)">
            <summary>
            将String转换成DateTime
            </summary>
            <param name="src">源字符串</param>
            <param name="format">日期格式说明符：yyyyMMdd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTime(System.String,System.String,System.DateTime)">
            <summary>
            将String转换成DateTime，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="format">日期格式说明符：yyyyMMdd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTimeN(System.String,System.String)">
            <summary>
            将String转换成可空DateTime
            </summary>
            <param name="src">源字符串</param>
            <param name="format">日期格式说明符：yyyyMMdd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToDateTimeN(System.String,System.String,System.DateTime)">
            <summary>
            将String转换成可空DateTime，如果转换失败则使用默认值。
            </summary>
            <param name="src">源字符串</param>
            <param name="format">日期格式说明符：yyyyMMdd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToEnum``1(System.String)">
            <summary>
            将String转换成Enum
            </summary>
            <typeparam name="T">Enum类型</typeparam>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToEnum``1(System.String,``0)">
            <summary>
            将String转换成Enum，如果转换失败则使用默认值。
            </summary>
            <typeparam name="T">Enum类型</typeparam>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToEnumN``1(System.String)">
            <summary>
            将String转换成可空Enum
            </summary>
            <typeparam name="T">Enum类型</typeparam>
            <param name="src">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.ToEnumN``1(System.String,``0)">
            <summary>
            将String转换成可空Enum，如果转换失败则使用默认值。
            </summary>
            <typeparam name="T">Enum类型</typeparam>
            <param name="src">源字符串</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsChinese(System.Char)">
            <summary>
            判断是否是中文汉字
            </summary>
            <param name="chr">需验证的字符</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsChinese(System.String)">
            <summary>
            判断字符串是否全是中文汉字
            </summary>
            <param name="text">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsEmail(System.String)">
            <summary>
            验证是否是有效Email地址
            </summary>
            <param name="email">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsTelephone(System.String)">
            <summary>
            验证是否是有效的电话号码
            </summary>
            <param name="telephone">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsMobile(System.String)">
            <summary>
            验证是否是有效的手机号
            移动号码段:139、138、137、136、135、134、150、151、152、157、158、159、182、183、187、188、147
            联通号码段:130、131、132、136、185、186、145
            电信号码段:133、153、180、189
            </summary>
            <param name="mobile">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsIpAddress(System.String)">
            <summary>
            验证是否是有效的IP地址
            </summary>
            <param name="ip">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsPostcode(System.String)">
            <summary>
            验证是否是有效地邮政编码
            </summary>
            <param name="postcode">需验证的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsUrl(System.String)">
            <summary>
            验证是否是有效的URL
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsNotNegativeNumber(System.String)">
            <summary>
            验证是否是非负数，包括正数和0
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsNumber(System.String)">
            <summary>
            验证是否是数字
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsNotNegativeInteger(System.String)">
            <summary>
            验证是否是非负整数，包括正整数和0
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsInteger(System.String)">
            <summary>
            验证是否是整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsNegativeInteger(System.String)">
            <summary>
            验证是否是负整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsPositiveInteger(System.String)">
            <summary>
            验证是否是正整数
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsNotPositiveInteger(System.String)">
            <summary>
            验证是否是非正整数，包括负整数和0
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.StringUtil.IsIDCard(System.String)">
            <summary>
            验证是否是有效的身份证号
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.TinyFxUtil">
            <summary>
            提供TinyFx辅助方法
            </summary>
            <summary>
            提供TinyFx辅助方法
            </summary>
            <summary>
            提供TinyFx辅助方法
            </summary>
        </member>
        <member name="M:TinyFx.TinyFxUtil.ConvertTo``1(System.Object)">
            <summary>
             通用类型转换函数，函数会将DBNull类型转换成null或可空类型
            </summary>
            <typeparam name="T">转换的类型</typeparam>
            <param name="value">需转换的值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.ConvertTo(System.Object,System.Type,System.String)">
            <summary>
            通用类型转换函数，函数会将DBNull类型转换成null或可空类型
            </summary>
            <param name="value"></param>
            <param name="toType"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.ConvertArray``1(``0[0:,0:])">
            <summary>
            转换矩形数组为交错数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetRandom">
            <summary>
            获得随机数生成器
            以Guid的哈希值最为种子值，避免大并发随机数重复的问题
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetRandomNext(System.Int32,System.Int32)">
            <summary>
            返回一个定义范围的随机数
            </summary>
            <param name="minValue">最小值(包含下限)</param>
            <param name="maxValue">最大值(不包含上限)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetRandomNext(System.Int32)">
            <summary>
            返回一个小于指定最大值的非负随机数
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetRandomNext">
            <summary>
            返回非负随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.IsNullableType(System.Type)">
            <summary>
            判断是否为可空类型
            </summary>
            <param name="type">类型信息</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.TryDo(System.Delegate,System.Int32,System.Int32,System.Object[])">
            <summary>
            多次尝试执行代理方法，如果仍然失败，则抛出异常
            </summary>
            <param name="method">需执行的方法</param>
            <param name="tryCount">重试次数</param>
            <param name="interval">重试间隔ms</param>
            <param name="args">执行方法需要的参数</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.TryDo(System.Delegate,System.Action{System.Int32},System.Int32,System.Int32,System.Object[])">
            <summary>
            多次尝试执行代理方法，如果仍然失败，则抛出异常
            </summary>
            <param name="method">需执行的方法</param>
            <param name="calcback">出现异常时回调方法</param>
            <param name="tryCount">尝试次数</param>
            <param name="interval">尝试执行间隔，毫秒</param>
            <param name="args">方法执行参数</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetPageCount(System.Int64,System.Int64)">
            <summary>
            计算分页的页数
            </summary>
            <param name="totalRecord">总记录数</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetAbsolutePath(System.String)">
            <summary>
            获取绝对路径。支持web相对路径
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetAssemblyDirectory">
            <summary>
            获取应用程序Assembly所在目录,Web获取bin，其他获取执行程序当前目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetAppDirectory">
            <summary>
            获取应用程序目录，web获取根目录，应用程序获取入口目录
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.TinyFxUtil.IsWindowsOS">
            <summary>
            是否是Windows系统
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.Add``1(``0[],``0)">
            <summary>
            向Array中添加一个元素
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="array">Array</param>
            <param name="item">需要添加项</param>
            <returns>返回新的Array</returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.AddRange``1(``0[],``0[])">
            <summary>
            向Array中添加一个集合
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="sourceArray">Array</param>
            <param name="addArray">Array</param>
            <returns>返回新的Array</returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.BeginDayOfWeek(System.DateTime,System.Boolean)">
            <summary>
            获取指定日期所在周的起始日期，时分秒和传入日期相同
            </summary>
            <param name="date">指定日期</param>
            <param name="isMonday">是否以周一为每周第一天</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.EndDayOfWeek(System.DateTime,System.Boolean)">
            <summary>
            获取指定日期所在周的终止日期，时分秒和传入日期相同
            </summary>
            <param name="date">指定日期</param>
            <param name="isMonday">是否以周一为每周第一天</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.WeekCount(System.DateTime,System.DateTime)">
            <summary>
            获取时间段内包含的总周数（含起始周和结束周）
            </summary>
            <param name="start">起始日期</param>
            <param name="end">终止日期</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.WeekCountOfYear(System.Int32)">
            <summary>
            获取指定年份的总周数
            </summary>
            <param name="year">年份</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.WeekOfYear(System.DateTime)">
            <summary>
            获取指定日期在这一年的第几周中
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.WeekOfMonth(System.DateTime)">
            <summary>
            获取指定日期在这一月的第几周中
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.BeginDayOfWeek(System.Int32,System.Int32)">
            <summary>
            获取指定年份中指定周数（第几周）的起始日期
            </summary>
            <param name="year">年份</param>
            <param name="week">周数</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.EndDayOfWeek(System.Int32,System.Int32)">
            <summary>
            获取某年第几周的周末日期
            </summary>
            <param name="year">年份</param>
            <param name="week">周数</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.IsCurrentWeek(System.DateTime)">
            <summary>
            判断指定日期是否是当前日期所在的周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.IsSameWeek(System.DateTime,System.DateTime)">
            <summary>
            判断指定的日期是否在同一周中
            </summary>
            <param name="dtA">要比较的第一个日期</param>
            <param name="dtB">要比较的第二个日期</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.FirstDayOfPreviousMonth(System.DateTime)">
            <summary>
            获取上个月的第一天
            </summary>
            <param name="dateTime">要传入的时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.LastDayOfPrdviousMonth(System.DateTime)">
            <summary>
            获取上个月的最后一天
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.DateTimeToUnixTime(System.DateTime)">
            <summary>
            将DateTime转换为Unix时间戳
            </summary>
            <param name="date">转换的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.UnixTimeToDateTime(System.Int64)">
            <summary>
            将Unix时间戳转换为DateTime
            </summary>
            <param name="unixTime">Unix时间戳</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.UnixTimeToDateTime(System.String)">
            <summary>
            Unix时间戳转为DateTime
            </summary>
            <param name="timeStamp">Unix时间戳格式,例如1482115779</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.DateTimeToUnixTimeHex(System.DateTime,System.Boolean)">
            <summary>
            将DateTime转换为Unix时间戳的16进制表示，如：4DB6B9CD（8位）
            </summary>
            <param name="date">转换的日期时间</param>
            <param name="upperCase">转化大小写</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.UnixTimeHexToDateTime(System.String)">
            <summary>
            将Unix时间戳的16进制表示（如：4DB6B9CD）转换为DateTime
            </summary>
            <param name="unixTimeHex">Unix时间戳的16进制表示，如：4DB6B9CD（8位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetConstellation(System.Int32,System.Int32)">
            <summary>
            获取星座
            </summary>
            <param name="month">月份</param>
            <param name="day">日期</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.TinyFxUtil.GetConstellation(System.DateTime)">
            <summary>
            获取星座
            </summary>
            <param name="birthday">出生日期</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Configuration.AppConfigFileMapsManager">
            <summary>
            配置文件映射管理类
            在app.config或web.config中定义
            
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.AppConfigFileMapsManager.TinyFxConfigFile">
            <summary>
            appConfigFileMaps配置节中配的tinyfx.config文件名，提供默认值
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.AppConfigFileMapsManager.Log4netConfigFile">
            <summary>
            appConfigFileMaps配置节中配的log4net.config文件名，提供默认值
            </summary>
        </member>
        <member name="T:TinyFx.Configuration.AppConfigFileMapsSectionHandler">
            <summary>
            配置文件映射configFileMaps配置SectionHandler
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.AppConfigFileMapsSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Configuration.AppSettingsConfig">
            <summary>
            AppSettings配置节
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.AppSettingsConfig.Get``1(System.String)">
            <summary>
            获取AppSettings中的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Configuration.AppSettingsConfig.GetOrDefault``1(System.String,``0)">
            <summary>
            获取AppSettings中的值,不存在使用默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Configuration.ProjectConfig">
            <summary>
            Project模块配置节信息
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.ProjectConfig.GetConfigName">
            <summary>
            配置节名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Configuration.ProjectConfig.Id">
            <summary>
            项目标识
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.ProjectConfig.Desc">
            <summary>
            项目描述
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.ProjectConfig.Logger">
            <summary>
            默认Logger配置：log4net中配置的logger name
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.ProjectConfig.Running">
            <summary>
            当前程序运行环境
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.ProjectConfig.Parse(System.Xml.XmlElement)">
            <summary>
            解析
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:TinyFx.Configuration.TinyConfiguration">
            <summary>
            TinyFx配置项基类
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.TinyConfiguration.GetConfigName">
            <summary>
            获取配置项名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Configuration.TinyConfiguration.Parse(System.Xml.XmlElement)">
            <summary>
            解析配置信息获得配置对象
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:TinyFx.Configuration.TinyFxConfigManager">
            <summary>
            TinyFx配置管理类
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxConfigManager.Configure(System.String)">
            <summary>
            自定义配置文件
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxConfigManager.GetConfig``1">
            <summary>
            获取配置信息
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxConfigManager.GetConfig``1(System.String)">
            <summary>
            指定配置文件获取配置信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Configuration.TinyFxConfigManager.ProjectConfig">
            <summary>
            获取应用程序配置信息
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.TinyFxConfigManager.AppSettings">
            <summary>
            获取tinyfx.config中AppSettings
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxConfigManager.GetAppSetting(System.String)">
            <summary>
            获取tinyfx.config中AppSettings节配置的AppSetting
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxConfigManager.GetAppSetting``1(System.String)">
            <summary>
            获取tinyfx.config中AppSettings节配置的AppSetting
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Configuration.TinyFxSectionHandler">
            <summary>
            TinyFx配置SectionHandler
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.TinyFxSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Configuration.Data.ConnectionStringElement">
            <summary>
            连接字符串配置节
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.Name">
            <summary>
            名称标识，必须唯一
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.ConnectionString">
            <summary>
            读写数据库连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.ReadConnectionString">
            <summary>
            只读数据库连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.ProviderName">
            <summary>
            数据提供程序名称。
            ODBC: System.Data.Odbc ,odbc
            OleDB: System.Data.OleDb ,oledb,access
            Sql Server: System.Data.SqlClient ,sqlclient,sqlserver,sql,sqlfile
            Oracle8.1.7-9iR2: System.Data.OracleClient,oracleclient
            Oracle9iR2以上: Oracle.ManagedDataAccess.Client,oracle,odac,odp.net
            MySQL: mysql
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.Encrypt">
            <summary>
            加密方式:none,password,all
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.CommandTimeout">
            <summary>
            Command执行SQL时的Timeout时间，单位秒，默认30秒
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.InstProvider">
            <summary>
            跟踪服务提供程序
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.ConnectionStringElement.OrmMap">
            <summary>
            Orm的MO对象创建时Database通过MO的namespace映射，用;分隔
            </summary>
        </member>
        <member name="T:TinyFx.Configuration.Data.DataConfig">
            <summary>
            Data模块配置节信息
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.Data.DataConfig.GetConfigName">
            <summary>
            配置节名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Configuration.Data.DataConfig.DefaultConnectionString">
            <summary>
            默认数据库
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DataConfig.DataRouter">
            <summary>
            数据路由提供程序
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DataConfig.InstProvider">
            <summary>
            跟踪服务提供程序
            </summary>
        </member>
        <member name="F:TinyFx.Configuration.Data.DataConfig.ConnectionStrings">
            <summary>
            连接字符串集合
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.Data.DataConfig.Parse(System.Xml.XmlElement)">
            <summary>
            解析
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:TinyFx.Configuration.Data.DbProviderFactoryElement">
            <summary>
            数据库提供程序配置节
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DbProviderFactoryElement.Name">
            <summary>
            数据提供程序名称
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DbProviderFactoryElement.Invariant">
            <summary>
            数据提供标识
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DbProviderFactoryElement.Type">
            <summary>
            DbProviderFactory类型
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.Data.DbProviderFactoryElement.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:TinyFx.Configuration.AutoMapperConfig">
            <summary>
            AutoMapper配置类
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.AutoMapperConfig.GetConfigName">
            <summary>
            配置节名
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Configuration.AutoMapperConfig.Enabled">
            <summary>
            是否使用
            </summary>
        </member>
        <member name="F:TinyFx.Configuration.AutoMapperConfig.Assemblies">
            <summary>
            映射的程序集
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.AutoMapperConfig.Parse(System.Xml.XmlElement)">
            <summary>
            解析
            </summary>
            <param name="element"></param>
        </member>
        <member name="T:TinyFx.Configuration.RedisConfig">
            <summary>
            Redis模块配置节信息
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.RedisConfig.GetConfigName">
            <summary>
            配置节名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Configuration.RedisConfig.DefaultConnectionString">
            <summary>
            默认数据库
            </summary>
        </member>
        <member name="F:TinyFx.Configuration.RedisConfig.ConnectionStrings">
            <summary>
            连接字符串集合
            </summary>
        </member>
        <member name="M:TinyFx.Configuration.RedisConfig.Parse(System.Xml.XmlElement)">
            <summary>
            解析
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:TinyFx.Configuration.RedisConnectionStringElement.Name">
            <summary>
            RedisConnectionString标识
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.RedisConnectionStringElement.ConnectionString">
            <summary>
            Redis连接信息
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.RedisConnectionStringElement.Database">
            <summary>
            DatabaseNumber
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.RedisConnectionStringElement.KeyPrefix">
            <summary>
            保存时Key添加的前缀
            </summary>
        </member>
        <member name="P:TinyFx.Configuration.RedisConnectionStringElement.Serializer">
            <summary>
            保存时使用的序列化器
            </summary>
        </member>
        <member name="T:TinyFx.Data.CommandParametersCache">
            <summary>
            缓存程序中所有Command对象执行时所定义的参数集合
            Key：ConnectionString|CommandText
            </summary>
        </member>
        <member name="M:TinyFx.Data.CommandParametersCache.Set(TinyFx.Data.CommandWrapper,TinyFx.Data.Database)">
            <devdoc>
            添加一个参数定义缓存
            </devdoc>        
        </member>
        <member name="M:TinyFx.Data.CommandParametersCache.Get(TinyFx.Data.CommandWrapper,TinyFx.Data.Database)">
            <devdoc>
            获取一个缓存集合
            </devdoc>        
        </member>
        <member name="M:TinyFx.Data.CommandParametersCache.Contains(TinyFx.Data.CommandWrapper)">
            <devdoc>
            是否存在此缓存项
            </devdoc>        
        </member>
        <member name="M:TinyFx.Data.CommandParametersCache.Clear">
            <summary>
            清除缓存
            </summary>
        </member>
        <member name="T:TinyFx.Data.CommandWrapper">
            <summary>
            DbCommand对象包装类
            无法使用构造函数，请通过Database.CreateCommand创建此对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.#ctor(System.Data.Common.DbCommand)">
            <summary>
            构造函数
            </summary>
            <param name="command">包装的DbCommand对象</param>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.Command">
            <summary>
            包装的DbCommand对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.Connection">
            <summary>
            DbConnection对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.Transaction">
            <summary>
            事务对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.HasTransaction">
            <summary>
            是否存在事务处理
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.Parameters">
            <summary>
            获取DbCommand对象的参数集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.CommandText">
            <summary>
            获取或设置DbCommand对象的CommandText属性
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.CommandTimeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间。默认30秒，0表示不限制时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.CommandWrapper.CommandType">
            <summary>
            获取或设置DbCommand对象的CommandType属性
            </summary>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.ExecuteNonQuery">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.ExecuteScalar">
            <summary>
            执行查询语句并返回首行首列数据
            返回null表示数据库没有记录，返回DBNull表示此字段为空
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:TinyFx.Data.CommandWrapper.Close">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:TinyFx.Data.ConnectionStringConfig">
            <summary>
            数据库连接配置信息类，用于DbFactory构造Database用
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.ConnectionStringName">
            <summary>
            配置中数据库连接字符串名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.Provider">
            <summary>
            数据提供程序
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.ReadConnectionString">
            <summary>
            只读数据库连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.CommandTimeout">
            <summary>
            Command执行的Timeout单位秒
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringConfig.InstProvider">
            <summary>
            性能侦测提供程序
            </summary>
        </member>
        <member name="T:TinyFx.Data.ConnectionStringInfo">
            <summary>
            连接字符串信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.Provider">
            <summary>
            数据提供程序
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.DataSource">
            <summary>
            获取或设置要连接到的数据源的名称。服务器地址或服务名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.Database">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.UserID">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:TinyFx.Data.ConnectionStringInfo.ConnectTimeout">
            <summary>
            连接超时
            </summary>
        </member>
        <member name="T:TinyFx.Data.ConnectionStringUtil">
            <summary>
            数据库连接字符串辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Data.ConnectionStringUtil.GetSqlServer(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            获取SQL Server连接字符串
            </summary>
            <param name="server">要连接到的 SQL Server 实例的名称或网络地址</param>
            <param name="database">与该连接关联的数据库的名称</param>
            <param name="userid">接到 SQL Server 时要使用的用户 ID，如为空，则使用集成认证</param>
            <param name="password">SQL Server 帐户的密码</param>
            <param name="configs">其他数据库连接字符串配置</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ConnectionStringUtil.GetAccess(System.String,System.String,System.String)">
            <summary>
            获取Access连接字符串
            </summary>
            <param name="fileName"></param>
            <param name="userid"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ConnectionStringUtil.GetExcel(System.String,System.Boolean,System.Int32)">
            <summary>
            获取Excel连接字符串
            </summary>
            <param name="filename"></param>
            <param name="hdr">第一行是否字段名</param>
            <param name="imex">0-写入 1-读取 2-读写</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ConnectionStringUtil.GetOracle(System.String,System.String,System.String)">
            <summary>
            获取Oracle连接字符串
            </summary>
            <param name="dataSource">如：//172.28.8.31/ServiceName</param>
            <param name="userid"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ConnectionStringUtil.GetMySql(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            获取MySQL连接字符串
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="configs"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DaoBase">
            <summary>
            数据操作DAO基类
            </summary>
        </member>
        <member name="P:TinyFx.Data.DaoBase.Database">
            <summary>
            获取数据库访问对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.DaoBase.Provider">
            <summary>
            数据提供程序类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.DaoBase.Command">
            <summary>
            获取DbCommand封装对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.DaoBase.CommandTimeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间，单位秒。默认30秒，0表示不限制时间
            </summary>
        </member>
        <member name="M:TinyFx.Data.DaoBase.#ctor(System.String,System.Data.CommandType,TinyFx.Data.Database)">
            <summary>
            构造函数
            创建时不设置 Connection ，执行时才设置Connection
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.DaoBase.Init(System.String,System.Data.CommandType,TinyFx.Data.Database)">
            <summary>
            初始化DAO
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.DaoBase.Dispose">
            <summary>
            释放所使用的所有资源。
            </summary>
        </member>
        <member name="M:TinyFx.Data.DaoBase.Close">
            <summary>
            释放所使用的所有资源。
            </summary>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecScalar(TinyFx.Data.TransactionManager)">
            <summary>
            执行查询语句并返回首行首列数据
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecScalar``1(TinyFx.Data.TransactionManager,System.Func{System.Object,``0})">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <param name="converter">类型转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecScalar``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行查询语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecScalar``1(System.Func{System.Object,``0})">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="converter">类型转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecNonQuery(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecReader(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecTable(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecSingle(TinyFx.Data.TransactionManager)">
            <summary>
            返回唯一一行记录，没有记录则返回NULL，如果存在多行抛出异常
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecSingle``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回唯一实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecSingle``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回唯一实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecSingle``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回唯一实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecSingle``1">
            <summary>
            执行SQL语句并返回唯一实体对象(T)
            使用ColumnMapperAttribute定义的元数据进行反射获取实体对象
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecFirst(TinyFx.Data.TransactionManager)">
            <summary>
            返回首行记录，没有记录则返回NULL
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecFirst``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecFirst``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecFirst``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecFirst``1">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            使用ColumnMapperAttribute定义的元数据进行反射获取实体对象
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1(TinyFx.Data.DataMappingMode,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecMutil``1(TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1(TinyFx.Data.DataMappingMode,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ExecList``1(TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.CreateParameter(System.String,System.Data.ParameterDirection,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建DbParameter
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="param">DbParameter对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            添加DbParameter参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddParameters(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            添加DbParameter参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddParameter(System.String,System.Data.ParameterDirection,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            添加DbParameter参数,不包括值
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddInParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加输入DbParameter参数和值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加输出DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddInOutParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加双向DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.ClearParameters">
            <summary>
            清除所有定义的参数集合
            </summary>
        </member>
        <member name="M:TinyFx.Data.DaoBase.AddInParameters(System.Object[])">
            <summary>
            自动添加存储过程的输入输出参数，并给输入参数按顺序赋值
            </summary>
            <param name="values">输入参数值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.SetParameterValue(System.String,System.Object)">
            <summary>
            设置DbParameter参数的值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.GetParameterValue(System.String)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <param name="name">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.GetParameterValue(System.Int32)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <param name="index">参数索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.GetParameterValue``1(System.String)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <typeparam name="T">参数值类型</typeparam>
            <param name="name">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.GetParameterValue``1(System.Int32)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <typeparam name="T">参数值类型</typeparam>
            <param name="index">参数索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase.GetOutParameterValue``1(System.Int32)">
            <summary>
            获取输出参数的值，如果只存在一个输出参数不用传入参数
            </summary>
            <typeparam name="T">参数值类型</typeparam>
            <param name="index">输出参数索引，0开始,如果存在2个输出参数，需要获取第二个则传入1</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DaoBase`2">
            <summary>
            DaoBase泛型基类
            </summary>
            <typeparam name="TParameter">DbParameter类型，如：MySqlParameter</typeparam>
            <typeparam name="TDbType">DbParameter的参数类型，如：MySqlDbType</typeparam>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.#ctor(System.String,System.Data.CommandType,TinyFx.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="database"></param>
        </member>
        <member name="P:TinyFx.Data.DaoBase`2.LastParameter">
            <summary>
            获取最后一个参数
            </summary>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.SetParameterDbType(`0,`1)">
            <summary>
            子类设置Parameter的DbType属性
            </summary>
            <param name="para"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.CreateParameter(System.String,System.Data.ParameterDirection,System.Object,`1,System.Int32)">
            <summary>
            创建DbParameter对象
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <param name="value">参数的值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddParameter(`0)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="param">DbParameter对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddParameters(`0[])">
            <summary>
            添加DbParameter参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddParameters(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加DbParameter参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddParameter(System.String,System.Data.ParameterDirection,System.Object,`1,System.Int32)">
            <summary>
            添加参数
            </summary>
            <param name="name"></param>
            <param name="direction"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddParameter(System.String,System.Data.ParameterDirection,`1,System.Int32)">
            <summary>
            添加DbParameter参数,不包括值
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddInParameter(System.String,System.Object,`1,System.Int32)">
            <summary>
            添加输入DbParameter参数和值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddOutParameter(System.String,`1,System.Int32)">
            <summary>
            添加输出DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DaoBase`2.AddInOutParameter(System.String,System.Object,`1,System.Int32)">
            <summary>
            添加双向DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.IDao">
            <summary>
            数据操作抽象接口
            </summary>
        </member>
        <member name="P:TinyFx.Data.IDao.Command">
            <summary>
            获取DbCommand封装对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.IDao.CommandTimeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间，单位秒。默认30秒，0表示不限制时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.IDao.Database">
            <summary>
            获取数据库访问对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.IDao.Provider">
            <summary>
            数据提供程序类型
            </summary>
        </member>
        <member name="M:TinyFx.Data.IDao.AddInOutParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加双向DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddInParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加输入DbParameter参数和值
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddInParameters(System.Object[])">
            <summary>
            自动添加存储过程的输入输出参数，并给输入参数按顺序赋值
            </summary>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            添加输出DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="param">参数</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddParameter(System.String,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="direction">参数类型</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddParameter(System.String,System.Data.ParameterDirection,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="name">参数名称</param>
            <param name="direction">参数类型</param>
            <param name="value">参数值</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddParameters(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.AddParameters(System.Data.Common.DbParameter[])">
            <summary>
            添加DbParameter参数
            </summary>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ClearParameters">
            <summary>
            清除所有定义的参数集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.CreateParameter(System.String,System.Data.ParameterDirection,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建DbParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="direction">参数类型</param>
            <param name="value">参数值</param>
            <param name="dbType">参数数据类型</param>
            <param name="size">参数大小</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.Close">
            <summary>
            释放所使用的所有资源
            </summary>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecFirst(TinyFx.Data.TransactionManager)">
            <summary>
            返回首行记录，没有记录则返回NULL
            </summary>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecFirst``1">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            使用ColumnMapperAttribute定义的元数据进行反射获取实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecFirst``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecFirst``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecFirst``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行实体对象(T)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1(TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1(TinyFx.Data.DataMappingMode,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecList``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)列表集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1(TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1(TinyFx.Data.DataMappingMode,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecMutil``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回实体对象(T)枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecNonQuery(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecReader(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecScalar(TinyFx.Data.TransactionManager)">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecScalar``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecScalar``1(System.Func{System.Object,``0})">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecScalar``1(TinyFx.Data.TransactionManager,System.Func{System.Object,``0})">
            <summary>
            执行查询语句并返回首行首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecSingle(TinyFx.Data.TransactionManager)">
            <summary>
            返回唯一一行记录，没有记录则返回NULL，如果存在多行抛出异常
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecSingle``1">
            <summary>
            执行SQL语句并返回唯一实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecSingle``1(System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句并返回唯一实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecSingle``1(System.Func{System.Data.IDataReader,``0},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回唯一实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rowMapper"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecSingle``1(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回唯一实体对象(T)，如果没有值返回 T 类型的默认值。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.ExecTable(TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.GetOutParameterValue``1(System.Int32)">
            <summary>
            获取输出参数的值，如果只存在一个输出参数不用传入参数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.GetParameterValue(System.Int32)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.GetParameterValue(System.String)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.GetParameterValue``1(System.Int32)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.GetParameterValue``1(System.String)">
            <summary>
            获取DbParameter参数的值，可通过此方法获取输出参数的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDao.SetParameterValue(System.String,System.Object)">
            <summary>
            设置DbParameter参数的值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Database">
            <summary>
            数据库访问类，提供数据库操作方法，通过DbFactory类进行创建。线程安全
            ExecuteScalar ==> T
            ExecuteNonQuery
            ExecuteReader ==> Table/T (Mutil|List|Single|First)
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.Factory">
            <summary>
            DbProviderFactory对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.Provider">
            <summary> 
            数据提供程序类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.ConnectionStringName">
            <summary>
            配置中数据库连接字符串名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.ReadConnectionString">
            <summary>
            只读数据库连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.UseOnlyRead">
            <summary>
            是否使用只读数据库连接
            解决问题：当需要读取刚操作的数据，并且他们不在一个事务时，需要设置此属性为false访问主库
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.CommandTimeout">
            <summary>
            获取或设置在终止执行命令的尝试并生成错误之前的等待时间，单位秒。默认30秒，0表示不限制时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.InstProvider">
            <summary>
            性能监视提供程序
            </summary>
        </member>
        <member name="M:TinyFx.Data.Database.GetConnectionStringInfo">
            <summary>
            获取连接字符串信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.Database.ConnectionStringInfo">
            <summary>
            数据库连接字符串信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Database.DatabaseName">
            <summary>
             数据库名称
            </summary>
        </member>
        <member name="M:TinyFx.Data.Database.CloneParameter(System.Data.IDataParameter)">
            <summary>
            不同的数据库可能需要重写
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ParseSqlParameterNames(System.String)">
            <summary>
            解析并获得SQL中定义的参数名称列表，转成大写
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.Database.SupportsAsync">
            <summary>
            是否支持异步操作
            </summary>
        </member>
        <member name="M:TinyFx.Data.Database.#ctor(TinyFx.Data.ConnectionStringConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Data.Database.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionStringName">配置文件中的 connectionStringName</param>
        </member>
        <member name="M:TinyFx.Data.Database.#ctor(System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.Database.#ctor(System.String,System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="readConnectionString">只读数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.Database.CheckConnection">
            <summary>
            检查当前数据库是否可以连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateCommand(System.String,System.Data.CommandType,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Boolean)">
            <summary>
            创建完整的Command，包含Connection和Parameters
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="paras"></param>
            <param name="tm"></param>
            <param name="repairConnection">是否配置Connection属性.DAO对象在执行时才创建</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateCommand(System.String,System.Data.CommandType,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            创建Command，解析Parameters并设置Values
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="tm"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetSqlDao(System.String)">
            <summary>
            获得SqlDao
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetProcDao(System.String)">
            <summary>
            获得ProcDao
            </summary>
            <param name="proc"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetPager(System.String,System.Int32,System.String)">
            <summary>
            创建分页辅助对象
            </summary>
            <param name="sql">SQL语句</param>
            <param name="pageSize">页大小</param>
            <param name="userData">关键键（主键或唯一键）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetEmptyTable(System.String)">
            <summary>
            获取指定表名的空的 DataTable
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetSchemaTable(System.String)">
            <summary>
            获取指定表名的描述列元数据的 DataTable
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SLQ</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlList``1(System.String,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行SQL语句返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcList``1(System.String,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数集合</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlMutil``1(System.String,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行SQL语句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程句返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="rowMapper">映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="mode">映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm">事务对象</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">映射方法</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcMutil``1(System.String,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回枚举集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">映射模式</param>
            <param name="values">参数值集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String)">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQuery(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQueryFormat(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回受影响的行数（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：delete from {0} where id={1}</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlNonQueryFormat(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回受影响的行数（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：delete from {0} where id={1}</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String)">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcNonQuery(System.String,System.Object[])">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc">存储过程</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReader(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReaderFormat(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回结果集（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：select * from {0} where id={1}</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlReaderFormat(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回结果集（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：select * from {0} where id={1}</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String)">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcReader(System.String,System.Object[])">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc">存储过程</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String)">
            <summary>
            执行SQL语句并返回首行首列数据。
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行首列数据
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行首列数据
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
             执行SQL语句并返回首行首列数据
             如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String)">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalar``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据
            DBNull将转换成null返回
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalarFormat(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据（SQL语句通过string.Format格式化项）
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句，如：select name from {0} where id={1}</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalarFormat(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据（SQL语句通过string.Format格式化项）
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句，如：select name from {0} where id={1}</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalarFormat``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据（SQL语句通过string.Format格式化项）
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句，如：select name from {0} where id={1}</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlScalarFormat``1(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回首行首列数据（SQL语句通过string.Format格式化项）
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql">SQL语句，如：select name from {0} where id={1}</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String,System.Object[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String,System.Object[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcScalar``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="proc">存储过程名称</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String)">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数列表</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数列表</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数列表</param>
            <param name="tm">事务对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="paras">参数列表</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="rowMapper">行映射方法</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="tm">事务对象</param>
            <param name="mode">行映射模式</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Object[])">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行SQL返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">SQL</param>
            <param name="rowMapper">行映射方法</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm"></param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm"></param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Func{System.Data.IDataReader,``0})">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="rowMapper">行映射方法</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.DataMappingMode)">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <param name="rowMapper">行映射方法</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.TransactionManager,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="tm"></param>
            <param name="mode">行映射模式</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,System.Func{System.Data.IDataReader,``0},System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="rowMapper">行映射方法</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle``1(System.String,TinyFx.Data.DataMappingMode,System.Object[])">
            <summary>
            执行存储过程返回单个实体对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc">存储过程</param>
            <param name="mode">行映射模式</param>
            <param name="values">参数值列表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String)">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlSingle(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回DataRow
            </summary>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String)">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcSingle(System.String,System.Object[])">
            <summary>
            执行存储过程并返回DataRow
            </summary>
            <param name="proc">存储过程</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String)">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTable(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql">SQL语句</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTableFormat(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行SQL语句并返回DataTable（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：select * from {0} where id={1}</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecSqlTableFormat(System.String,System.Object[])">
            <summary>
            执行SQL语句并返回DataTable（SQL语句通过string.Format格式化项）
            </summary>
            <param name="sql">SQL语句，如：select * from {0} where id={1}</param>
            <param name="values">包含零个或多个替换SQL语句中的格式项的对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String)">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <param name="paras">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <param name="tm">数据库事务管理对象</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.ExecProcTable(System.String,System.Object[])">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc">存储过程</param>
            <param name="values">按顺序传入需要的参数值集合，程序会自动解析并添加参数集合，并把传入的参数值赋给对应的参数对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.GetParameterName(System.String)">
            <summary>
            获得符合数据库提供者的参数名称
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.DeriveParameters(TinyFx.Data.CommandWrapper)">
            <summary>
            根据语句或存储过程自动解析并填充DbCommand对象的参数集合
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:TinyFx.Data.Database.CreateParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            创建参数对象DbParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <param name="value">参数的值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateInParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建输入参数DbParameter对象
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            创建输出参数DbParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateInOutParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            创建双向参数DbParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database.CreateReturnParameter(System.String)">
            <summary>
            添加返回值参数DbParameter
            </summary>
            <param name="name">参数名称</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Database`2">
            <summary>
            Database泛型类型
            </summary>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TDbType"></typeparam>
        </member>
        <member name="M:TinyFx.Data.Database`2.SetParameterDbType(`0,`1)">
            <summary>
            设置TParameter的TDbType
            </summary>
            <param name="para"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:TinyFx.Data.Database`2.CreateParameter(System.String,`1,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            创建参数对象MySqlParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <param name="direction">指示参数是只可输入、只可输出、双向还是存储过程返回值参数</param>
            <param name="value">参数的值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.CreateInParameter(System.String,System.Object,`1,System.Int32)">
            <summary>
            创建输入参数MySqlParameter对象
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.CreateOutParameter(System.String,`1,System.Int32)">
            <summary>
            创建输出参数MySqlParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.CreateInOutParameter(System.String,System.Object,`1,System.Int32)">
            <summary>
            创建双向参数MySqlParameter
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数的值</param>
            <param name="dbType">参数的 DbType</param>
            <param name="size">列中数据的最大大小（以字节为单位）</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlScalar(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回首行首列数据。
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlScalar``1(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回首行首列数据。
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlScalar(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回首行首列数据。
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <param name="sql"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlScalar``1(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回首行首列数据。
            如果返回null表示一行数据都没有，返回DBNull表示首行首列的值为空
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcScalar(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcScalar``1(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcScalar(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <param name="proc"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcScalar``1(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回首行首列数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proc"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlNonQuery(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlNonQuery(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回受影响的行数
            </summary>
            <param name="sql"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcNonQuery(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcNonQuery(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回受影响的行数
            </summary>
            <param name="proc"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlReader(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlReader(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回结果集
            </summary>
            <param name="sql"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcReader(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcReader(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回结果集
            </summary>
            <param name="proc"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlTable(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecSqlTable(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行SQL语句并返回DataTable
            </summary>
            <param name="sql"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcTable(System.String,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Database`2.ExecProcTable(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`1,System.Object}[])">
            <summary>
            执行存储过程并返回DataTable
            </summary>
            <param name="proc"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DataPagerBase">
            <summary>
            分页基类
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.Database">
            <summary>
            当前的数据库对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.OriginalSql">
            <summary>
            获取原始SQL语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.FirstPageSql">
            <summary>
            获取获取第一页SQL语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.PagerSql">
            <summary>
            获取分页语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.RecordCountSql">
            <summary>
            获取记录总数SQL语句
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.#ctor(System.String,System.Int32,TinyFx.Data.Database,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">sql语句</param>
            <param name="pageSize">页大小</param>
            <param name="database">数据库</param>
            <param name="userData">用户数据，不同数据库可能需要此数据生成分页SQL</param>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetSqlCacheItem">
            <summary>
            不同的数据库进行不同的SQL解析
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.RefreshCountDate">
            <summary>
            最后一次获取总记录数的时间
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetRecordCount(System.Boolean)">
            <summary>
            获取上次获取的总记录数或者重新获取记录数
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetPageCount(System.Boolean)">
            <summary>
            获取最新总页数或者上次获取的总页数
            </summary>
            <param name="refresh">true:总是获取最新,false:获取上次</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetPageReader(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetPageReader(System.Int64)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetPageTable(System.Int32)">
            <summary>
            获得分页DataTable
            </summary>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.GetPageTable(System.Int64)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.AddInParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加分页SQL语句中定义的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
        </member>
        <member name="M:TinyFx.Data.DataPagerBase.AddParameters(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            添加分页SQL语句中定义的参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
        </member>
        <member name="T:TinyFx.Data.DataPagerBase.SqlPagerCacheItem">
            <summary>
            实现分页相关缓存项
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.SqlPagerCacheItem.FirstPageSql">
            <summary>
            获取第一页SQL语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.SqlPagerCacheItem.PagerSql">
            <summary>
            分页语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataPagerBase.SqlPagerCacheItem.RecordCountSql">
            <summary>
            获取记录总数SQL语句
            </summary>
        </member>
        <member name="T:TinyFx.Data.IDataPager">
            <summary>
            数据分页接口，目前只支持SQL Server和Oracle,MySQL
            SQL语句中支持参数定义
            不支持UNION、EXCEPT 和 INTERSECT
            只支持关键键（主键或唯一键）中包含单一字段的分页查询
            如果存在Group By子句，则SELECT和Order By中的聚合函数字段必须使用别名
            </summary>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetRecordCount(System.Boolean)">
            <summary>
            获取上次获取的总记录数或者重新获取记录数
            </summary>
            <param name="refresh">是否从数据库获取最新记录总数，如果为false则返回上次查询的记录总数</param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.IDataPager.RefreshCountDate">
            <summary>
            最后一次获取总记录数的时间，根据此时间判断是否从新获取最新记录总数
            </summary>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetPageCount(System.Boolean)">
            <summary>
            获取上次获取的总页数或刷新
            </summary>
        </member>
        <member name="M:TinyFx.Data.IDataPager.AddInParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加分页SQL语句中定义的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
        </member>
        <member name="M:TinyFx.Data.IDataPager.AddParameters(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            添加分页SQL语句中定义的参数集合
            </summary>
            <param name="paras">DbParameter集合对象</param>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetPageReader(System.Int64)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetPageReader(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetPageTable(System.Int32)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.IDataPager.GetPageTable(System.Int64)">
            <summary>
            获取分页数据
            </summary>
            <param name="pageIndex">页索引</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.SqlSelectParser">
            <summary>
            SQL查询语句结构
            </summary>
        </member>
        <member name="T:TinyFx.Data.SqlSelectStruct">
            <summary>
            SQL语句解析后的结构
            </summary>
        </member>
        <member name="T:TinyFx.Data.DataReaderWrapper">
            <summary>
            DbDataReader封装
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.Reader">
            <summary>
            内部DbDataReader对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.Command">
            <summary>
            内部CommandWrapper对象
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.#ctor(TinyFx.Data.CommandWrapper,System.Data.Common.DbDataReader)">
            <summary>
            构造函数
            </summary>
            <param name="command">Command对象</param>
            <param name="reader">DataReader对象</param>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetReader``1">
            <summary>
            获取DbDataReader的具体类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.Dispose">
            <summary>
            如果存在事务，并不会关闭连接
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.Close">
            <summary>
            如果存在事务，并不会关闭连接
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.Read">
            <summary>
            将读取器前进到结果集中的下一个记录。
            </summary>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.Depth">
            <summary>
            获取一个值，该值指示当前行的嵌套深度。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.HasRows">
            <summary>
            获取一个值，它指示此 System.Data.Common.DbDataReader 是否包含一个或多个行。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.IsClosed">
            <summary>
            获取一个值，该值指示 System.Data.Common.DbDataReader 是否已关闭。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.RecordsAffected">
            <summary>
            通过执行 SQL 语句获取更改、插入或删除的行数。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.VisibleFieldCount">
            <summary>
            获取 System.Data.Common.DbDataReader 中未隐藏的字段的数目。
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.Item(System.Int32)">
            <summary>
            获取指定列的作为 System.Object 的实例的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.DataReaderWrapper.Item(System.String)">
            <summary>
             获取指定列的作为 System.Object 的实例的值。
            </summary>
            <param name="name">列的名称。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetBoolean(System.Int32)">
            <summary>
            获取指定列的布尔值形式的值。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetByte(System.Int32)">
            <summary>
            获取指定列的字节形式的值。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定列读取一个字节流（从 dataOffset 指示的位置开始），读到缓冲区中（从 bufferOffset 指示的位置开始）。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <param name="dataOffset">行中的索引，从其开始读取操作。</param>
            <param name="buffer">作为数据复制目标的缓冲区。</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
            <param name="length">最多读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetChar(System.Int32)">
            <summary>
            获取指定列的单个字符串形式的值。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            从指定列读取一个字符流，从 dataIndex 指示的位置开始，读到缓冲区中，从 bufferIndex 指示的位置开始。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <param name="dataOffset">行中的索引，从其开始读取操作。</param>
            <param name="buffer">作为数据复制目标的缓冲区。</param>
            <param name="bufferOffset">具有作为数据复制目标的缓冲区的索引。</param>
            <param name="length">最多读取的字符数。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetData(System.Int32)">
            <summary>
            返回被请求的列序号的 System.Data.Common.DbDataReader 对象。
            </summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetDataTypeName(System.Int32)">
            <summary>
            获取指定列的数据类型的名称。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetDateTime(System.Int32)">
            <summary>
            获取指定列的 System.DateTime 对象形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetDecimal(System.Int32)">
            <summary>
            获取指定列的 System.Decimal 对象形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetDouble(System.Int32)">
            <summary>
            获取指定列的双精度浮点数形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetEnumerator">
            <summary>
            返回一个 System.Collections.IEnumerator，可用于循环访问数据读取器中的行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetFieldType(System.Int32)">
            <summary>
            获取指定列的数据类型。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetFloat(System.Int32)">
            <summary>
            获取指定列的单精度浮点数形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetGuid(System.Int32)">
            <summary>
            获取指定列的全局唯一标识符 (GUID) 形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetInt16(System.Int32)">
            <summary>
            获取指定列的 16 位带符号整数形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetInt32(System.Int32)">
            <summary>
            获取指定列的 32 位带符号整数形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetInt64(System.Int32)">
            <summary>
            获取指定列的 64 位带符号整数形式的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetName(System.Int32)">
            <summary>
            给定了从零开始的列序号时，获取列的名称。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetOrdinal(System.String)">
            <summary>
            给定列名称时，获取列序号。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetProviderSpecificFieldType(System.Int32)">
            <summary>
            返回指定列的提供程序特定的字段类型。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetProviderSpecificValue(System.Int32)">
            <summary>
            获取指定列的作为 System.Object 的实例的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetProviderSpecificValues(System.Object[])">
            <summary>
            获取集合中当前行的所有提供程序特定的属性列。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetSchemaTable">
            <summary>
            返回一个 System.Data.DataTable，它描述 System.Data.Common.DbDataReader 的列元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetString(System.Int32)">
            <summary>
            获取指定列的作为 System.String 的实例的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetValue(System.Int32)">
            <summary>
            获取指定列的作为 System.Object 的实例的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.GetValues(System.Object[])">
            <summary>
            使用当前行的列值来填充对象数组。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.IsDBNull(System.Int32)">
            <summary>
            获取一个值，该值指示列中是否包含不存在的或已丢失的值。
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataReaderWrapper.NextResult">
            <summary>
            读取批处理语句的结果时，使读取器前进到下一个结果。
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DbDataProvider">
            <summary>
            连接数据库的数据提供程序类型(包括Oracle的ODAC和MySql的Connector Net)
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.Unknown">
            <summary>
            未知的数据提供程序类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.Odbc">
            <summary>
            用于 ODBC 的 .NET Framework 数据提供程序。命名空间System.Data.Odbc
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.OleDb">
            <summary>
            用于 OLE DB 的 .NET Framework 数据提供程序。命名空间System.Data.OleDb
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.SqlClient">
            <summary>
            用于 SQL Server 的 .NET Framework 数据提供程序。命名空间System.Data.SqlClient
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.OracleClient">
            <summary>
            用于 Oracle 的 .NET Framework 数据提供程序,只支持Oracle8.1.7-9iR2版本。命名空间 System.Data.OracleClient
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.SqlServerCe">
            <summary>
            用于 SQL Server Compact 4.0 的托管数据提供程序。命名空间System.Data.SqlServerCe
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.Odac">
            <summary>
            用于 Oracle 的ODAC(ODP.NET)数据提供程序。命名空间Oracle.ManagedDataAccess.Client
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProvider.MySqlClient">
            <summary>
            用于 MySQL 的MySQL Connector Net数据提供程序。命名空间MySql.Data.MySqlClient
            </summary>
        </member>
        <member name="T:TinyFx.Data.DbDataProviderUtil">
            <summary>
            数据提供程序辅助类
            可以通过DbProviderFactories.GetFactory(string)返回DbProviderFactory
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.OdbcName">
            <summary>
            Odbc数据提供程序名称
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.OleDbName">
            <summary>
            OleDb数据提供程序名称
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.SqlClientName">
            <summary>
            SqlClient数据提供程序名称
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.SqlServerCeName">
            <summary>
            SqlServerCeClient数据提供程序名称
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.OracleClientName">
            <summary>
            OracleClient数据提供程序名称，微软提供
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.OdacName">
            <summary>
            Oracle数据提供程序名称，Oracle公司提供 Oracle.ManagedDataAccess.Client
            </summary>
        </member>
        <member name="F:TinyFx.Data.DbDataProviderUtil.MySqlClientName">
            <summary>
            MySQL数据提供程序
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbDataProviderUtil.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbDataProviderUtil.GetProvider(System.String)">
            <summary>
            获取数据提供程序类型
            </summary>
            <param name="providerName">数据提供程序名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbDataProviderUtil.GetProvider(System.Type)">
            <summary>
            根据数据库类型获得数据提供程序类型
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbDataProviderUtil.GetInvariantName(TinyFx.Data.DbDataProvider)">
            <summary>
            获取DbProviderFactories.GetFactory所使用的提供程序名称
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbDataProviderUtil.GetInvariantName(System.String)">
            <summary>
            获取DbProviderFactories.GetFactory所使用的提供程序名称
            </summary>
            <param name="providerName"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DBDataSource">
            <summary>
            数据源（数据库）类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.Access">
            <summary>
            Microsoft Access 数据库文件
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.Odbc">
            <summary>
            Microsoft ODBC 数据源
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.Oracle">
            <summary>
            Oracle 数据库
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.SqlServer">
            <summary>
            Microsoft SQL Server
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.SqlFile">
            <summary>
            Microsoft SQL Server 数据库文件
            </summary>
        </member>
        <member name="F:TinyFx.Data.DBDataSource.MySql">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="T:TinyFx.Data.DbUtil">
            <summary>
            数据库操作辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbUtil.CheckSqlInjection(System.String)">
            <summary>
            检查SQL注入，如果存在危险返回true
            </summary>
            <param name="sql">检查的SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.Int32,System.Func{System.Object,``0})">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.Int32,``0,System.Func{System.Object,``0})">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.String,System.Func{System.Object,``0})">
            <summary>
            获取位于指定名称的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.DataRow,System.String,``0,System.Func{System.Object,``0})">
            <summary>
            获取位于指定名称的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为String
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为String。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为String
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为String。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.DataRow,System.Int32,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.DataRow,System.String,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.DataRow,System.Int32,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.DataRow,System.String,System.Byte)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为SByte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.DataRow,System.Int32,System.SByte)">
            <summary>
            获取位于指定索引处的列的值并转换为SByte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为SByte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.DataRow,System.String,System.SByte)">
            <summary>
            获取位于指定名称的列的值并转换为SByte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.DataRow,System.Int32,System.SByte)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.DataRow,System.String,System.SByte)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.DataRow,System.Int32,System.Int16)">
            <summary>
            获取位于指定索引处的列的值并转换为Int16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.DataRow,System.String,System.Int16)">
            <summary>
            获取位于指定名称的列的值并转换为Int16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.DataRow,System.Int32,System.Int16)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.DataRow,System.String,System.Int16)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.DataRow,System.Int32,System.UInt16)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.DataRow,System.String,System.UInt16)">
            <summary>
            获取位于指定名称的列的值并转换为UInt16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.DataRow,System.Int32,System.UInt16)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt16
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.DataRow,System.String,System.UInt16)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt16。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.DataRow,System.Int32,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            获取位于指定名称的列的值并转换为Int32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.DataRow,System.Int32,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.DataRow,System.Int32,System.UInt32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.DataRow,System.String,System.UInt32)">
            <summary>
            获取位于指定名称的列的值并转换为UInt32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.DataRow,System.Int32,System.UInt32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt32
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.DataRow,System.String,System.UInt32)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt32。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.DataRow,System.Int32,System.Int64)">
            <summary>
            获取位于指定索引处的列的值并转换为Int64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.DataRow,System.String,System.Int64)">
            <summary>
            获取位于指定名称的列的值并转换为Int64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.DataRow,System.Int32,System.Int64)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.DataRow,System.String,System.Int64)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.DataRow,System.Int32,System.UInt64)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.DataRow,System.String,System.UInt64)">
            <summary>
            获取位于指定名称的列的值并转换为UInt64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.DataRow,System.Int32,System.UInt64)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt64
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.DataRow,System.String,System.UInt64)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt64。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Single
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.DataRow,System.Int32,System.Single)">
            <summary>
            获取位于指定索引处的列的值并转换为Single。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Single
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.DataRow,System.String,System.Single)">
            <summary>
            获取位于指定名称的列的值并转换为Single。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Single
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.DataRow,System.Int32,System.Single)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Single。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Single
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.DataRow,System.String,System.Single)">
            <summary>
            获取位于指定名称的列的值并转换为可空Single。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Double
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.DataRow,System.Int32,System.Double)">
            <summary>
            获取位于指定索引处的列的值并转换为Double。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Double
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.DataRow,System.String,System.Double)">
            <summary>
            获取位于指定名称的列的值并转换为Double。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Double
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.DataRow,System.Int32,System.Double)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Double。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Double
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.DataRow,System.String,System.Double)">
            <summary>
            获取位于指定名称的列的值并转换为可空Double。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Decimal
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.DataRow,System.Int32,System.Decimal)">
            <summary>
            获取位于指定索引处的列的值并转换为Decimal。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Decimal
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            获取位于指定名称的列的值并转换为Decimal。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Decimal
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.DataRow,System.Int32,System.Decimal)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Decimal。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Decimal
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            获取位于指定名称的列的值并转换为可空Decimal。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Char
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.DataRow,System.Int32,System.Char)">
            <summary>
            获取位于指定索引处的列的值并转换为Char。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Char
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.DataRow,System.String,System.Char)">
            <summary>
            获取位于指定名称的列的值并转换为Char。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Char
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.DataRow,System.Int32,System.Char)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Char。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.DataRow,System.String,System.Char)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Boolean
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.DataRow,System.Int32,System.Boolean)">
            <summary>
            获取位于指定索引处的列的值并转换为Boolean。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Boolean
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            获取位于指定名称的列的值并转换为Boolean。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Boolean
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.DataRow,System.Int32,System.Boolean)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Boolean。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Boolean
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            获取位于指定名称的列的值并转换为可空Boolean。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.Int32,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.Int32,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.Int32,System.String,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.DataRow,System.String,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.Int32,System.String,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.DataRow,System.String,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.Int32,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.Int32,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.Int32,System.String,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.DataRow,System.String,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.Int32,System.String,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.DataRow,System.String,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="row">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Guid
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.DataRow,System.Int32,System.Guid)">
            <summary>
            获取位于指定索引处的列的值并转换为Guid。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Guid
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.DataRow,System.String,System.Guid)">
            <summary>
            获取位于指定名称的列的值并转换为Guid。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Guid
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.DataRow,System.Int32,System.Guid)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Guid。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Guid
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.DataRow,System.String,System.Guid)">
            <summary>
            获取位于指定名称的列的值并转换为可空Guid。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte[]
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.DataRow,System.Int32,System.Byte[])">
            <summary>
            获取位于指定索引处的列的值并转换为Byte[]。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Byte[]
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.DataRow,System.String,System.Byte[])">
            <summary>
            获取位于指定名称的列的值并转换为Byte[]。如转换失败则使用默认值
            </summary>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Enum
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.DataRow,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Enum
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.DataRow,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Enum
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.DataRow,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.DataRow,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Enum
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为可空Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="row">DataRow对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ImportRows(System.Data.DataTable,System.Data.DataRowCollection)">
            <summary>
            将 System.Data.DataRow 集合复制到 System.Data.DataTable 中，保留任何属性设置以及初始值和当前值。
            源DataTable与目标DataTable的表结构必须相同。
            </summary>
            <param name="src"></param>
            <param name="rows">要导入的 System.Data.DataRow 集合</param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.AddRow(System.Data.DataTable,System.Object[])">
            <summary>
            添加行数据，内部调用src.NewRow()后按顺序赋值
            </summary>
            <param name="src"></param>
            <param name="values"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.Add(System.Data.DataRowCollection,System.Collections.Generic.IEnumerable{System.Data.DataRow})">
            <summary>
            添加DataRow集合，DataRow必须是此DataTable调用NewRow()创建的
            </summary>
            <param name="src"></param>
            <param name="rows"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.SetValue(System.Data.DataRow,System.String,System.Object)">
            <summary>
            设置存储在指定的 System.Data.DataColumn 中的数据，等同SetField(T)()。支持Nullable类型数据
            </summary>
            <param name="row">数据行</param>
            <param name="columnName">列名</param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.SetValue(System.Data.DataRow,System.Int32,System.Object)">
            <summary>
            设置存储在指定的 System.Data.DataColumn 中的数据，等同SetField(T)()。支持Nullable类型数据
            </summary>
            <param name="row">数据行</param>
            <param name="columnIndex">列索引</param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.SetValues(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            将旧行中列名相同的数据赋值到新行中
            </summary>
            <param name="newRow">新行</param>
            <param name="oldRow">旧行数据</param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.SetValues(System.Data.DataRow,System.Object[])">
            <summary>
            设置DataRow中的值
            </summary>
            <param name="row"></param>
            <param name="values"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.SetValues(System.Data.DataRow,System.Data.Common.DbDataReader)">
            <summary>
            将旧行中列名相同的数据赋值到新行中
            </summary>
            <param name="newRow">新行</param>
            <param name="reader">旧行数据</param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.Load``1(System.Data.DataTable,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将实体对象集合加载到DataTable中，通过列名与属性名的对应
            Entities => DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src"></param>
            <param name="items"></param>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将实体对象转换为DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTable(System.Data.IDataReader,System.Boolean)">
            <summary>
            从IDataReader对象填充成DataTable对象
            </summary>
            <param name="reader"></param>
            <param name="isClose"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ArrayToTable(System.Object[0:,0:],System.String[])">
            <summary>
            将二维数组转换成DataTable
            </summary>
            <param name="data">二维数据</param>
            <param name="columnNames">列名定义</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToFirst``1(System.Data.DataTable,System.Func{System.Data.IDataReader,``0})">
            <summary>
            获取 DataTable 的首行映射的实体对象(T)
            </summary>
            <typeparam name="T">DataTable 对象映射的实体对象类型</typeparam>
            <param name="table">DataTable 对象</param>
            <param name="rowMapper">IDataReader 对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToFirst``1(System.Data.DataTable,TinyFx.Data.DataMappingMode)">
            <summary>
            获取 DataTable 的首行映射的实体对象(T)
            </summary>
            <typeparam name="T">DataTable 对象映射的实体对象类型</typeparam>
            <param name="table">DataTable 对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToList``1(System.Data.DataTable,System.Func{System.Data.IDataReader,``0})">
            <summary>
            获取 DataTable 对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">DataTable 对象映射的实体对象类型</typeparam>
            <param name="table">DataTable 对象</param>
            <param name="rowMapper">IDataReader 对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToList``1(System.Data.DataTable,TinyFx.Data.DataMappingMode)">
            <summary>
            获取 DataTable 对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">DataTable 对象映射的实体对象类型</typeparam>
            <param name="table">DataTable 对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.GetRowMapper``1(TinyFx.Data.DataMappingMode)">
            <summary>
            获得 IDataReader ==> Entity 的映射方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToSingle``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
            <summary>
            映射IDataReader对象中唯一记录（可以没有记录）到实体对象(T)，但必须支持null到TinyFxUtil.ConvertTo(T)的转换
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToSingle``1(System.Data.IDataReader,TinyFx.Data.DataMappingMode)">
            <summary>
            获取唯一的IDataReader对象映射的实体对象(T)
            （IDataReader对象中有且只能有一条记录）
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToMutil``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
            <summary>
            获取IDataReader对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToMutil``1(System.Data.IDataReader,TinyFx.Data.DataMappingMode)">
            <summary>
            获取IDataReader对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToList``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
            <summary>
            获取IDataReader对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToList``1(System.Data.IDataReader,TinyFx.Data.DataMappingMode)">
            <summary>
            获取IDataReader对象映射的实体对象(T)集合
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToFirst``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
            <summary>
            获取IDataReader对象映射的首行实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="rowMapper">IDataReader对象到实体对象的映射方法，如果为null，则使用接口IRowMapper(T)或ColumnMapperAttribute定义的元数据通过反射获取实体对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.MapToFirst``1(System.Data.IDataReader,TinyFx.Data.DataMappingMode)">
            <summary>
            获取IDataReader对象映射的首行实体对象(T)
            </summary>
            <typeparam name="T">IDataReader对象映射的实体对象类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="mode">行映射模式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型，用到反射性能慢
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.Int32,System.Func{System.Object,``0})">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型，如转换失败则使用默认值，用到反射性能慢
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.Int32,``0,System.Func{System.Object,``0})">
            <summary>
            获取位于指定索引处的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为指定类型，用到反射性能慢
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.String,System.Func{System.Object,``0})">
            <summary>
            获取位于指定名称的列的值并转换为指定类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为指定类型，如转换失败则使用默认值，用到反射性能慢
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.To``1(System.Data.IDataReader,System.String,``0,System.Func{System.Object,``0})">
            <summary>
            获取位于指定名称的列的值并转换为指定类型，如转换失败则使用默认值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <param name="converter">自定义转换器</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为String
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为String。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为String
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为String。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.IDataReader,System.Int32,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.IDataReader,System.Int32,System.Byte)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToByteN(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为SByte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.IDataReader,System.Int32,System.SByte)">
            <summary>
            获取位于指定索引处的列的值并转换为SByte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为SByte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByte(System.Data.IDataReader,System.String,System.SByte)">
            <summary>
            获取位于指定名称的列的值并转换为SByte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.IDataReader,System.Int32,System.SByte)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSByteN(System.Data.IDataReader,System.String,System.SByte)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.IDataReader,System.Int32,System.Int16)">
            <summary>
            获取位于指定索引处的列的值并转换为Int16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            获取位于指定名称的列的值并转换为Int16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.IDataReader,System.Int32,System.Int16)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt16N(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.IDataReader,System.Int32,System.UInt16)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16(System.Data.IDataReader,System.String,System.UInt16)">
            <summary>
            获取位于指定名称的列的值并转换为UInt16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.IDataReader,System.Int32,System.UInt16)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt16
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt16N(System.Data.IDataReader,System.String,System.UInt16)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt16。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            获取位于指定名称的列的值并转换为Int32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.IDataReader,System.Int32,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt32N(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.IDataReader,System.Int32,System.UInt32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32(System.Data.IDataReader,System.String,System.UInt32)">
            <summary>
            获取位于指定名称的列的值并转换为UInt32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.IDataReader,System.Int32,System.UInt32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt32
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt32N(System.Data.IDataReader,System.String,System.UInt32)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt32。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Int64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.IDataReader,System.Int32,System.Int64)">
            <summary>
            获取位于指定索引处的列的值并转换为Int64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Int64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            获取位于指定名称的列的值并转换为Int64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.IDataReader,System.Int32,System.Int64)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Int64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToInt64N(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            获取位于指定名称的列的值并转换为可空Int64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.IDataReader,System.Int32,System.UInt64)">
            <summary>
            获取位于指定索引处的列的值并转换为UInt64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为UInt64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64(System.Data.IDataReader,System.String,System.UInt64)">
            <summary>
            获取位于指定名称的列的值并转换为UInt64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.IDataReader,System.Int32,System.UInt64)">
            <summary>
            获取位于指定索引处的列的值并转换为可空UInt64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt64
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToUInt64N(System.Data.IDataReader,System.String,System.UInt64)">
            <summary>
            获取位于指定名称的列的值并转换为可空UInt64。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Single
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.IDataReader,System.Int32,System.Single)">
            <summary>
            获取位于指定索引处的列的值并转换为Single。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Single
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingle(System.Data.IDataReader,System.String,System.Single)">
            <summary>
            获取位于指定名称的列的值并转换为Single。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Single
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.IDataReader,System.Int32,System.Single)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Single。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Single
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToSingleN(System.Data.IDataReader,System.String,System.Single)">
            <summary>
            获取位于指定名称的列的值并转换为可空Single。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Double
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.IDataReader,System.Int32,System.Double)">
            <summary>
            获取位于指定索引处的列的值并转换为Double。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Double
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            获取位于指定名称的列的值并转换为Double。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Double
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.IDataReader,System.Int32,System.Double)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Double。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Double
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDoubleN(System.Data.IDataReader,System.String,System.Double)">
            <summary>
            获取位于指定名称的列的值并转换为可空Double。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Decimal
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.IDataReader,System.Int32,System.Decimal)">
            <summary>
            获取位于指定索引处的列的值并转换为Decimal。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Decimal
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            获取位于指定名称的列的值并转换为Decimal。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Decimal
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.IDataReader,System.Int32,System.Decimal)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Decimal。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Decimal
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDecimalN(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            获取位于指定名称的列的值并转换为可空Decimal。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Char
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.IDataReader,System.Int32,System.Char)">
            <summary>
            获取位于指定索引处的列的值并转换为Char。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Char
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToChar(System.Data.IDataReader,System.String,System.Char)">
            <summary>
            获取位于指定名称的列的值并转换为Char。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Char
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.IDataReader,System.Int32,System.Char)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Char。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToCharN(System.Data.IDataReader,System.String,System.Char)">
            <summary>
            获取位于指定名称的列的值并转换为可空Byte。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Boolean
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.IDataReader,System.Int32,System.Boolean)">
            <summary>
            获取位于指定索引处的列的值并转换为Boolean。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Boolean
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            获取位于指定名称的列的值并转换为Boolean。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Boolean
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.IDataReader,System.Int32,System.Boolean)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Boolean。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Boolean
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBooleanN(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            获取位于指定名称的列的值并转换为可空Boolean。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.Int32,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.Int32,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.Int32,System.String,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTime(System.Data.IDataReader,System.String,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.Int32,System.String,System.DateTime)">
            <summary>
            获取位于指定索引处的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToDateTimeN(System.Data.IDataReader,System.String,System.String,System.DateTime)">
            <summary>
            获取位于指定名称的列的值并转换为可空DateTime。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">DateTime.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.Int32,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.Int32,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.Int32,System.String,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpan(System.Data.IDataReader,System.String,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.Int32,System.String)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.Int32,System.String,System.TimeSpan)">
            <summary>
            获取位于指定索引处的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToTimeSpanN(System.Data.IDataReader,System.String,System.String,System.TimeSpan)">
            <summary>
            获取位于指定名称的列的值并转换为可空TimeSpan。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="format">TimeSpan.ParseExact所用到的日期格式说明符，如：yyyy-MM-dd HH:mm:ss</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Guid
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.IDataReader,System.Int32,System.Guid)">
            <summary>
            获取位于指定索引处的列的值并转换为Guid。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Guid
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuid(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            获取位于指定名称的列的值并转换为Guid。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Guid
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.IDataReader,System.Int32,System.Guid)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Guid。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Guid
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToGuidN(System.Data.IDataReader,System.String,System.Guid)">
            <summary>
            获取位于指定名称的列的值并转换为可空Guid。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Byte[]
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.IDataReader,System.Int32,System.Byte[])">
            <summary>
            获取位于指定索引处的列的值并转换为Byte[]。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Byte[]
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToBytes(System.Data.IDataReader,System.String,System.Byte[])">
            <summary>
            获取位于指定名称的列的值并转换为Byte[]。如转换失败则使用默认值
            </summary>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为Enum
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为Enum
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnum``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.IDataReader,System.Int32)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Enum
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.IDataReader,System.Int32,``0)">
            <summary>
            获取位于指定索引处的列的值并转换为可空Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="i">要获取的列的从零开始的索引</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.IDataReader,System.String)">
            <summary>
            获取位于指定名称的列的值并转换为可空Enum
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbUtil.ToEnumN``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            获取位于指定名称的列的值并转换为可空Enum。如转换失败则使用默认值
            </summary>
            <typeparam name="T">可空枚举类型</typeparam>
            <param name="reader">IDataReader对象</param>
            <param name="name">要查找的列的名称</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DeadLockInfo">
            <summary>
            死锁信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.DeadLockDate">
            <summary>
            死锁时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.TransactionA">
            <summary>
            事务A语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.AWaitingFor">
            <summary>
            事务A等待的锁
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.TransactionB">
            <summary>
            事务B语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.BHoldsLock">
            <summary>
            事务B拥有的锁
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.BWaitingFor">
            <summary>
            事务B等待的锁
            </summary>
        </member>
        <member name="P:TinyFx.Data.DeadLockInfo.Status">
            <summary>
            原始信息
            </summary>
        </member>
        <member name="T:TinyFx.Data.Instrumentation.DefaultDataInstProvider">
            <summary>
            数据操作执行事件监测类
            除了TransactionUndisposedEvent外其他事件不处理
            </summary>
        </member>
        <member name="F:TinyFx.Data.Instrumentation.DefaultDataInstProvider.Instance">
            <summary>
            单例模式
            </summary>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.DefaultDataInstProvider.FireConnectionOpenedEvent(System.String)">
            <summary>
            执行ConnectionOpened事件
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.DefaultDataInstProvider.FireCommandExecutedEvent(TinyFx.Data.CommandWrapper,System.DateTime,System.DateTime)">
            <summary>
            执行CommandExecuted事件
            </summary>
            <param name="command">Command对象</param>
            <param name="startTime">执行起始时间</param>
            <param name="endTime">执行结束时间</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.DefaultDataInstProvider.FireConnectionFailedEvent(System.String,System.Exception)">
            <summary>
            执行ConnectionFailed事件
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.DefaultDataInstProvider.FireCommandFailedEvent(TinyFx.Data.CommandWrapper,System.Exception)">
            <summary>
            执行CommandFailed事件
            </summary>
            <param name="command">执行的Command对象</param>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.DefaultDataInstProvider.FireTransactionUndisposedEvent(System.Exception)">
            <summary>
            执行TransactionUndisposed事件,处理事务没有Commit或Rollback的情况
            </summary>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="T:TinyFx.Data.Instrumentation.IDataInstProvider">
            <summary>
            定义Database数据访问时的测量事件的接口
            </summary>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.IDataInstProvider.FireConnectionOpenedEvent(System.String)">
            <summary>
            执行ConnectionOpened事件
            </summary>
            <param name="connectionString">连接字符串</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.IDataInstProvider.FireConnectionFailedEvent(System.String,System.Exception)">
            <summary>
            执行ConnectionFailed事件
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.IDataInstProvider.FireCommandExecutedEvent(TinyFx.Data.CommandWrapper,System.DateTime,System.DateTime)">
            <summary>
            执行CommandExecuted事件
            </summary>
            <param name="command">执行的Command对象</param>
            <param name="startTime">执行起始时间</param>
            <param name="endTime">执行结束时间</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.IDataInstProvider.FireCommandFailedEvent(TinyFx.Data.CommandWrapper,System.Exception)">
            <summary>
            执行CommandFailed事件
            </summary>
            <param name="command">执行的Command对象</param>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="M:TinyFx.Data.Instrumentation.IDataInstProvider.FireTransactionUndisposedEvent(System.Exception)">
            <summary>
            执行TransactionUndisposed事件
            </summary>
            <param name="exception">执行失败时抛出的异常</param>
        </member>
        <member name="T:TinyFx.Data.TransactionManager">
            <summary>
            数据库事务管理类
            请显示调用Commit()或Rollback()释放资源
            </summary>
        </member>
        <member name="P:TinyFx.Data.TransactionManager.IsolationLevel">
            <summary>
            事务级别
            </summary>
        </member>
        <member name="M:TinyFx.Data.TransactionManager.#ctor(System.Data.IsolationLevel)">
            <summary>
            构造函数
            </summary>
            <param name="isolationLevel">事务级别，默认IsolationLevel.ReadCommitted</param>
        </member>
        <member name="M:TinyFx.Data.TransactionManager.GetTransaction(TinyFx.Data.Database)">
            <summary>
            根据连接字符串获取已存在或创建一个新的数据库事务
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.TransactionManager.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:TinyFx.Data.TransactionManager.Rollback">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:TinyFx.Data.TransactionManager.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:TinyFx.Data.DataMapping.DataColumnMapperAttribute">
            <summary>
            实体类的属性和数据库表字段进行映射的类，用于ExecuteReader(T)()方法反射实现ORM映射
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataMapping.DataColumnMapperAttribute.ColumnName">
            <summary>
            获取映射的数据库表字段名
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataMapping.DataColumnMapperAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="columnName">映射的数据库表字段名</param>
        </member>
        <member name="T:TinyFx.Data.DataMapping.DataMappingUtil">
            <summary>
            数据映射辅助类。Entity 与 DataReader/DataTable 互转
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataMapping.DataMappingUtil.GetRowMapper``1(TinyFx.Data.DataMappingMode)">
            <summary>
            获取 IDataReader ==> Entity 的映射方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataMapping.DataMappingUtil.GetEntityMapper``1(TinyFx.Data.DataMappingMode)">
            <summary>
            获取 Entity ==> DataRow 的映射方法
            TODO: 应增加接口，Attribute的映射实现
            </summary>
            <typeparam name="T"></typeparam>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DataMapping.EntityToDataRowMapping">
            <summary>
            实现 Entity ==> DataRow 的映射类，忽略大小写
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataMapping.EntityToDataRowMapping.GetEntityMapper``1">
            <summary>
            获得实体类T到DataRow的映射方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DataMapping.EntityToDataRowMapperBuilder.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TinyFx.Data.DataMapping.EntityToDataRowMapperBuilder.SetValues``1(System.Data.DataRow,``0)">
            <summary>
            设置DataRow值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <param name="item"></param>
        </member>
        <member name="T:TinyFx.Data.DataMapping.InterfaceDataMapping">
            <summary>
            通过 IRowMapper 接口定义实现 IDataReader ==> Entity 的映射类
            </summary>
        </member>
        <member name="M:TinyFx.Data.DataMapping.InterfaceDataMapping.GetRowMapper``1">
            <summary>
            获取IDataReader映射到实体类的构建方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DataMapping.ReflectionDataMapping">
            <summary>
            通过反射实现 IDataReader ==> Entity 的映射类
            如果定义了DataColumnMapperAttribute则使用，否则按照属性名称和数据字段名映射
            </summary>
        </member>
        <member name="T:TinyFx.Data.DataMapping.ReflectionMapperBuilder.PropertySetter">
            <summary>
            属性设置类
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataMapping.ReflectionMapperBuilder.PropertySetter.Handler">
            <summary>
            属性设置方法
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataMapping.ReflectionMapperBuilder.PropertySetter.Type">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.DataMapping.ReflectionMapperBuilder.PropertySetter.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="T:TinyFx.Data.DataMappingMode">
            <summary>
            数据与实体对象映射方式
            </summary>
        </member>
        <member name="F:TinyFx.Data.DataMappingMode.Interface">
            <summary>
            实体对象继承接口实现数据映射
            </summary>
        </member>
        <member name="F:TinyFx.Data.DataMappingMode.Attribute">
            <summary>
            实体对象通过定义DataColumnMapperAttribute实现映射
            </summary>
        </member>
        <member name="F:TinyFx.Data.DataMappingMode.Reflection">
            <summary>
            实体对象通过反射属性名实现映射
            </summary>
        </member>
        <member name="F:TinyFx.Data.DataMappingMode.PrimitiveType">
            <summary>
            映射成基元类型，只支持单列映射
            </summary>
        </member>
        <member name="T:TinyFx.Data.IRowMapper`1">
            <summary>
            提供 IDataReader ==> Entity 映射接口
            </summary>
        </member>
        <member name="M:TinyFx.Data.IRowMapper`1.MapRow(System.Data.IDataReader)">
            <summary>
            IDataReader到类型的映射方法
            </summary>
            <param name="reader">IDataReader对象</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.DbConfigManager">
            <summary>
            tinyfx.config中的数据库配置信息
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.ReloadConfig">
            <summary>
            重新加载配置数据
            </summary>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.ExistConnectionStringName(System.String)">
            <summary>
            判断是否存在指定名称的ConnectionStringName
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.GetConnectionStringConfig(System.String)">
            <summary>
            根据配置文件中数据库连接字符串名称获得ConnectionStringConfig
            </summary>
            <param name="connectionStringName">数据库连接字符串名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.GetConnectionStringConfig(TinyFx.Data.DbDataProvider,System.String,System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            获得ConnectionStringConfig
            </summary>
            <param name="provider"></param>
            <param name="connectionString"></param>
            <param name="readConnectionString"></param>
            <param name="commandTimeout"></param>
            <param name="inst"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.TryGetConnectionStringConfig(System.String,TinyFx.Data.DbDataProvider,TinyFx.Data.ConnectionStringConfig@)">
            <summary>
            尝试获取连接配置信息
            </summary>
            <param name="connectionStringName"></param>
            <param name="provider"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.DbConfigManager.GetOrmConnectionStringConfig(System.String)">
            <summary>
            根据命名空间获取配置信息
            </summary>
            <param name="ns"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlBulk.GetCurrentMaxAllowedPacket">
            <summary>
            获取当前MySQL的
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlBulk.GetCurrentLogBuffeSize">
            <summary>
            获取日志缓存大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlBulk.FilterColumns(System.String[])">
            <summary>
            过滤指定的列
            </summary>
            <param name="columnNames"></param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlBulk.Load(System.Data.DataTable,System.String)">
            <summary>
            批量插入数据
            </summary>
            <param name="table"></param>
            <param name="tableName"></param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlBulkCopy">
            <summary>
            MySqlBulkLoader扩展
            </summary>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlSqlDao">
            <summary>
            MySql数据库SQL语句操作类
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSqlDao.#ctor(System.String,TinyFx.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="database">数据库访问对象</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSqlDao.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSqlDao.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="connectionStringName">数据库连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSqlDao.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">Timeout时间</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlProcDao">
            <summary>
            MySQL的Dao基类
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcDao.#ctor(System.String,TinyFx.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="database">数据库访问对象</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcDao.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcDao.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="connectionStringName">数据库连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcDao.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">commandTimeout</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlDatabase">
            <summary>
            表示一个MySQL数据库操作对象，需要数据提供程序MySQL Connector Net（mysql.data.dll），参数以@开头
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.#ctor(TinyFx.Data.ConnectionStringConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置信息</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionStringName">配置文件中的 connectionStringName， 如果长度超过50则默认理解为connectionString</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.#ctor(System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.#ctor(System.String,System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="readConnectionString">只读数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetParameterName(System.String)">
            <summary>
            获得符合数据库提供者的参数名称
            </summary>
            <param name="parameterName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetConnectionStringInfo(System.String)">
            <summary>
            获取连接字符串信息
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetSqlDao(System.String)">
            <summary>
            获得Dao
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetProcDao(System.String)">
            <summary>
            获得Dao
            </summary>
            <param name="proc"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetPager(System.String,System.Int32,System.String)">
            <summary>
            获得IDataPager分页对象
            </summary>
            <param name="sql"></param>
            <param name="pageSize"></param>
            <param name="keyField"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetVariable``1(TinyFx.Data.MySqlClient.MySqlVariableNames)">
            <summary>
            获得MySQL环境变量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="variableName">环境变量名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetVariables">
            <summary>
            获得MySQL环境变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDatabase.GetDeadLockInfo">
            <summary>
            获取数据库死锁信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlDataPager">
            <summary>
            MySql分页类
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlDataPager.AddInParameter(System.String,System.Object,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            添加分页SQL语句中定义的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlVariableNames">
            <summary>
            MySQL环境变量项
            SHOW VARIABLES显示的Variable_name
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlVariableNames.max_allowed_packet">
            <summary>
            MySQL最大接受的数据包大小， 默认4M
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlVariableNames.innodb_log_buffer_size">
            <summary>
            日志缓存大小，默认4M
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlOrmProvider.GetDbTypeMappings(TinyFx.Data.MySqlClient.MySqlDatabase,System.String,TinyFx.Data.ORM.DbObjectType)">
            <summary>
            获取表或试图列参数名对应的MySqlDbType集合
            </summary>
            <param name="database"></param>
            <param name="sourceName"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlProcMO">
            <summary>
            MySql 存储过程MO
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcMO.#ctor(TinyFx.Data.MySqlClient.MySqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcMO.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlProcMO.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlTableMO`1">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTableMO`1.#ctor(TinyFx.Data.MySqlClient.MySqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTableMO`1.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTableMO`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlViewMO`1">
            <summary>
            MySQL 视图操作类MO基类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlViewMO`1.#ctor(TinyFx.Data.MySqlClient.MySqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlViewMO`1.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlViewMO`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlEngineType">
            <summary>
            MySql 数据库引擎类型，将表字段类型转换成MySqlEngineType类型时不要生成_开头的类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Bit">
            <summary>
            BIT[(M)] 存储位字段值序列，M-Range(1-64)，如 b'111'就等于数值7 空间=(M+7)/8 byte
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Bool">
            <summary>
            TINYINT(1) 获取表库字段类型时将TINYINT(1)转换成bool
            1代表TRUE,0代表FALSE
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Boolean">
            <summary>
            同Bool
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.TinyInt">
            <summary>
            TINYINT[(M)] [UNSIGNED] [ZEROFILL] 1byte (-128,127)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.TinyInt_Unsigned">
            <summary>
            (0,255)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.SmallInt">
            <summary>
            SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 2byte (-32 768，32 767)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.SmallInt_Unsigned">
            <summary>
            (0，65 535)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.MediumInt">
            <summary>
            MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL] 3byte (-8 388 608，8 388 607)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.MediumInt_Unsigned">
            <summary>
            (0，16777215)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Int">
            <summary>
            INT[(M)] [UNSIGNED] [ZEROFILL] (-2 147 483 648，2 147 483 647)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Int_Unsigned">
            <summary>
            (0，4 294 967 295) 
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Integer">
            <summary>
            同Int
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.BigInt">
            <summary>
            BIGINT[(M)] [UNSIGNED] [ZEROFILL] 8byte (-9223372036854775808，9 223 372 036 854 775 807) 
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.BigInt_Unsigned">
            <summary>
            (0，18446744073709551615) 
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Decimal">
            <summary>
            DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 
            M(0,65)默认10，D(0,30)默认0，
            存储空间:每9位长度则需要4byte存储,比如：DECIMAL(20,6)小数点左侧14位中9位需要4byte+5位需要3byte+小数6位需要3byte=10byte
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Numeric">
            <summary>
            同Decimal
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Dec">
            <summary>
            同Decimal
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Fixed">
            <summary>
            同Decimal
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Float">
            <summary>
            FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] 4byte 精度最多7
            如果不指定M,D，则按实际精度保存，如果指定则四舍五入保存
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Double">
            <summary>
            DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL] 8byte 精度最多15
            如果不指定M,D，则按实际精度保存，如果指定则四舍五入保存
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Real">
            <summary>
            同Double 根据m,d确定float or double
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType._Double_Precision">
            <summary>
            同Double
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Year">
            <summary>
            1byte YEAR[(4)] 1901 to 2155 
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Date">
            <summary>
            3bytes '1000-01-01' to '9999-12-31'
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Time">
            <summary>
            3bytes TIME[(fsp)] '-838:59:59.000000' to '838:59:59.000000'
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Timestamp">
            <summary>
            4bytes TIMESTAMP[(fsp)] '1970-01-01 00:00:01.000000' UTC to '2038-01-19 03:14:07.999999' UTC
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.DateTime">
            <summary>
            8bytes DATETIME[(fsp)] '1000-01-01 00:00:00.000000' to '9999-12-31 23:59:59.999999' fsp取值0-6表示取毫秒位数
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Char">
            <summary>
            CHAR(M) M(0,255) M*w bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.VarChar">
            <summary>
            VARCHAR(M) M(0,65 535)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Binary">
            <summary>
            BINARY(M) M(0,255) Mbytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.VarBinary">
            <summary>
            VARBINARY(M) M(0, 65 535)
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.TinyText">
            <summary>
            最大长度 255bytes，建议VarChar替代
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Text">
            <summary>
            最大长度 65535bytes，建议VarChar替代
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.MediumText">
            <summary>
            最大长度 16777215bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.LongText">
            <summary>
            最大长度 4294967295bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.TinyBlob">
            <summary>
            最大长度 255bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Blob">
            <summary>
            最大长度 65535bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.MediumBlob">
            <summary>
            最大长度 16777215bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.LongBlob">
            <summary>
            最大长度 4294967295bytes
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Enum">
            <summary>
            1或2个字节，这取决于枚举值的数目（最多65,535的值）
            如： ENUM('A', 'B') 内部会存储成数值（NULL->NULL, ''->0, 'A'->1, 'B'->2）
            </summary>
        </member>
        <member name="F:TinyFx.Data.MySqlClient.MySqlEngineType.Set">
            <summary>
            1，2，3，4，或8个字节，这取决于组成员的数目（最多64个成员） 
            如：SET('one', 'two') NOT NULL 字段可以存''，'one'，'two'，'one,two'
            </summary>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlSchemaProvider">
            <summary>
            MySQL 数据库概要信息提供程序
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.#ctor(TinyFx.Data.MySqlClient.MySqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetDatabase">
            <summary>
            获取数据库的Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetTableNames">
            <summary>
            获取数据表集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetTables(TinyFx.Data.Schema.DatabaseSchema)">
            <summary>
            获取数据库中的所有表Schema
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetTable(System.String,TinyFx.Data.Schema.DatabaseSchema)">
            <summary>
            获取表的Schema
            </summary>
            <param name="tableName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetTableColumns(System.String,TinyFx.Data.Schema.TableSchema)">
            <summary>
            获取指定表的字段集合，表不存在返回null
            </summary>
            <param name="tableName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetTableColumn(System.String,System.String,TinyFx.Data.Schema.TableSchema)">
            <summary>
            获取指定列名的Schema，不存在返回null
            </summary>
            <param name="tableName"></param>
            <param name="columnName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetForeignKeys(System.String,TinyFx.Data.Schema.SchemaCollection{TinyFx.Data.Schema.ColumnSchema},TinyFx.Data.Schema.TableSchema)">
            <summary>
            获取MySQL数据表的外键信息，没有返回NULL
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetIndexes(System.String,TinyFx.Data.Schema.SchemaCollection{TinyFx.Data.Schema.ColumnSchema},TinyFx.Data.Schema.TableSchema)">
            <summary>
            获取MySQL数据表的索引
            </summary>
            <param name="tableName"></param>
            <param name="columns"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetViews(TinyFx.Data.Schema.DatabaseSchema)">
            <summary>
            获取数据库中所有视图Schema
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetView(System.String,TinyFx.Data.Schema.DatabaseSchema)">
            <summary>
            获取试图 Schema
            </summary>
            <param name="viewName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetViewColumns(System.String,TinyFx.Data.Schema.ViewSchema)">
            <summary>
            获取试图字段Schema集合
            </summary>
            <param name="viewName"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetViewColumn(System.String,System.String,TinyFx.Data.Schema.ViewSchema)">
            <summary>
            获取视图字段Schema
            </summary>
            <param name="viewName"></param>
            <param name="columnName"></param>
            <param name="partent"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetProcs(TinyFx.Data.Schema.DatabaseSchema)">
            <summary>
            获取MySQL数据库中所有存储过程Schema集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlSchemaProvider.GetProc(System.String)">
            <summary>
            获取存储过程Schema
            </summary>
            <param name="procName"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.MySqlClient.MySqlTypeMapper">
            <summary>
            MySql 数据库字段类型与.net类型转换
            engineTypeString => TEngineType => TDbType
                                            => DotNetType => NetTypeString
            </summary>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapEngineType(System.String,System.String)">
            <summary>
            根据 MySQL 数据库引擎原生类型推断MySqlEngineType
            </summary>
            <param name="engineTypeString">数据库字段类型字符串表示，如 tinyint</param>
            <param name="engineTypeFull">数据库字段字符串全描述，如 tinyint(1)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapDbType(TinyFx.Data.MySqlClient.MySqlEngineType)">
            <summary>
            根据 MySQL 数据库引擎类型推断MySqlDbType
            </summary>
            <param name="engineType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapDbType(System.String,System.String)">
            <summary>
            根据 MySQL 数据库引擎原生类型推断MySqlDbType
            </summary>
            <param name="engineTypeString"></param>
            <param name="engineTypeFull"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapDbType(System.Data.DbType)">
            <summary>
            根据 DbType 类型推断MySqlDbType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapSysDbType(MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            根据 MySqlDbType 类型推断 DbType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapDotNetType(TinyFx.Data.MySqlClient.MySqlEngineType)">
            <summary>
            根据 MySQL 数据库引擎类型推断ORM映射的.NET类型，依据可存下，尽量少类型，不考虑无符号类型
            </summary>
            <param name="engineType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.MySqlClient.MySqlTypeMapper.MapDotNetType(MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            根据MySqlDbType 类型推断.NET类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.ORM.DbEntityMO`4">
            <summary>
            Table and View MO基类
            </summary>
            <typeparam name="TDatabase"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TDbType"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetAll(TinyFx.Data.TransactionManager)">
            <summary>
            获取所有数据
            </summary>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            
            </summary>
            <param name="where"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.Get(System.String,System.Collections.Generic.IEnumerable{`1},TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32,System.ValueTuple{`2,System.Object}[])">
            <summary>
            
            </summary>
            <param name="where"></param>
            <param name="top"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Collections.Generic.IEnumerable{`1},System.Int32)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "top">获取行数</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Int32,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name="where"></param>
            <param name="top"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTop(System.String,System.Collections.Generic.IEnumerable{`1},System.Int32,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "top">获取行数</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "sort">排序表达式</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "sort">排序表达式</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name="where"></param>
            <param name="sort"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.Collections.Generic.IEnumerable{`1},System.String)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "sort">排序表达式</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name="where"></param>
            <param name="sort"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSort(System.String,System.Collections.Generic.IEnumerable{`1},System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name="where"></param>
            <param name="top"></param>
            <param name="sort"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Collections.Generic.IEnumerable{`1},System.Int32,System.String)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Collections.Generic.IEnumerable{`1},System.Int32,System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name = "top">获取行数</param>
            <param name = "sort">排序表达式</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象集合</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetTopSort(System.String,System.Int32,System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询
            </summary>
            <param name="where"></param>
            <param name="top"></param>
            <param name="sort"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String)">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,System.Object[])">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name="where">自定义条件,where子句</param>
            <param name="parameters">where子句中定义的参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,System.Collections.Generic.IEnumerable{`1},TinyFx.Data.TransactionManager)">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name="tm">事务管理对象</param>
            <return>实体对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetSingle(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按自定义条件查询，返回唯一一条记录
            </summary>
            <param name="where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <param name="parameters">where子句中定义的参数集合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(TinyFx.Data.TransactionManager)">
            <summary>
            获取记录数
            </summary>
            <param name="tm">事务管理对象</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String)">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,System.Object[])">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            获取记录数
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            获取记录数
            </summary>
            <param name="where"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetCount(System.String,System.Collections.Generic.IEnumerable{`1},TinyFx.Data.TransactionManager)">
            <summary>
            获取记录数
            </summary>
            <param name = "where">自定义条件,where子句</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <param name="tm">事务管理对象</param>
            <return>数据个数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.GetPager(System.Int32,System.String,System.String)">
            <summary>
            获取分页操作对象
            </summary>
            <param name = "pageSize">页大小</param>
            <param name = "where">自定义条件,where子句</param>
            <param name = "sort">排序表达式</param>
            <return>分页操作对象</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbEntityMO`4.BuildSelectSQL(System.String,System.Int32,System.String)">
            <summary>
            获取SelectSQL
            </summary>
            <param name="where"></param>
            <param name="top"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.ORM.DbMOBase`3">
            <summary>
            数据库MO基类
                DbMOBase => DbObjectMO => DbTableMO/DbViewMO => XXTableMO/XXViewMO
                         => DbProcMO => XXProcMO
            </summary>
        </member>
        <member name="M:TinyFx.Data.ORM.DbMOBase`3.Init(System.String,System.Func{TinyFx.Data.ConnectionStringConfig,`0})">
            <summary>
            当前对象初始化
            </summary>
            <param name="connectionStringName"></param>
            <param name="builder"></param>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.Database">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.Provider">
            <summary> 
            数据提供程序类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.OrmProvider">
            <summary>
            特定数据库的ORM提供
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.SourceType">
            <summary>
            数据对象类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.SourceName">
            <summary>
            数据对象名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbMOBase`3.CommandTimeout">
            <summary>
            执行SQL时Timeout时间
            </summary>
        </member>
        <member name="T:TinyFx.Data.ORM.DbObjectType">
            <summary>
            数据库对象类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.ORM.DbObjectType.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="F:TinyFx.Data.ORM.DbObjectType.View">
            <summary>
            视图
            </summary>
        </member>
        <member name="F:TinyFx.Data.ORM.DbObjectType.Proc">
            <summary>
            存储过程
            </summary>
        </member>
        <member name="T:TinyFx.Data.ORM.DbProcMO`3">
            <summary>
            存储过程MO基类
            </summary>
            <typeparam name="TDatabase"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TDbType"></typeparam>
        </member>
        <member name="P:TinyFx.Data.ORM.DbProcMO`3.SourceType">
            <summary>
            数据对象类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbProcMO`3.SourceName">
            <summary>
            数据库对象名 = 存储过程名
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbProcMO`3.ProcName">
            <summary>
            存储过程名
            </summary>
        </member>
        <member name="T:TinyFx.Data.ORM.DbTableMO`4">
            <summary>
            数据表MO基类
            </summary>
            <typeparam name="TDatabase"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TDbType"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:TinyFx.Data.ORM.DbTableMO`4.SourceType">
            <summary>
            数据对象类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbTableMO`4.SourceName">
            <summary>
            数据对象源名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbTableMO`4.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Add(`3,TinyFx.Data.TransactionManager)">
            <summary>
            添加实体对象
            </summary>
            <param name="item"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Add(System.Collections.Generic.IEnumerable{`3},TinyFx.Data.TransactionManager)">
            <summary>
            插入一组数据
            </summary>
            <param name = "items">要插入的实体对象集合</param>
            <param name="tm">事务管理对象</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Truncate">
            <summary>
            TRUNCATE全部数据
            </summary>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.RemoveAll(TinyFx.Data.TransactionManager)">
            <summary>
            删除全部数据
            </summary>
            <param name="tm">事务管理对象</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String)">
            <summary>
            删除指定条件的数据
            </summary>
            <param name = "where">自定义删除条件，where子句。如：id=1 and name='aaa'</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,System.Object[])">
            <summary>
            删除指定条件的数据
            </summary>
            <param name = "where">自定义删除条件，where子句。如：id=1 and name='aaa'</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            删除指定条件的数据
            </summary>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            删除指定条件的数据
            </summary>
            <param name = "where">自定义删除条件，where子句。如：id=1 and name='aaa'</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,TinyFx.Data.TransactionManager)">
            <summary>
            删除指定条件的数据
            </summary>
            <param name="where"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            删除指定条件的数据
            </summary>
            <param name = "where">自定义删除条件，where子句。如：id=1 and name='aaa'</param>
            <param name="tm">事务管理对象</param>
            <param name = "values">where子句中定义的参数值集合</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            删除指定条件的数据
            </summary>
            <param name="where"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Remove(System.String,System.Collections.Generic.IEnumerable{`1},TinyFx.Data.TransactionManager)">
            <summary>
            删除指定条件的数据
            </summary>
            <param name = "where">自定义删除条件，where子句。如：id=1 and name='aaa'</param>
            <param name="tm">事务管理对象</param>
            <param name = "paras">where子句中定义的参数集合</param>
            <return>受影响的行数</return>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,System.Collections.Generic.IEnumerable{`1},TinyFx.Data.TransactionManager)">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set">更新列数据</param>
            <param name="where">更新条件</param>
            <param name="paras">参数值</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String)">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set">更新列数据</param>
            <param name="where">更新条件</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,System.Object[])">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set">更新列数据</param>
            <param name="where">更新条件</param>
            <param name="values">参数值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set"></param>
            <param name="where"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,TinyFx.Data.TransactionManager)">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set"></param>
            <param name="where"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,TinyFx.Data.TransactionManager,System.Object[])">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set">更新列数据</param>
            <param name="where">更新条件</param>
            <param name="tm">事务对象</param>
            <param name="values">参数值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.DbTableMO`4.Put(System.String,System.String,TinyFx.Data.TransactionManager,System.ValueTuple{`2,System.Object}[])">
            <summary>
            按条件和指定列更新表数据
            </summary>
            <param name="set"></param>
            <param name="where"></param>
            <param name="tm"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.ORM.DbViewMO`4">
            <summary>
            视图MO基类
            </summary>
            <typeparam name="TDatabase"></typeparam>
            <typeparam name="TParameter"></typeparam>
            <typeparam name="TDbType"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:TinyFx.Data.ORM.DbViewMO`4.SourceType">
            <summary>
            数据对象类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbViewMO`4.SourceName">
            <summary>
            数据对象源名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.ORM.DbViewMO`4.ViewName">
            <summary>
            视图名
            </summary>
        </member>
        <member name="T:TinyFx.Data.ORM.IDbOrmProvider`3">
            <summary>
            特定数据库的ORM数据提供接口，需要每个特定数据库实现
            </summary>
        </member>
        <member name="M:TinyFx.Data.ORM.IDbOrmProvider`3.BuildSelectSQL(System.String,System.String,System.Int32,System.String)">
            <summary>
            根据参数获取Select SQL语句
            </summary>
            <param name="sourceName"></param>
            <param name="where"></param>
            <param name="top"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.IDbOrmProvider`3.GetDbTypeMappings(`0,System.String,TinyFx.Data.ORM.DbObjectType)">
            <summary>
            获取参数名称（字段对应的参数名）与Command参数类型的映射
                key: @UserID value: MySqlDbType.VarChar
            </summary>
            <param name="database"></param>
            <param name="sourceName"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.ORM.OrmUtil">
            <summary>
            ORM辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Data.ORM.OrmUtil.SerializeIDS(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            JSON序列化主键集合
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.ORM.OrmUtil.DeserializeIDS(System.String)">
            <summary>
            反序列化主键集合JSON
            </summary>
            <param name="jsonIds"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.DbDataProvider">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.ParentName">
            <summary>
            字段所在对象名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Parent">
            <summary>
            字段所在的对象, 可能是Table或者View
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.ColumnName">
            <summary>
            表中原始字段名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Ordinal">
            <summary>
            字段在表中所有列的排列位置
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Comment">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.EngineTypeString">
            <summary>
            字段原始数据类型，字符串类型，如：tinyint
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.EngineTypeStringFull">
            <summary>
            字段原始数据类型，字符串类型，如：tinyint(3) unsigned
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsNumeric">
            <summary>
            是否是数值类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Length">
            <summary>
            字段数值精度或字符串以字符为单位的最大长度，如char(4),float(length, precision)
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Precision">
            <summary>
            字段数值小数位数或字符串以字节为单位的最大长度
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.AllowDBNull">
            <summary>
            是否允许NULL
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsUnsigned">
            <summary>
            是否是有符号unsigned字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.HasDefaultValue">
            <summary>
            是否有默认值
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.ColumnKey">
            <summary>
            列主键定义，如：PRI
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.Extra">
            <summary>
            扩展，如：auto_increment
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsAutoIncrement">
            <summary>
            是否是auto_increment字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsPrimaryKey">
            <summary>
            是否是主键，注意其可能是联合主键中的一个字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsSinglePKColumn">
            <summary>
            是否是单一主键字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsUniqueColumn">
            <summary>
            是否属于唯一索引中的字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsSingleUniqueColumn">
            <summary>
            是否是单一唯一索引字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsForeignKey">
            <summary>
            是否是ForeignKey字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.IsSingleFKColumn">
            <summary>
            是否唯一外键字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.SqlColumnName">
            <summary>
            在SQL语句中字段的写法，如：'UserID' 或 [UserID]
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.SqlParamName">
            <summary>
            在SQL语句中的参数写法，如：@UserID 或 ?UserID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmPropertyName">
            <summary>
            属性名称，第一个字母大写: UserID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmParamName">
            <summary>
            方法参数名称，第一个字母小写: userID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmReaderMethodName">
            <summary>
            获取DataReader读取值时使用的语句: ToBytesN
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmColumnTypeString">
            <summary>
            字段类型描述: 主键,外键,字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmParamValueToDbCode">
            <summary>
            获取通过参数存入数据库时取值信息：userID != null ? userID : (object)DBNull.Value
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmParamValue">
            <summary>
            userID userID.Value
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmItemValueToDbCode">
            <summary>
            获取对象存入数据库时取值信息: item.UserID.HasValue ? item.Value : (object)DBNull.Value
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema.OrmDefaultValueString">
            <summary>
            获取默认值得代码表示: DataTime.Now
            </summary>
        </member>
        <member name="M:TinyFx.Data.Schema.ColumnSchema.CompareTo(TinyFx.Data.Schema.ColumnSchema)">
            <summary>
            比较器，用于在集合中排序
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Schema.ColumnSchema`2">
            <summary>
            字段概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.EngineType">
            <summary>
            MySQL字段原始数据类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.DbType">
            <summary>
            通过MySQL字段原始类型推断的 MySqlDbType 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.DbTypeString">
            <summary>
            MySqlDbType 的字符串表示：MySqlDbTypeAll
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.SysDbType">
            <summary>
            通过MySQL字段原始类型推断的 DbType 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.DotNetType">
            <summary>
            通过MySQL字段原始类型推断的 .NET 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.DotNetTypeString">
            <summary>
            .NET类型字符串表示，支持可空类型，如int?
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ColumnSchema`2.OrmDefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.ColumnSelectMode">
            <summary>
            字段过滤模式
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.NoAutoIncrement">
            <summary>
            不包含自增字段
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.NoOnePK">
            <summary>
            不包含单一主键
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.NoOneUnique">
            <summary>
            不包含单一主键和单一唯一键
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.NoPK">
            <summary>
            不包含主键 // RemovePK
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ColumnSelectMode.CanInsertAndUpdate">
            <summary>
            可以添加和更新，不包括自增字段和timespane字段 
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.DatabaseSchema">
            <summary>
            数据库的概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.DatabaseName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.ConnectionStringInfo">
            <summary>
            数据库连接字符串信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.DataSource">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.DbDataProvider">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.DatabaseSchema.Tables">
            <summary>
            表集合
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.DatabaseSchema.Views">
            <summary>
            视图集合
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.DatabaseSchema.Procs">
            <summary>
            存储过程集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.DefaultCharSetName">
            <summary>
            默认字符集
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DatabaseSchema.DefaultCollationName">
            <summary>
            默认排序规则
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.DatabaseName">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.DbDataProvider">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.Database">
            <summary>
            所属Database
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.SourceName">
            <summary>
            表名或视图名 User
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.SqlSourceName">
            <summary>
            SQL语句中Table名或View名的表示，如：`User` 或 [User]
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DBObjectSchemaBase.Comment">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.DbDataProvider">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.ParentName">
            <summary>
            所在对象名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.Parent">
            <summary>
            字段所在的对象，存储过程
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.Ordinal">
            <summary>
            字段在表中所有列的排列位置 ORDINAL_POSITION
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.Direction">
            <summary>
            参数类型 PARAMETER_MODE IN OUT INOUT
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.ParameterName">
            <summary>
            参数名称 PARAMETER_NAME
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.EngineTypeString">
            <summary>
            字段原始数据类型，字符串类型，DATA_TYPE 如：tinyint
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.EngineTypeStringFull">
            <summary>
            字段原始数据类型，字符串类型，DTD_IDENTIFIER 如：tinyint(3) unsigned
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.Length">
            <summary>
            字段数值精度或字符串以字符为单位的最大长度，如char(4),float(length, precision)
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.Precision">
            <summary>
            字段数值小数位数或字符串以字节为单位的最大长度
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.DotNetType">
            <summary>
            通过MySQL字段原始类型推断的 .NET 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.OrmPropertyName">
            <summary>
            属性名称，第一个字母大写: UserID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.OrmParamName">
            <summary>
            方法参数名称，第一个字母小写: userID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.SqlParamName">
            <summary>
            在SQL语句中的参数写法，如：@UserID 或 ?UserID
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.OrmParamValueToDbCode">
            <summary>
            获取通过参数存入数据库时取值信息：userID != null ? userID : (object)DBNull.Value
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.SysDbType">
            <summary>
            通过MySQL字段原始类型推断的 DbType 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema.DotNetTypeString">
            <summary>
            .NET类型字符串表示，支持可空类型，如int?
            </summary>
        </member>
        <member name="M:TinyFx.Data.Schema.DbParameterSchema.CompareTo(TinyFx.Data.Schema.ColumnSchema)">
            <summary>
            比较器，用于在集合中排序
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Schema.DbParameterSchema`2">
            <summary>
            字段概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.EngineType">
            <summary>
            MySQL字段原始数据类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.DbType">
            <summary>
            通过MySQL字段原始类型推断的 MySqlDbType 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.DbTypeString">
            <summary>
            MySqlDbType 的字符串表示：MySqlDbTypeAll
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.SysDbType">
            <summary>
            通过MySQL字段原始类型推断的 DbType 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.DotNetType">
            <summary>
            通过MySQL字段原始类型推断的 .NET 类型
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.DbParameterSchema`2.DotNetTypeString">
            <summary>
            .NET类型字符串表示，支持可空类型，如int?
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.ForeignKeySchema">
            <summary>
            表的外键概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ForeignKeySchema.ForeignKeyName">
            <summary>
            外键名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ForeignKeySchema.ReferenceTableName">
            <summary>
            外键关联的主表名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ForeignKeySchema.ReferenceTable">
            <summary>
            外键关联的主表
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ForeignKeySchema.ReferenceColumns">
            <summary>
            外键关联的主表的字段集合
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.IDbTypeMapper`2">
            <summary>
            数据库字段类型与.net类型转换
            engineTypeString(+engineTypeFull) => TEngineType => TDbType
                                            => DotNetType => NetTypeString
            </summary>
            <typeparam name="TEngineType"></typeparam>
            <typeparam name="TDbType"></typeparam>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapEngineType(System.String,System.String)">
            <summary>
            映射数据库字段类型枚举表示。如：tinyint(1) => MySqlEngineType.Bool
            </summary>
            <param name="engineTypeString">数据库字段类型字符串表示，如 tinyint</param>
            <param name="engineTypeFull">数据库字段字符串全描述，如 tinyint(1)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapDbType(`0)">
            <summary>
            映射数据库类型到DbType。如：MySqlEngineType.Int => MySqlDbType.Int32
            </summary>
            <param name="engineType">数据库类型枚举表示</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapDbType(System.String,System.String)">
            <summary>
            映射数据库类型到DbType。
            </summary>
            <param name="engineTypeString">数据库字段类型字符串表示，如 tinyint</param>
            <param name="engineTypeFull">数据库字段字符串全描述，如 tinyint(1)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapDbType(System.Data.DbType)">
            <summary>
            映射系统DbType到数据库DbType。如：DbType.Single => MySqlDbType.Float
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapSysDbType(`1)">
            <summary>
            映射数据库DbType到系统DbType。如：MySqlDbType.Float => DbType.Single
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapDotNetType(`0)">
            <summary>
            根据数据库引擎类型推断ORM映射的.NET类型，依据可存下，尽量少类型，不考虑无符号类型
            </summary>
            <param name="engineType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.IDbTypeMapper`2.MapDotNetType(`1)">
            <summary>
            根据MySqlDbType 类型推断.NET类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Schema.IndexSchema">
            <summary>
            MySQL表的索引概要信息，不包含主键索引和外键索引
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.IndexSchema.IndexName">
            <summary>
            索引名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.IndexSchema.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.IndexSchema.IsClustered">
            <summary>
            MySQL的聚集索引是通过主键判断的，如果没有则自动选不重复列，还没有自己建隐藏的字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.IndexSchema.IsUnique">
            <summary>
            是否唯一
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.PrimaryKeySchema">
            <summary>
            MySQL表的主键概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.PrimaryKeySchema.IsClustered">
            <summary>
            是否聚集，注意MySQL是使用主键或使用唯一的非空索引或定义隐藏的主键进行聚集，所以MySQL中主键必然聚集
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.ProcSchema">
            <summary>
            存储过程Schema
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.ProcName">
            <summary>
            存储过程名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.SqlProcName">
            <summary>
            SQL语句中使用的名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.Definition">
            <summary>
            ROUTINE_DEFINITION
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.IsDeterministic">
            <summary>
            IS_DETERMINISTIC
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.CreateTime">
            <summary>
            创建时间 CREATED
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.UpdateTime">
            <summary>
            LAST_ALTERED
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.CharSetName">
            <summary> 
            默认字符集 CHARACTER_SET_CLIENT
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.CollationName">
            <summary>
            排序规则 COLLATION_CONNECTION
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.ProcSchema.Parameters">
            <summary>
            存储过程参数集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.HasInputParameter">
            <summary>
            是否有输入参数
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.HasOutputParameter">
            <summary>
            是否有输出参数
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.InputParameters">
            <summary>
            输入参数集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ProcSchema.OutputParameters">
            <summary>
            输出参数集合
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.ISchemaCollectionKey">
            <summary>
            定义Schema在集合SchemaColletion时的主键字段
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.SchemaUtil">
            <summary>
            Schema辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.GetSqlName(TinyFx.Data.DbDataProvider,System.String)">
            <summary>
            获取数据库对象在SQL语句中使用的格式，如MySQL：`User` SQL Server： [User]
            </summary>
            <param name="provider"></param>
            <param name="sourceName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.GetSqlParamName(TinyFx.Data.DbDataProvider,System.String)">
            <summary>
            获取数据库对象参数名称：如MySQL：@UserID
            </summary>
            <param name="provider"></param>
            <param name="sourceName"></param>s
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.InferDotNetTypeString(System.Type,System.Boolean)">
            <summary>
            根据DotNet类型转换成代码字符串 Boolean => bool?
            </summary>
            <param name="dotNetType"></param>
            <param name="allowDBNull"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.GetOrmReaderMethodName(System.String,System.Boolean)">
            <summary>
            根据类型字符串获取Reader时使用的取值方法。reader.ToString("UserID")
            </summary>
            <param name="dotNetTypeString"></param>
            <param name="allowDBNull"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.GetOrmParamValueToDbCode(System.String,System.Boolean,System.String)">
            <summary>
            获取ORM使用的参数赋值DotNet代码。如：dao.AddInParameter("@UserName", userName != null ? userName : (object)DBNull.Value)
            </summary>
            <param name="ormParamName"></param>
            <param name="allowDBNull"></param>
            <param name="dotNetTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.GetOrmItemValueToDbCode(System.String,System.Boolean,System.String)">
            <summary>
            获取ORM使用的参数赋值DotNet代码。如：dao.AddInParameter("@UserName", Item.UserName.HasValue ? Item.UserName.Value : (object)DBNull.Value)
            </summary>
            <param name="ormPropertyName"></param>
            <param name="allowDBNull"></param>
            <param name="dotNetTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.Schema.SchemaUtil.ParseDefaultValueString(TinyFx.Data.DbDataProvider,System.String,System.String)">
            <summary>
            获取字段DefaultValue的DotNet代码表示
            </summary>
            <param name="provider"></param>
            <param name="dotNetTypeString"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.Schema.TableObjectSchemaBase">
            <summary>
            表的所属对象主键，外键，索引Schema父类
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableObjectSchemaBase.DbDataProvider">
            <summary>
            数据提供程序
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableObjectSchemaBase.TableName">
            <summary>
            所在表名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableObjectSchemaBase.Table">
            <summary>
            主键所在的表
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.TableObjectSchemaBase.Columns">
            <summary>
            包含的字段集合
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.TableSchema">
            <summary>
            MySQL表的概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.SqlTableName">
            <summary>
            SQL语句中使用的名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.TableSchema.ForeignKeys">
            <summary>
            外键集合
            </summary>
        </member>
        <member name="F:TinyFx.Data.Schema.TableSchema.Indexes">
            <summary>
            索引集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.HasPrimaryKey">
            <summary>
            是否有主键
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.HasForeignKey">
            <summary>
            是否有外键
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.HasUniqueIndex">
            <summary>
            是否有唯一索引
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.UpdateTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.IndexLength">
            <summary>
            索引长度
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.TableRows">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.AvgRowLength">
            <summary>
            平均行大小
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.DataLength">
            <summary>
            数据总大小
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.AutoIncrementValue">
            <summary>
            自增字段值，没有此字段返回-1
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.HasAutoIncrementColumn">
            <summary>
            表中是否存在自增字段
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableSchema.AutoIncrementColumn">
            <summary>
            获取表中的自增字段
            </summary>
        </member>
        <member name="M:TinyFx.Data.Schema.TableSchema.ColumnsFilter(TinyFx.Data.Schema.ColumnSelectMode)">
            <summary>
            字段集合过滤器，按照ColumnSelectMode设置进行
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="F:TinyFx.Data.Schema.TableViewSchemaBase.Columns">
            <summary>
            列集合
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.TableViewSchemaBase.CollationName">
            <summary>
            排序规则
            </summary>
        </member>
        <member name="T:TinyFx.Data.Schema.ViewSchema">
            <summary>
            试图的概要信息
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ViewSchema.ViewName">
            <summary>
            试图名
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ViewSchema.SqlViewName">
            <summary>
            SQL语句中使用的视图名称
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ViewSchema.Definition">
            <summary>
            视图的SQL查询语句
            </summary>
        </member>
        <member name="P:TinyFx.Data.Schema.ViewSchema.CharSetName">
            <summary>
            字符集
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcMO`1.#ctor(TinyFx.Data.SqlClient.SqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcMO`1.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcMO`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlTableMO`1.#ctor(TinyFx.Data.SqlClient.SqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlTableMO`1.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlTableMO`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlViewMO`1.#ctor(TinyFx.Data.SqlClient.SqlDatabase)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlViewMO`1.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">MySql数据库连接字符串，如server=192.168.1.1;database=testdb;uid=root;pwd=root</param>
            <param name="commandTimeout">Command的Timeout时间</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlViewMO`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name = "connectionStringName">连接字符串名称</param>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlServerEngineType">
            <summary>
            SQL Server 数据库引擎类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Char">
            <summary>
            固定长度的非 Unicode 字符串。最多 8,000 个字符
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.VarChar">
            <summary>
            可变长度的非 Unicode 字符串。最多 8,000 个字符。
            varchar(max) => 最多2GB字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Text">
            <summary>
            请改用varchar(max)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.NChar">
            <summary>
            固定长度的 Unicode 字符串。最多4000个字符
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.NVarchar">
            <summary>
            可变长度的 Unicode 字符串。最多4000个字符
            nvarchar(Max) => 最多2GB字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.NText">
            <summary>
            请改用nvarchar(max)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Bit">
            <summary>
            1、0 或 NULL 的 integer 数据类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.TinyInt">
            <summary>
            1字节整数。 0 到 255
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.SmallInt">
            <summary>
            2字节整数。-2^15 (-32,768) 到 2^15-1 (32,767)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Int">
            <summary>
            4字节整数。-2^31 (-2,147,483,648) 到 2^31-1 (2,147,483,647)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Bigint">
            <summary>
            8字节整数。-2^63 (-9,223,372,036,854,775,808) 到 2^63-1 (9,223,372,036,854,775,807)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Decimal">
            <summary>
            decimal(p[,s])固定精度(p)和小数位(s)的数值。范围为 - 10^38 +1 到 10^38 - 1
            精度(p)小于等于   存储字节
                9               5字节
                19              9字节
                28              13字节
                38              17字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Numeric">
            <summary>
            等同decimal
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.SmallMoney">
            <summary>
            货币数据类型4字节。-214,748.3648 到 214,748.3647
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Money">
            <summary>
            货币数据类型8字节。-922,337,203,685,477.5808 到 922337203685,477.5807
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Real">
            <summary>
            等同float(24)，4字节。-3.40E + 38 至 -1.18E - 38、0 以及 1.18E - 38 至 3.40E + 38
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Float">
            <summary>
            float(n)浮点数值,n默认53。-1.79E + 308 至 -2.23E - 308、0 以及 2.23E - 308 至 1.79E + 308
            n值        精度      存储大小
            1-24        7位       4字节
            25-53       15位      8字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Binary">
            <summary>
            固定长度的二进制数据。最多 8,000 字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.VarBinary">
            <summary>
            可变长度的二进制数据。最多 8,000 字节
            varbinary(Max) => 最多 2GB 字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Image">
            <summary>
            请改用varbinary(max)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Time">
            <summary>
            仅存储时间。精度为 100 纳秒
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.SmallDateTime">
            <summary>
            短日期时间，精度1分钟，4字节存储。
            范围：1900-01-01 至 2079-06-06
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Date">
            <summary>
            仅存储日期。0001-01-01 到 9999-12-31
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.DateTime">
            <summary>
            日期时间，8字节。
            1753-01-01 到 9999-12-31，精度为 3.33 毫秒
            建议使用DateTime2
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.DateTime2">
            <summary>
            datetime2 [(秒的小数部分精度)]。日期时间。
            日期范围：0001-01-01 到 9999-12-31
            时间范围：00:00:00 到 23:59:59.9999999
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.DateTimeOffset">
            <summary>
            与 datetime2 相同，外加时区偏移。8-10 bytes
            字符串文字格式：YYYY MM DD hh: mm: [.nnnnnnn] [{+ |-} hh: mm]
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.UniqueIdentifier">
            <summary>
            16 字节 GUID。36 个字符
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.RowVersion">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Timestamp">
            <summary>
            放弃使用，请改用rowversion
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.SQL_Variant">
            <summary>
            支持的各种数据类型的值,最大8,000 字节
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlServerEngineType.Xml">
            <summary>
            存储 XML 格式化数据。最多 2GB
            </summary>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlServerSchemaProvider">
            <summary>
            SQL Server 数据库概要信息提供程序
            </summary>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlServerTypeMapper">
            <summary>
            SQL Server 数据库引擎类型与.NET类型的映射辅助类
            engineTypeString(+engineTypeFull) => TEngineType => TDbType
                                            => DotNetType => NetTypeString
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapEngineType(System.String,System.String)">
            <summary>
            根据 MySQL 数据库引擎原生类型推断MySqlEngineType
            </summary>
            <param name="engineTypeString">数据库字段类型字符串表示，如 tinyint</param>
            <param name="engineTypeFull">数据库字段字符串全描述，如 tinyint(1)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapDbType(TinyFx.Data.SqlClient.SqlServerEngineType)">
            <summary>
            根据 MySQL 数据库引擎类型推断MySqlDbType
            </summary>
            <param name="engineType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapDbType(System.String,System.String)">
            <summary>
            根据 MySQL 数据库引擎原生类型推断MySqlDbType
            </summary>
            <param name="engineTypeString"></param>
            <param name="engineTypeFull"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapDbType(System.Data.DbType)">
            <summary>
            根据 DbType 类型推断MySqlDbType
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapDotNetType(TinyFx.Data.SqlClient.SqlServerEngineType)">
            <summary>
            根据 MySQL 数据库引擎类型推断ORM映射的.NET类型，依据可存下，尽量少类型，不考虑无符号类型
            </summary>
            <param name="engineType"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapDbType(TinyFx.Data.SqlClient.SqlServerEngineType,System.Boolean)">
            <summary>
            SqlServerEngineType => DbType
            </summary>
            <param name="type"></param>
            <param name="isUnicode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.ConvertDbValue(TinyFx.Data.SqlClient.SqlServerEngineType,System.Data.SqlClient.SqlDataReader,System.Int32)">
            <summary>
            根据引擎类型调用Reader对应方法获取值
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlServerTypeMapper.MapSysDbType(System.Type)">
            <summary>
            根据.NET Framework 类型推断Parameter对象的DbType类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlSqlDao">
            <summary>
            SQL Server数据库SQL语句操作类
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlSqlDao.#ctor(System.String,TinyFx.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="database">数据库访问对象</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlSqlDao.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlSqlDao.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="connectionStringName">数据库连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlSqlDao.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">Timeout时间</param>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlProcDao">
            <summary>
            SQL Server数据库存储过程操作类
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.#ctor(System.String,TinyFx.Data.Database)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="database">数据库访问对象</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="connectionStringName">数据库连接字符串名称</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.#ctor(System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="proc">存储过程名称</param>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">commandTimeout</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.AddReturnParameter">
            <summary>
            表示诸如存储过程、内置函数或用户定义函数之类的操作的返回值参数
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlProcDao.GetReturnValue">
            <summary>
            获取返回参数的值
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlDatabase">
            <summary>
            表示一个SQL Server数据库操作对象,参数以@开头
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.#ctor(TinyFx.Data.ConnectionStringConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置信息</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="connectionStringName">配置文件中的 connectionStringName， 如果长度超过50则默认理解为connectionString</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.#ctor(System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.#ctor(System.String,System.String,System.Int32,TinyFx.Data.Instrumentation.IDataInstProvider)">
            <summary>
            构造函数
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="readConnectionString">只读数据库连接字符串</param>
            <param name="commandTimeout">超时时间，单位秒</param>
            <param name="inst">数据操作执行事件监测对象</param>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.GetParameterName(System.String)">
            <summary>
            获得符合数据库提供者的参数名称
            </summary>
            <param name="parameterName">参数名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.GetConnectionStringInfo(System.String)">
            <summary>
            获取连接字符串信息
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.CreateBcp(TinyFx.Data.TransactionManager)">
            <summary>
            创建SqlBulkCopy，实现类似SQL Server数据库的bcp工具的功能。
            </summary>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.CreateBcp(System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>
            创建SqlBulkCopy，实现类似SQL Server数据库的bcp工具的功能。
            </summary>
            <param name="opts">SqlBulkCopyOptions 枚举中的值的组合</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDatabase.CreateBcp(System.Data.SqlClient.SqlBulkCopyOptions,TinyFx.Data.TransactionManager)">
            <summary>
            创建SqlBulkCopy，实现类似SQL Server数据库的bcp工具的功能。
            </summary>
            <param name="opts">SqlBulkCopyOptions 枚举中的值的组合</param>
            <param name="tm">事务对象</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlDataPager">
            <summary>
            SQL Server 分页类
            </summary>
        </member>
        <member name="M:TinyFx.Data.SqlClient.SqlDataPager.AddInParameter(System.String,System.Object,System.Data.SqlDbType,System.Int32)">
            <summary>
            添加分页SQL语句中定义的参数
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
            <param name="dbType">参数类型</param>
            <param name="size">参数大小</param>
        </member>
        <member name="T:TinyFx.Data.SqlClient.SqlObjectType">
            <summary>
            SQL Server数据库对象类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.AggregateFunction">
            <summary>
            AF = 聚合函数 (CLR)
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.CheckConstraint">
            <summary>
            C = CHECK 约束
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.DefaultConstraint">
            <summary>
            D = DEFAULT（约束或独立）
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ForeignKeyConstraint">
            <summary>
            F = FOREIGN KEY 约束
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SqlScalarFunction">
            <summary>
            FN = SQL 标量函数
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ClrScalarFunctionFS">
            <summary>
            FS = 程序集 (CLR) 标量函数
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ClrTableValuedFunction">
            <summary>
            FT = 程序集 (CLR) 表值函数
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SqlInlineTableValuedFunction">
            <summary>
            IF = SQL 内联表值函数
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.InternalTable">
            <summary>
            IT = 内部表
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SqlStoredProcedure">
            <summary>
            P = SQL 存储过程
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ClrStoredProcedure">
            <summary>
            PC = 程序集 (CLR) 存储过程
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.PlanGuide">
            <summary>
            PG = 计划指南
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.PrimaryKeyConstraint">
            <summary>
            PK = PRIMARY KEY 约束
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.Rule">
            <summary>
            R = 规则（旧式，独立）
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ReplicationFilterProcedure">
            <summary>
            RF = 复制筛选过程
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SystemTable">
            <summary>
            S = 系统基表
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.Synonym">
            <summary>
            SN = 同义词
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ServiceQueue">
            <summary>
            SQ = 服务队列
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ClrTrigger">
            <summary>
            TA = 程序集 (CLR) DML 触发器
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SqlTableValuedFunction">
            <summary>
            TF = SQL 表值函数
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.SqlTrigger">
            <summary>
            TR = SQL DML 触发器
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.TableType">
            <summary>
            TT = 表类型
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.UserTable">
            <summary>
            U = 表（用户定义类型）
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.UniqueConstraint">
            <summary>
            UQ = UNIQUE 约束
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.View">
            <summary>
            V = 视图
            </summary>
        </member>
        <member name="F:TinyFx.Data.SqlClient.SqlObjectType.ExtendedStoredProcedure">
            <summary>
            X = 扩展存储过程
            </summary>
        </member>
        <member name="T:TinyFx.EntLib.ChinaAreaInfo">
            <summary>
            中国区域信息，包含省市区信息
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.AreaID">
            <summary>
            行政区划码
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Name">
            <summary>
            省市名称，如北京市
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.ParentId">
            <summary>
            父级编码(行政区划码,0表示根)
                     
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.ShortName">
            <summary>
            名称简写，如北京
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Level">
            <summary>
            级别
                        0-根
                        1-省，自治区，直辖市，特别行政区
                        2-市，地区，自治州，盟，直辖市所属市辖区和县
                        3-县，市辖区，县级市，旗
                        4-乡镇（街道办事处）
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.CityCode">
            <summary>
            城市代码（电话区号）
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.ZipCode">
            <summary>
            邮政编码
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.MergerName">
            <summary>
            长名称，如中国,河北省,石家庄市,平山县
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Pinyin">
            <summary>
            拼音
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Jianpin">
            <summary>
            简拼
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.OtherAlias">
            <summary>
            其他别名
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.IsDirect">
            <summary>
            是否是直辖市
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.ChinaAreaInfo.Status">
            <summary>
            有效状态
                        0-有效
                        1-无效
                        2-变更
                        3-删除
            </summary>
        </member>
        <member name="T:TinyFx.EntLib.ChinaAreaUtil">
            <summary>
            中国区域信息辅助类，获取省市区相关信息
            Level：
                0-根
                1-省，自治区，直辖市，特别行政区
                2-市，地区，自治州，盟，直辖市所属市辖区和县
                3-县，市辖区，县级市，旗
                4-乡镇（街道办事处）
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetAll">
            <summary>
            获取所有区域数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetById(System.Int32)">
            <summary>
            根据行政区划码获地区信息
            </summary>
            <param name="areaId">行政区划码</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetByName(System.String)">
            <summary>
            根据名称获地区域信息
            </summary>
            <param name="shortName">地区名称</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetByAlias(System.String)">
            <summary>
            根据别名获取地区信息
            </summary>
            <param name="alias">省市别名</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetByCityCode(System.String)">
            <summary>
            根据城市代码（电话区号）获取地区信息
            </summary>
            <param name="cityCode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetParentProvince(TinyFx.EntLib.ChinaAreaInfo)">
            <summary>
            获取区域信息的省，自治区，直辖市，特别行政区信息
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetParentCity(TinyFx.EntLib.ChinaAreaInfo)">
            <summary>
            获取区域的市，地区，自治州，盟，直辖市所属市辖区和县信息
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetProvinces">
            <summary>
            获取所有省，自治区，直辖市，特别行政区
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetCities(System.Int32)">
            <summary>
            获取省内的市，地区，自治州，盟，直辖市所属市辖区和县
            </summary>
            <param name="provinceId"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.ChinaAreaUtil.GetTowns(System.Int32)">
            <summary>
            获取市内的县，市辖区，县级市，旗
            </summary>
            <param name="cityId"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.DirtyStringFilter">
            <summary>
            脏字过滤器，用于验证是否存在脏字和替换脏字
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="dirty">脏字集合</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.#ctor(System.String,System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="dirty">字符串，包含脏字的定义</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="filename">文件名，文件包含脏字定义</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.AddDirtyWords(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加脏字定义
            </summary>
            <param name="dirty">脏字定义列表</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.AddDirtyWords(System.String,System.Char)">
            <summary>
            添加脏字定义
            </summary>
            <param name="dirty">字符串，包含脏字的定义</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.AddDirtyWords(System.String,System.String)">
            <summary>
            添加脏字定义通过读取文件
            </summary>
            <param name="filename">文件名</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.Replace(System.String,System.String)">
            <summary>
            用指定字符串替换脏字
            </summary>
            <param name="input">输入的字符串</param>
            <param name="mask">替换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.Replace(System.String,System.Char)">
            <summary>
            用指定字符替换脏字，长度相同
            </summary>
            <param name="input"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.HasDirty(System.String)">
            <summary>
            验证是否存在脏字，存在返回true
            </summary>
            <param name="input">输入的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.DirtyStringFilter.GetDirtyStrings">
            <summary>
            获得定义的脏字集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.IPLocator">
            <summary>
            IPv4 地址归属地查询类。 
            http://www.ipip.net/ 下载最新
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.IPLocator.FindAreaInfo(System.String)">
            <summary>
            根据IP地址获取区域信息
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.IPLocator.Find(System.String)">
            <summary>
            查询ip地址归属库获得信息
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.Pinyin.PinyinEntity">
            <summary>
            拼音信息实体类，包含拼音（包含拼写和声调），声调，拼写
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.PinyinEntity.Pinyin">
            <summary>
            获得或设置拼音（包含拼写和声调）
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.PinyinEntity.Tone">
            <summary>
            获得或设置声调
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.PinyinEntity.Spell">
            <summary>
            获得或设置拼写
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinEntity.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinEntity.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="pinyin">拼音</param>
            <param name="tone">声调</param>
            <param name="spell">拼写</param>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinEntity.ToString">
            <summary>
            重写ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinEntity.CompareTo(TinyFx.EntLib.Pinyin.PinyinEntity)">
            <summary>
            实现IComparable接口，提供按照拼写排序的支持
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.Pinyin.PinyinUtil">
            <summary>
            汉字拼音辅助类
            可以获得汉字的拼音首字母，或拼音的详细信息
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetFirstPinyin(System.Char)">
            <summary>
            获得汉字的拼音首字母。
            不考虑多音字的情况，非汉字字符不做处理。
            字符的Unicode编码范围为19968至40869,包含了20901个汉字
            </summary>
            <param name="word">输入的字符</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetFirstPinyin(System.String)">
            <summary>
            获得汉字的拼音首字母。
            不考虑多音字的情况，非汉字字符不做处理。
            字符的Unicode编码范围为19968至40869,包含了20901个汉字
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetData">
            <summary>
            获得字典结构的拼音数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetList">
            <summary>
            获得列表结构的拼音数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetWords(System.String)">
            <summary>
            根据拼音拼写获取汉字集合
            </summary>
            <param name="spell">拼音拼写 如:biao-->表</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.PinyinUtil.GetPinyin(System.Char)">
            <summary>
            获取汉字的拼音信息，如果不存在定义返回null
            </summary>
            <param name="word">汉字</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.Pinyin.WordPinyin">
            <summary>
            汉字拼音相关信息类，通过PinYinUtil类获取
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.WordPinyin.Word">
            <summary>
            获得或设置汉字
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.WordPinyin.Pinyins">
            <summary>
            获得拼音信息集合
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.WordPinyin.Hex">
            <summary>
            获得字符编码的十六进制表示
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.WordPinyin.IsMutiPinyin">
            <summary>
            获得是否多音字
            </summary>
        </member>
        <member name="P:TinyFx.EntLib.Pinyin.WordPinyin.PinyinCount">
            <summary>
            获得汉字的多音字数量
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.WordPinyin.ToString">
            <summary>
            显示汉字信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.EntLib.Pinyin.WordPinyin.CompareTo(TinyFx.EntLib.Pinyin.WordPinyin)">
            <summary>
            实现IComparable接口，提供按照字符排序的支持
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.EntLib.SharpICTCLAS.ICTCLASUtil">
            <summary>
            ICTCLAS辅助类
            </summary>
        </member>
        <member name="M:TinyFx.EntLib.SharpICTCLAS.ICTCLASUtil.GetSegment(System.String,System.Int32,System.String)">
            <summary>
            分词
            </summary>
            <param name="sentence">分词的句子</param>
            <param name="nKind">初步切分时分成几种结果</param>
            <param name="dictPath">字典所在目录</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.AutoMapperUtil">
            <summary>
            AutoMapper配置类
            需要在Application_Start中配置AutoMapperUtil.Register(Assembly.GetAssembly(typeof(OSC.Models.IAssembly)));
            其中Assembly为所有继承IMapFrom和IMapTo的程序集
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.AutoMapperUtil.Register">
            <summary>
            使用配置文件中的配置注册AutoMapper
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.AutoMapperUtil.Register(System.Reflection.Assembly)">
            <summary>
            注册AutoMapper，需要在应用程序启动时注册
            </summary>
            <param name="asm"></param>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.AutoMapperUtil.Register(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            注册AutoMapper，需要在应用程序启动时注册
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.AutoMapperUtil.GetMapperConfig(System.Collections.Generic.List{System.Type})">
            <summary>
            获取映射配置
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapFrom`1">
            <summary>
            T类对象映射到当前类对象，不实现MapFrom则使用AutoMapper默认映射方法
            T ==> Entry
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`1.MapFrom(`0)">
            <summary>
            实现从T类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapFrom`2">
            <summary>
            从T1,T2类映射到当前类，不实现MapFrom则使用AutoMapper默认映射方法
            T ==> Entry
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`2.MapFrom(`0)">
            <summary>
            实现从T1类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`2.MapFrom(`1)">
            <summary>
            实现从T2类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapFrom`3">
            <summary>
            从T1,T2,T3类映射到当前类，不实现MapFrom则使用AutoMapper默认映射方法
            T ==> Entry
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`3.MapFrom(`2)">
            <summary>
            实现从T3类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapFrom`4">
            <summary>
            从T1,T2,T3, T4类映射到当前类，不实现MapFrom则使用AutoMapper默认映射方法
            T ==> Entry
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`4.MapFrom(`3)">
            <summary>
            实现从T4类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapFrom`5">
            <summary>
            从T1,T2,T3,T4,T5类映射到当前类，不实现MapFrom则使用AutoMapper默认映射方法
            T ==> Entry
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapFrom`5.MapFrom(`4)">
            <summary>
            实现从T5类型对象src构建当前对象
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapTo`1">
            <summary>
            当前对象映射到T对象的接口，不实现MapTo则使用AutoMapper默认映射方法
            Entry ==> T
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`1.MapTo(`0)">
            <summary>
            实现当前对象映射到T对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapTo`2">
            <summary>
            当前对象映射到T1,T2对象的接口，不实现MapTo则使用AutoMapper默认映射方法
            Entry ==> T
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`2.MapTo(`0)">
            <summary>
            实现当前对象映射到T1对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`2.MapTo(`1)">
            <summary>
            实现当前对象映射到T1对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapTo`3">
            <summary>
            当前对象映射到T1,T2,T3对象的接口，不实现MapTo则使用AutoMapper默认映射方法
            Entry ==> T
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`3.MapTo(`2)">
            <summary>
            实现当前对象映射到T3对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapTo`4">
            <summary>
            当前对象映射到T1,T2,T3,T4对象的接口，不实现MapTo则使用AutoMapper默认映射方法
            Entry ==> T
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`4.MapTo(`3)">
            <summary>
            实现当前对象映射到T4对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="T:TinyFx.Extensions.AutoMapper.IMapTo`5">
            <summary>
            当前对象映射到T1,T2,T3,T4,T5对象的接口，不实现MapTo则使用AutoMapper默认映射方法
            Entry ==> T
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.AutoMapper.IMapTo`5.MapTo(`4)">
            <summary>
            实现当前对象映射到T5对象dest
            </summary>
            <param name="dest"></param>
        </member>
        <member name="T:TinyFx.Extensions.CsvHelper.CsvUtil">
            <summary>
            CSV文件辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetArrayRecordsByReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析TextReader获取记录string[]集合
            </summary>
            <param name="reader"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetArrayRecordsByString(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv string获取记录string[]集合
            </summary>
            <param name="content"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetArrayRecordsByFile(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv文件获取记录string[]集合
            </summary>
            <param name="csvFile"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetReaderRecordsByReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析TextReader获取记录CsvReader集合
            </summary>
            <param name="reader"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetReaderRecordsByFile(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv文件获取记录CsvReader集合
            </summary>
            <param name="csvFile"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetReaderRecordsByString(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv string获取记录CsvReader集合
            </summary>
            <param name="content"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetItemRecordsByReader``1(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析TextReader获取记录T集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetItemRecordsByFile``1(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv文件获取记录T集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="csvFile"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetItemRecordsByString``1(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv string获取记录T集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteItemsToWriter``1(System.Collections.Generic.IEnumerable{``0},System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析items写入TextWriter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="writer"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteItemsToFile``1(System.Collections.Generic.IEnumerable{``0},System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析items写入文件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="csvFile"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetItemsToStrig``1(System.Collections.Generic.IEnumerable{``0},CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析items获取csv string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteReaderToWriter(System.Data.IDataReader,System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataReader写入TextWriter
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteReaderToFile(System.Data.IDataReader,System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataReader写入csv文件
            </summary>
            <param name="reader"></param>
            <param name="csvFile"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetReaderToString(System.Data.IDataReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataReader获取csv string
            </summary>
            <param name="reader"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteTableToWriter(System.Data.DataTable,System.IO.TextWriter,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataTable写入TextWriter
            </summary>
            <param name="dt"></param>
            <param name="writer"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.WriteTableToFile(System.Data.DataTable,System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataTable写入csv文件
            </summary>
            <param name="dt"></param>
            <param name="csvFile"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetTableToString(System.Data.DataTable,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析DataTable获取csv string
            </summary>
            <param name="dt"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.LoadTableByReader(System.Data.DataTable,System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析TextReader加载数据到DataTable
            </summary>
            <param name="dt"></param>
            <param name="reader"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.LoadTableByFile(System.Data.DataTable,System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv文件加载数据到DataTable
            </summary>
            <param name="dt"></param>
            <param name="csvFile"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.LoadTableByString(System.Data.DataTable,System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv string加载数据到DataTable
            </summary>
            <param name="dt"></param>
            <param name="content"></param>
            <param name="config"></param>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetTableByReader(System.IO.TextReader,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析TextReader获取DataTable
            </summary>
            <param name="reader"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetTableByFile(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv文件获取DataTable
            </summary>
            <param name="csvFile"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.CsvHelper.CsvUtil.GetTableByString(System.String,CsvHelper.Configuration.CsvConfiguration)">
            <summary>
            解析csv string获取DataTable
            </summary>
            <param name="content"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.EntityReadConfig`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            设置属性映射
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.HeaderRowIndex">
            <summary>
            Header 所在行
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.StartRowIndex">
            <summary>
            首行数据索引, 从1开始（可能包含header）
            不设置取sheet.Dimension.Start.Row
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.SheetHeaders">
            <summary>
            表示Worksheet中Headers的定义。(ColumnIndex,Title)
            根据HeaderRowIndex读取Sheet获得或用户设置。
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.ConfigHeaders">
            <summary>
            用户手工设置的写入时的Header映射配置
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.Headers">
            <summary>
            整理后写入时使用的Headers
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelConfig.Encoding">
            <summary>
            文档字符集
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelConfig.SetStartCell(System.String)">
            <summary>
            设置起始Cell，如：A1
            如果包含header，则HasHeader属性必须是true
            </summary>
            <param name="cellString"></param>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelConfig.PrepareHeaders">
            <summary>
            根据SheetHeaders和ConfigHeaders配置Headers
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.ExcelReadConfig">
            <summary>
            Excel 读取配置
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelReadConfig.HasHeader">
            <summary>
            是否有 Header
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelReadConfig.EndColumnIndex">
            <summary>
            末列索引，从1开始。如未设置则自动判断
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelReadConfig.EndRowIndex">
            <summary>
            末行数据索引,从1开始。如未设置则根据自动判断
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelReadConfig.StartRowChecker">
            <summary>
            起始行检测器
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelReadConfig.EndRowChecker">
            <summary>
            结束行检测器
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelReadConfig.SetEndCell(System.String)">
            <summary>
            设置结束Cell
            </summary>
            <param name="cellString"></param>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelReadConfig.SetLastColumn(System.String)">
            <summary>
            设置最后一列。如：E
            </summary>
            <param name="columnString"></param>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelReadConfig.GetRowEnumerator(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            根据当前配置获取Rows
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.ExcelWriteConfig">
            <summary>
            Excel写入配置
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.SheetHeaderCollection">
            <summary>
            Sheet 中的 Headers 信息, ColumnIndex从1开始
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.EPPlusUtil">
            <summary>
            EPPLus辅助类，XLSX,CSV,List,DataTable
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.EPPlusUtil.HasExcel">
            <summary>
            是否安装Excel
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.EPPlusUtil.OpenExcel(System.String)">
            <summary>
            使用微软Excel打开
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.ExcelRowEx">
            <summary>
            EPPlus 行数据
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelRowEx.Headers">
            <summary>
            Headers
            key: title value: columnIndex
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelRowEx.Cells">
            <summary>
            当前行的Cells。 key: columnIndex
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelRowEx.StartColumnIndex">
            <summary>
            当前行起始 ColumnIndex
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelRowEx.EndColumnIndex">
            <summary>
            当前行终止 ColumnIndex
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.EPPlus.ExcelRowEx.RowIndex">
            <summary>
            当前行索引
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelRowEx.#ctor(System.Collections.Generic.IEnumerable{OfficeOpenXml.ExcelRangeBase},TinyFx.Extensions.EPPlus.HeaderMapConfigCollection)">
            <summary>
            构造函数
            </summary>
            <param name="cells"></param>
            <param name="headers"></param>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelRowEx.GetValue(System.Int32)">
            <summary>
            获取指定Cell值
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.EPPlus.ExcelRowEx.GetValue(System.String)">
            <summary>
            获取指定Cell值
            </summary>
            <param name="title"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.EPPlus.RowCheckerMode">
            <summary>
            Excel行检测模式
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.SevenZipSharp.SevenZipUtil">
            <summary>
            7-Z 压缩辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.ZipDirectory(System.String,System.String,SevenZip.OutArchiveFormat)">
            <summary>
            压缩目录到文件
            </summary>
            <param name="directory"></param>
            <param name="archiveName"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.ZipDirectory(System.String,System.IO.Stream,SevenZip.OutArchiveFormat)">
            <summary>
            压缩目录到Stream
            </summary>
            <param name="directory"></param>
            <param name="archiveStream"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.ZipFiles(System.String,System.Collections.Generic.List{System.String},SevenZip.OutArchiveFormat)">
            <summary>
            压缩文件到文件
            </summary>
            <param name="archiveName"></param>
            <param name="fileFullNames"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.ZipFiles(System.IO.Stream,System.Collections.Generic.List{System.String},SevenZip.OutArchiveFormat)">
            <summary>
            压缩文件到Stream
            </summary>
            <param name="archiveStream"></param>
            <param name="fileFullNames"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.ZipStream(System.IO.Stream,System.IO.Stream,SevenZip.OutArchiveFormat)">
            <summary>
            压缩Stream到Stream
            </summary>
            <param name="inStream"></param>
            <param name="outStream"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.UnzipArchive(System.String,System.String,SevenZip.InArchiveFormat)">
            <summary>
            解压缩到目录
            </summary>
            <param name="archiveFullName"></param>
            <param name="outDirectory"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.UnzipFile(System.String,System.String,System.IO.Stream,SevenZip.InArchiveFormat)">
            <summary>
            解压缩具体文件到Stream
            </summary>
            <param name="archiveFullName"></param>
            <param name="fileName"></param>
            <param name="stream"></param>
            <param name="format"></param>
        </member>
        <member name="M:TinyFx.Extensions.SevenZipSharp.SevenZipUtil.UnzipStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            解压缩Stream到Stream
            </summary>
            <param name="inStream"></param>
            <param name="outStream"></param>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.IRedisValueExpired">
            <summary>
            Redis集合结构中缓存项过期接口
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.IRedisValueExpired.RedisExpiredDate">
            <summary>
            缓存过期时间
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisClient">
            <summary>
            访问操作Redis的Client
            string类型使用此对象，其他对象
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisClient.Multiplexer">
            <summary>
            IConnectionMultiplexer
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisClient.Database">
            <summary>
            IDatabase
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisClient.Serializer">
            <summary>
            系列化器
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.#ctor(StackExchange.Redis.IDatabase,TinyFx.Extensions.StackExchangeRedis.ISerializer)">
            <summary>
            构造函数
            </summary>
            <param name="database"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SearchKeys(System.String,TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy)">
            <summary>
            从Redis数据库中搜索密钥keys，生产环境小心使用，可能会破坏性能
            </summary>
            <param name="pattern"></param>
            <param name="strategy"></param>
            <example>
            	如果要返回以“myCacheKey”开头的所有键使用“myCacheKey *”
            	如果要返回包含“myCacheKey”的所有键使用“* myCacheKey *”
            	如果要返回以“myCacheKey”结尾的所有键使用“* myCacheKey”
            </example>
            <returns>从Redis数据库检索的key集合</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SearchKeysAsync(System.String,TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy)">
            <summary>
            从Redis数据库中搜索密钥keys，生产环境小心使用，可能会破坏性能
            </summary>
            <param name="pattern"></param>
            <param name="strategy"></param>
            <example>
            	如果要返回以“myCacheKey”开头的所有键使用“myCacheKey *”
            	如果要返回包含“myCacheKey”的所有键使用“* myCacheKey *”
            	如果要返回以“myCacheKey”结尾的所有键使用“* myCacheKey”
            </example>
            <returns>从Redis数据库检索的key集合</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.FlushDb">
            <summary>
            刷新数据库Database
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.FlushDbAsync">
            <summary>
            刷新数据库Database
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Save(StackExchange.Redis.SaveType)">
            <summary>
            后台保存Database
            </summary>
            <param name="saveType"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SaveAsync(StackExchange.Redis.SaveType)">
            <summary>
            后台保存Database
            </summary>
            <param name="saveType"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.GetInfo">
            <summary>
            获取Redis信息。更多查看 http://redis.io/commands/INFO
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.GetInfoAsync">
            <summary>
            获取Redis信息。更多查看 http://redis.io/commands/INFO
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Publish``1(StackExchange.Redis.RedisChannel,``0,StackExchange.Redis.CommandFlags)">
            <summary>
            发布消息到Channel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.PublishAsync``1(StackExchange.Redis.RedisChannel,``0,StackExchange.Redis.CommandFlags)">
            <summary>
            发布消息到Channel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="message"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Subscribe``1(StackExchange.Redis.RedisChannel,System.Action{``0},StackExchange.Redis.CommandFlags)">
            <summary>
            注册回调处理程序handler来处理发布到通道channel的消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="handler"></param>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SubscribeAsync``1(StackExchange.Redis.RedisChannel,System.Func{``0,System.Threading.Tasks.Task},StackExchange.Redis.CommandFlags)">
            <summary>
            注册回调处理程序handler来处理发布到通道channel的消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="handler"></param>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Unsubscribe``1(StackExchange.Redis.RedisChannel,System.Action{``0},StackExchange.Redis.CommandFlags)">
            <summary>
            注销已注册在Channel中的消息处理Handler
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="handler"></param>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.UnsubscribeAsync``1(StackExchange.Redis.RedisChannel,System.Func{``0,System.Threading.Tasks.Task},StackExchange.Redis.CommandFlags)">
            <summary>
            注销已注册在Channel中的消息处理Handler
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="handler"></param>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.UnsubscribeAll(StackExchange.Redis.CommandFlags)">
            <summary>
            注销所有已注册在通道上的所有消息处理程序
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.UnsubscribeAllAsync(StackExchange.Redis.CommandFlags)">
            <summary>
            注销所有已注册在通道上的所有消息处理程序
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Exists(System.String)">
            <summary>
            验证缓存Key是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.ExistsAsync(System.String)">
            <summary>
            验证缓存Key是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetExpire(System.String,System.TimeSpan)">
            <summary>
            设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetExpire(System.String,System.DateTime)">
            <summary>
            设置过期时间
            </summary>
            <param name="key"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Set``1(System.String,``0)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>添加成功返回true</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetAsync``1(System.String,``0)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns>添加成功返回true</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Set``1(System.String,``0,System.DateTimeOffset)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresAt">指定过期时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetAsync``1(System.String,``0,System.DateTimeOffset)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresAt">到期时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Set``1(System.String,``0,System.TimeSpan)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresIn">缓存持续时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetAsync``1(System.String,``0,System.TimeSpan)">
            <summary>
            添加缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expiresIn">缓存持续时间</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetAll``1(System.Collections.Generic.IList{System.ValueTuple{System.String,``0}})">
            <summary>
            添加多个缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.SetAllAsync``1(System.Collections.Generic.IList{System.ValueTuple{System.String,``0}})">
            <summary>
            添加多个缓存项，如果存在则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Get``1(System.String)">
            <summary>
            获取指定key的缓存项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns>如果不存在则为空，否则为T</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.GetAsync``1(System.String)">
            <summary>
            获取指定key的缓存项。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns>如果不存在则为空，否则为T</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.GetAll``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取指定kyes的缓存集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys"></param>
            <returns>如果缓存key不存在返回null</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.GetAllAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取指定kyes的缓存集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keys"></param>
            <returns>如果缓存key不存在返回null</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Remove(System.String)">
            <summary>
            移除指定key缓存
            </summary>
            <param name="key"></param>
            <returns>如果成功移除返回true，反之false</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.RemoveAsync(System.String)">
            <summary>
            移除指定key缓存
            </summary>
            <param name="key"></param>
            <returns>如果成功移除返回true，反之false</returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除所有指定keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除所有指定keys
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Increment(System.String,System.Int64)">
            <summary>
            增量数字+value，如不存在key则创建,返回增加后值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Increment(System.String,System.Double)">
            <summary>
            增量数字+value，如不存在key则创建,返回增加后值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Decrement(System.String,System.Int64)">
            <summary>
            减量数字-value,如不存在key则创建，返回减量后值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisClient.Decrement(System.String,System.Double)">
            <summary>
            减量数字-value,如不存在key则创建，返回减量后值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisFactory">
            <summary>
            Redis工厂方法类，获取 RedisClient 和 IDatabase
                RedisClient: 操作Redis客户端，包含Redis操作，string类型操作，缓存对象序列化器
                IDatabase: 操作Redis缓存项的类 
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisFactory.GetDatabase(System.String)">
            <summary>
            获得IDatabase
            </summary>
            <param name="connectionStringName">配置文件redis中的ConnectionStringName</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisFactory.GetDatabase(System.String,System.Int32,System.String)">
            <summary>
            获得IDatabase
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="database"></param>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisFactory.GetClient(System.String)">
            <summary>
            获得RedisClient
            </summary>
            <param name="connectionStringName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisFactory.GetClient(System.String,TinyFx.Extensions.StackExchangeRedis.ISerializer,System.Int32,System.String)">
            <summary>
            获得RedisClient
            </summary>
            <param name="connectionString"></param>
            <param name="serializer"></param>
            <param name="database"></param>
            <param name="keyPrefix"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1">
            <summary>
            Redis Hash表（key-value结构）
                RedisKey => HashField => RedisValue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetRedisKey">
            <summary>
            RedisKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetRedisValueFromSource(System.String)">
            <summary>
            根据field从缓存源获取缓存项
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Set(System.String,`0,System.Boolean,StackExchange.Redis.CommandFlags)">
            <summary>
            设置hash结构中的field。如果key不存在创建，如果field存在则覆盖，不存在则添加
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="nx"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.SetAsync(System.String,`0,System.Boolean,StackExchange.Redis.CommandFlags)">
            <summary>
            设置hash结构中的field。如果key不存在创建，如果field存在则覆盖，不存在则添加
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="nx"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Set(System.Collections.Generic.Dictionary{System.String,`0},StackExchange.Redis.CommandFlags)">
            <summary>
            设置hash结构中的field。如果key不存在创建，如果field存在则覆盖，不存在则添加
            </summary>
            <param name="values"></param>
            <param name="commandFlags"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.SetAsync(System.Collections.Generic.Dictionary{System.String,`0},StackExchange.Redis.CommandFlags)">
            <summary>
            设置hash结构中的field。如果key不存在创建，如果field存在则覆盖，不存在则添加
            </summary>
            <param name="values"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Get(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构根据field获取缓存项，如果不存在则调用GetRedisValueFromSource()放入redis并返回
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetOrException(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构根据field获取缓存项，如果不存在则抛出异常RedisNotFound
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetOrDefault(System.String,`0,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构根据field获取缓存项，如果不存在，则返回默认值。
            </summary>
            <param name="field"></param>
            <param name="defaultValue"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Get(System.Collections.Generic.IEnumerable{System.String},StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构Get缓存项
            </summary>
            <param name="fields"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetAsync(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构Get缓存项
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetAsync(System.Collections.Generic.IEnumerable{System.String},StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构Get缓存项
            </summary>
            <param name="fields"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetAll(StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构Get缓存项
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetAllAsync(StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构Get缓存项
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Remove(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构移除key。时间复杂度：O(1)
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Remove(System.Collections.Generic.IEnumerable{System.String},StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构移除keys。时间复杂度：O(1)
            </summary>
            <param name="fields"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.RemoveAsync(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构移除key。时间复杂度：O(1)
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.RemoveAsync(System.Collections.Generic.IEnumerable{System.String},StackExchange.Redis.CommandFlags)">
            <summary>
            从Hash结构移除keys。时间复杂度：O(1)
            </summary>
            <param name="fields"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Exists(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            Hash是否存在指定key
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.ExistsAsync(System.String,StackExchange.Redis.CommandFlags)">
            <summary>
            Hash是否存在指定key
            </summary>
            <param name="field"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetFields(StackExchange.Redis.CommandFlags)">
            <summary>
            获取所有hash中的keys
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetFieldsAsync(StackExchange.Redis.CommandFlags)">
            <summary>
            获取所有hash中的keys
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetValues(StackExchange.Redis.CommandFlags)">
            <summary>
            返回所有hash结构的fields
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetValuesAsync(StackExchange.Redis.CommandFlags)">
            <summary>
            返回所有hash结构的fields
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetLength(StackExchange.Redis.CommandFlags)">
            <summary>
            获取hash内缓存项数量
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.GetLengthAsync(StackExchange.Redis.CommandFlags)">
            <summary>
            获取hash内缓存项数量
            </summary>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Scan(System.String,System.Int32,StackExchange.Redis.CommandFlags)">
            <summary>
            在hash结构中查询fields。时间复杂度O(N).N为hash中的field数量
            </summary>
            <param name="pattern"></param>
            <param name="pageSize"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.ScanAsync(System.String,System.Int32,StackExchange.Redis.CommandFlags)">
            <summary>
            在hash结构中查询fields。时间复杂度O(N).N为hash中的field数量
            </summary>
            <param name="pattern"></param>
            <param name="pageSize"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Increment(System.String,System.Int64,StackExchange.Redis.CommandFlags)">
            <summary>
            Hash结构存储增量数字。如果field不存在则设置为0。支持long
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Increment(System.String,System.Double,StackExchange.Redis.CommandFlags)">
            <summary>
            Hash结构存储增量数字。如果field不存在则设置为0。支持long
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Decrement(System.String,System.Int64,StackExchange.Redis.CommandFlags)">
            <summary>
            减量数字-value,如不存在key则创建，返回减量后值
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisHashBase`1.Decrement(System.String,System.Double,StackExchange.Redis.CommandFlags)">
            <summary>
            减量数字-value,如不存在key则创建，返回减量后值
            </summary>
            <param name="field"></param>
            <param name="value"></param>
            <param name="commandFlags"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisListBase`1">
            <summary>
            Redis List双向链表结构（左右两边操作）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisListBase`1.Remove(`0,System.Int64,StackExchange.Redis.CommandFlags)">
            <summary>
            移除list中缓存项。
            </summary>
            <param name="value"></param>
            <param name="count">count大于0 从头删除count个元素; count=0 删除全部; count小于0 从后删除count个元素</param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisNotFound">
            <summary>
            缓存项未找到
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisNotFound.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisNotFound.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="hashId"></param>
            <param name="key"></param>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1">
            <summary>
            Redis集合对象基类：hash, list, set, sortedset
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.RedisClient">
            <summary>
            操作Redis的Client
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.Database">
            <summary>
            操作缓存数据的Database
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.Serializer">
            <summary>
            缓存对象序列化器
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.ConnectionStringName">
            <summary>
            配置文件中定义的Redis连接字符串名称
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.RedisKey">
            <summary>
            当前Redis缓存key，默认使用当前类名
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.HasRedisValueExpired">
            <summary>
            集合中缓存项是否有过期属性
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.IsRedisValueExpired(`0)">
            <summary>
            判断缓存项是否过期
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.GetRedisKey">
            <summary>
            获取最终当前redis缓存key
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.SetExpire(System.TimeSpan)">
            <summary>
            设置当前缓存集合的相对过期时间(非缓存项)
            </summary>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.RedisObjectBase`1.SetExpire(System.DateTime)">
            <summary>
            设置当前缓存集合的绝对过期时间(非缓存项)
            </summary>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisSetBase`1">
            <summary>
            Redis Set集合（不重复集合）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.RedisSortedSetBase`1">
            <summary>
            Redis Zset集合（排序的不重复集合）
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer">
            <summary>
            JSon.Net 序列化
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.#ctor(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            构造函数
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.SerializeAsync(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.DeserializeAsync(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.Serializers.NewtonsoftSerializer.DeserializeAsync``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ISerializer">
            <summary>
            Redis保存时序列化器接口
            </summary>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.SerializeAsync(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.DeserializeAsync(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Extensions.StackExchangeRedis.ISerializer.DeserializeAsync``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializedObject"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy">
            <summary>
            执行服务器端命令时使用的策略
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy.Mode">
            <summary>
            选择单个还是全部服务器
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy.TargetRole">
            <summary>
            服务器选择策略：选择任一个还是优先Slave
            </summary>
        </member>
        <member name="P:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerEnumerationStrategy.UnreachableServerAction">
            <summary>
            无法访问的服务器操作选项: throw异常或忽略
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ModeOptions">
            <summary>
            选择单个还是全部服务器
            </summary>
        </member>
        <member name="F:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ModeOptions.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ModeOptions.Single">
            <summary>
            仅选择一个
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ServerIteration.TargetRoleOptions">
            <summary>
            服务器选择策略：选择任一个还是优先Slave
            </summary>
        </member>
        <member name="F:TinyFx.Extensions.StackExchangeRedis.ServerIteration.TargetRoleOptions.PreferSlave">
            <summary>
            优先选择slave服务器
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ServerIteration.UnreachableServerActionOptions">
            <summary>
            无法访问的服务器操作选项: throw异常或忽略
            </summary>
        </member>
        <member name="F:TinyFx.Extensions.StackExchangeRedis.ServerIteration.UnreachableServerActionOptions.Throw">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="F:TinyFx.Extensions.StackExchangeRedis.ServerIteration.UnreachableServerActionOptions.IgnoreIfOtherAvailable">
            <summary>
            忽略无效
            </summary>
        </member>
        <member name="T:TinyFx.Extensions.StackExchangeRedis.ServerIteration.ServerIteratorFactory">
            <summary>
            服务器迭代器Factory
            </summary>
        </member>
        <member name="T:TinyFx.Globalization.ChineseCalendar">
            <summary>
            中国阴历日期处理类
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.Weeks">
            <summary>
            星期集合
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.Constellations">
            <summary>
            星座集合
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.BirthStones">
            <summary>
            诞生石集合
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.SolarTerms">
            <summary>
            节气集合
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.SolarDate">
            <summary>
            获取当前阳历时间
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.Next">
            <summary>
            获取当前日期的后一天
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.Previous">
            <summary>
            获取当前日期的前一天
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.IsLeapYear">
            <summary>
            是否为闰年
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.LunarYear">
            <summary>
            获取阴历年份
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.LunarYearText">
            <summary>
            获取阴历年份中文名称
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.IsLeapMonth">
            <summary>
            是否为闰月
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.LunarMonth">
            <summary>
            获取阴历月份
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.MonthText">
            <summary>
            获取阴历月份中文名称
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.IsLeapDay">
            <summary>
            是否为闰日
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.LunarDay">
            <summary>
            获取阴历日期
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.LunarDayText">
            <summary>
            获取阴历日期中文名称
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.WeekText">
            <summary>
            获取星期几
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.SexagenaryYear">
            <summary>
            获取甲子年份
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.SexagenaryYearText">
            <summary>
            获取甲子年份中文名称
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.Animal">
            <summary>
            获取属相
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.AnimalText">
            <summary>
            获取属相
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.SolarTerm">
            <summary>
            获取二十四节气
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.SolarTermText">
            <summary>
            获取二十四节气
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.Constellation">
            <summary>
            获取星座
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.ConstellationText">
            <summary>
            获取星座
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.BirthStoneText">
            <summary>
            获取诞生石
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.#ctor(System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="date">阳历日期</param>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="year">阳历年</param>
            <param name="month">阳历月</param>
            <param name="day">阳历日</param>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="year">阴历年</param>
            <param name="month">阴历月</param>
            <param name="day">阴历日</param>
            <param name="isLeapMonth">是否闰月</param>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.GetLunarNewYearDate(System.Int32)">
            <summary>
            获取指定年份春节当日（正月初一）的阳历日期
            </summary>
            <param name="year">指定的年份</param>
        </member>
        <member name="M:TinyFx.Globalization.ChineseCalendar.GetDateFromLunarDate(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            阴历转阳历
            </summary>
            <param name="year">阴历年</param>
            <param name="month">阴历月</param>
            <param name="day">阴历日</param>
            <param name="isLeapMonth">是否闰月</param>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.SolarHolidays">
            <summary>
            阳历节日
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.LunarHolidays">
            <summary>
            阴历节日
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.ChineseCalendar.WeekHolidays">
            <summary>
            按某月第几个星期的星期几计算的节日
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.ChineseCalendar.Holidays">
            <summary>
            节假日
            </summary>
        </member>
        <member name="T:TinyFx.Globalization.HolidayBase">
            <summary>
            假期基类
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.HolidayBase.Sort">
            <summary>
            假期定义的类别
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.HolidayBase.Type">
            <summary>
            已定义假期类型
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.HolidayBase.Name">
            <summary>
            假期名称
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.HolidayBase.IsRecess">
            <summary>
            是否法定休息日
            </summary>
        </member>
        <member name="T:TinyFx.Globalization.HolidaySort">
            <summary>
            假期定义的类别
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.HolidaySort.Solar">
            <summary>
            阳历
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.HolidaySort.Lunar">
            <summary>
            阴历
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.HolidaySort.Week">
            <summary>
            某月第几个星期的星期几
            </summary>
        </member>
        <member name="T:TinyFx.Globalization.KnownHoliday">
            <summary>
            已定义假期
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.KnownHoliday.Undefined">
            <summary>
            未定义
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.KnownHoliday.YuanDan">
            <summary>
            元旦
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.KnownHoliday.LaoDong">
            <summary>
            劳动节
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.KnownHoliday.GuoQing">
            <summary>
            国庆节
            </summary>
        </member>
        <member name="F:TinyFx.Globalization.KnownHoliday.ChunJie">
            <summary>
            春节
            </summary>
        </member>
        <member name="T:TinyFx.Globalization.LunarHoliday">
            <summary>
            按阴历计算的假期
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.LunarHoliday.Month">
            <summary>
            阴历月
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.LunarHoliday.Day">
            <summary>
            阴历日
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.LunarHoliday.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.LunarHoliday.#ctor(System.Int32,System.Int32,System.Boolean,System.String,TinyFx.Globalization.KnownHoliday)">
            <summary>
            构造函数
            </summary>
            <param name="month">阴历月</param>
            <param name="day">阴历日</param>
            <param name="recess">是否法定节假日</param>
            <param name="name">节日名称</param>
            <param name="type">节日类型</param>
        </member>
        <member name="T:TinyFx.Globalization.SolarHoliday">
            <summary>
            按阳历计算的假期
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.SolarHoliday.Month">
            <summary>
            阳历月
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.SolarHoliday.Day">
            <summary>
            阳历日
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.SolarHoliday.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.SolarHoliday.#ctor(System.Int32,System.Int32,System.Boolean,System.String,TinyFx.Globalization.KnownHoliday)">
            <summary>
            构造函数
            </summary>
            <param name="month">阳历月</param>
            <param name="day">阳历日</param>
            <param name="recess">是否法定假期</param>
            <param name="name">节日名称</param>
            <param name="type">节日类型</param>
        </member>
        <member name="T:TinyFx.Globalization.WeekHoliday">
            <summary>
            按某月第几个星期的星期几计算的假期
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.WeekHoliday.Month">
            <summary>
            某一个月
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.WeekHoliday.WeekAtMonth">
            <summary>
            本月第几周
            </summary>
        </member>
        <member name="P:TinyFx.Globalization.WeekHoliday.DayOfWeek">
            <summary>
            本周星期几
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.WeekHoliday.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Globalization.WeekHoliday.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.String,TinyFx.Globalization.KnownHoliday)">
            <summary>
            构造函数
            </summary>
            <param name="month">某一个月</param>
            <param name="week">本月第几周</param>
            <param name="day">本周星期几</param>
            <param name="recess">是否法定节假日</param>
            <param name="name">节日名称</param>
            <param name="type">节日类型</param>
        </member>
        <member name="T:TinyFx.IO.CompressionUtil">
            <summary>
            压缩辅助类
            </summary>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.GZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            Gzip压缩源Stream到目标Stream
            </summary>
            <param name="source"></param>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.GZip(System.IO.Stream,System.String,System.IO.FileMode)">
            <summary>
            Gzip压缩到文件
            </summary>
            <param name="source"></param>
            <param name="zipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.GZip(System.String,System.String,System.IO.FileMode)">
            <summary>
            Gzip压缩到文件
            </summary>
            <param name="sourceFile"></param>
            <param name="zipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.GZipToBytes(System.IO.Stream)">
            <summary>
            Gzip压缩得到bytes
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.GZipToStream(System.IO.Stream)">
            <summary>
            Gzip压缩得到MemoryStream
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnGZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            Gzip解压缩Stream
            </summary>
            <param name="zipStream"></param>
            <param name="unzipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnGZip(System.IO.Stream,System.String,System.IO.FileMode)">
            <summary>
            Gzip解压缩Stream
            </summary>
            <param name="zipStream"></param>
            <param name="unzipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnGZip(System.String,System.String,System.IO.FileMode)">
            <summary>
            Gzip解压缩文件
            </summary>
            <param name="zipFile"></param>
            <param name="unzipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnGZipToBytes(System.IO.Stream)">
            <summary>
            GZip解压缩到bytes
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnGZipToStream(System.IO.Stream)">
            <summary>
            GZip解压缩到Stream
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.Zip(System.String,System.String)">
            <summary>
            ZIP压缩目录
            </summary>
            <param name="sourceDirectory"></param>
            <param name="zipFile"></param>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnZip(System.String,System.String)">
            <summary>
            ZIP解压缩到目录
            </summary>
            <param name="zipFile"></param>
            <param name="extractDirectory"></param>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.ReadZipEntryToStream(System.String,System.String)">
            <summary>
            读取ZIP文件中的压缩项到Stream
            </summary>
            <param name="zipFile"></param>
            <param name="entryName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.ReadZipEntryToBytes(System.String,System.String)">
            <summary>
            读取ZIP文件中的压缩项到bytes
            </summary>
            <param name="zipFile"></param>
            <param name="entryName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.SevenZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            7zip压缩
            </summary>
            <param name="source"></param>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.SevenZip(System.String,System.String,System.IO.FileMode)">
            <summary>
            7zip压缩
            </summary>
            <param name="sourceFile"></param>
            <param name="zipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.SevenZipToBytes(System.IO.Stream)">
            <summary>
            7zip压缩
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.SevenZipToStream(System.IO.Stream)">
            <summary>
            7zip压缩
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnSevenZip(System.IO.Stream,System.IO.Stream)">
            <summary>
            7zip解压缩
            </summary>
            <param name="zipStream"></param>
            <param name="unzipStream"></param>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnSevenZip(System.String,System.String,System.IO.FileMode)">
            <summary>
            7zip解压缩
            </summary>
            <param name="zipFile"></param>
            <param name="unzipFile"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnSevenZipToBytes(System.IO.Stream)">
            <summary>
            7zip解压缩
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.CompressionUtil.UnSevenZipToStream(System.IO.Stream)">
            <summary>
            7zip解压缩
            </summary>
            <param name="zipStream"></param>
            <returns></returns>
        </member>
        <member name="P:TinyFx.IO.CsvFile.FileName">
            <summary>
            CSV文件
            </summary>
        </member>
        <member name="P:TinyFx.IO.CsvFile.Encoding">
            <summary>
            字符集
            </summary>
        </member>
        <member name="P:TinyFx.IO.CsvFile.FieldTerminator">
            <summary>
            字段间隔
            </summary>
        </member>
        <member name="P:TinyFx.IO.CsvFile.HasHeader">
            <summary>
            是否有Header
            </summary>
        </member>
        <member name="P:TinyFx.IO.CsvFile.LineTerminator">
            <summary>
            行间隔
            </summary>
        </member>
        <member name="M:TinyFx.IO.CsvFile.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="csvFile"></param>
        </member>
        <member name="F:TinyFx.IO.CsvFile.Headers">
            <summary>
            Headers
            </summary>
        </member>
        <member name="P:TinyFx.IO.CsvFile.HeaderNames">
            <summary>
            按Index排序后的HeaderNames
            </summary>
        </member>
        <member name="M:TinyFx.IO.CsvFile.AddHeader(System.String,System.Int32)">
            <summary>
            添加Header
            </summary>
            <param name="name"></param>
            <param name="index"></param>
        </member>
        <member name="T:TinyFx.IO.IOUtil">
            <summary>
            IO辅助类
            file    => string   : File.ReadAllText
            file    => stream   : IOUtil.ReadFileToStream
            file    => bytes    : File.ReadAllBytes
            string  => file     : File.WriteAllText
            string  => stream   : IOUtil.ReadStreamToString
            string  => bytes    : Encoding.UTF8.GetBytes
            stream  => string   : IOUtil.ReadStreamToString
            stream  => file     : IOUtil.WriteStreamToFile
            stream  => bytes    : IOUtil.ReadStreamToBytes
            bytes   => stream   : new MemoryStream(bytes)
            bytes   => string   : Encoding.UTF8.GetString
            bytes   => file     : File.WriteAllBytes
            </summary>
        </member>
        <member name="M:TinyFx.IO.IOUtil.ReadStreamToBytes(System.IO.Stream,System.Boolean)">
            <summary>
            读取 Stream 到 byte[]
            </summary>
            <param name="stream">需要读取的Stream</param>
            <param name="isClose">读取完是否关闭Stream</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.WriteStreamToFile(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            将 Stream 写入文件 
            </summary>
            <param name="stream">流对象</param>
            <param name="path">文件名</param>
            <param name="encoding">Stream的字符集</param>
        </member>
        <member name="M:TinyFx.IO.IOUtil.ReadFileToStream(System.String)">
            <summary>
            从文件中读取到MemoryStream
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.ReadStreamToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            读取流到字符串
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.ReplaceTextFileContent(System.String,System.String,System.String)">
            <summary>
            替换文本文件内容
            </summary>
            <param name="file"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:TinyFx.IO.IOUtil.RemoveReadOnlyAttr(System.String)">
            <summary>
            移除指定文件夹的只读属性(包含这个文件夹下的所有文件)
            </summary>
            <param name="destDirectoryPath">目标文件夹</param>
        </member>
        <member name="M:TinyFx.IO.IOUtil.IsDir(System.String)">
            <summary>
            判断路径是否是目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.GetAbsolutePath(System.String,System.String)">
            <summary>
            获取绝对路径。可以将相对路径转成绝对路径（可以使用SetCurrentDirectory设置相对的当前目录）
            </summary>
            <param name="path"></param>
            <param name="currentDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.GetRelativePath(System.String,System.String)">
            <summary>
            获取相对路径。可将绝对路径转换成相对路径
            </summary>
            <param name="absolutePath">绝对路径</param>
            <param name="relativeTo">相对的目录</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.IO.IOUtil.DeleteAll(System.String)">
            <summary>
            删除目录中的所有
            </summary>
            <param name="targetDirectory"></param>
        </member>
        <member name="T:TinyFx.Log4net.ITinyLog">
            <summary>
            log4net封装ILog
            </summary>
        </member>
        <member name="P:TinyFx.Log4net.ITinyLog.CallerType">
            <summary>
            该方法的声明类型是该调用的日志记录系统中的堆栈边界
            </summary>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Debug(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Debug(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Error(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Error(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Fatal(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Fatal(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Info(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Info(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Warn(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.ITinyLog.Warn(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="T:TinyFx.Log4net.LogUtil">
            <summary>
            使用配置中的默认logger name来保存日志
            在root配置节中定义的默认配置
            </summary>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.GetDefaultLogger">
            <summary>
            获取默认Logger
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.GetLogger(System.String)">
            <summary>
            获取指定名称的logger
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Debug(System.Object)">
            <summary>
            记录Debug日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Debug(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug日志
            </summary>
            <param name="message">消息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Debug(System.Object,System.Exception)">
            <summary>
            记录Debug日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Debug(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Error(System.Object)">
            <summary>
            记录Error日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Error(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error日志
            </summary>
            <param name="message">消息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Error(System.Object,System.Exception)">
            <summary>
            记录Error日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Error(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Fatal(System.Object)">
            <summary>
            记录Fatal日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Fatal(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal日志
            </summary>
            <param name="message">消息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Fatal(System.Object,System.Exception)">
            <summary>
            记录Fatal日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Fatal(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Info(System.Object)">
            <summary>
            记录Info日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Info(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info日志
            </summary>
            <param name="message">消息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Info(System.Object,System.Exception)">
            <summary>
            记录Info日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Info(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Warn(System.Object)">
            <summary>
            记录Warn日志
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Warn(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn日志
            </summary>
            <param name="message">消息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Warn(System.Object,System.Exception)">
            <summary>
            记录Warn日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
        </member>
        <member name="M:TinyFx.Log4net.LogUtil.Warn(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn日志
            </summary>
            <param name="message">消息</param>
            <param name="exception">异常信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyAdoNetAppender.ResolveConnectionString(System.String@)">
            <summary>
            解析连接字符串从TinyFx.config
            </summary>
            <param name="connectionStringContext"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:TinyFx.Log4net.AdoNetAppender" /> class.
            </summary>
            <remarks>
            Public default constructor to initialize a new instance of this class.
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.ConnectionString">
            <summary>
            Gets or sets the database connection string that is used to connect to 
            the database.
            </summary>
            <value>
            The database connection string used to connect to the database.
            </value>
            <remarks>
            <para>
            The connections string is specific to the connection type.
            See <see cref="P:TinyFx.Log4net.AdoNetAppender.ConnectionType"/> for more information.
            </para>
            </remarks>
            <example>Connection string for MS Access via ODBC:
            <code>"DSN=MS Access Database;UID=admin;PWD=;SystemDB=C:\data\System.mdw;SafeTransactions = 0;FIL=MS Access;DriverID = 25;DBQ=C:\data\train33.mdb"</code>
            </example>
            <example>Another connection string for MS Access via ODBC:
            <code>"Driver={Microsoft Access Driver (*.mdb)};DBQ=C:\Work\cvs_root\log4net-1.2\access.mdb;UID=;PWD=;"</code>
            </example>
            <example>Connection string for MS Access via OLE DB:
            <code>"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\Work\cvs_root\log4net-1.2\access.mdb;User Id=;Password=;"</code>
            </example>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.AppSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.ConnectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
            <remarks>
            This property requires at least .NET 2.0.
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.ConnectionType">
            <summary>
            Gets or sets the type name of the <see cref="T:System.Data.IDbConnection"/> connection
            that should be created.
            </summary>
            <value>
            The type name of the <see cref="T:System.Data.IDbConnection"/> connection.
            </value>
            <remarks>
            <para>
            The type name of the ADO.NET provider to use.
            </para>
            <para>
            The default is to use the OLE DB provider.
            </para>
            </remarks>
            <example>Use the OLE DB Provider. This is the default value.
            <code>System.Data.OleDb.OleDbConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the MS SQL Server Provider. 
            <code>System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            </example>
            <example>Use the ODBC Provider. 
            <code>Microsoft.Data.Odbc.OdbcConnection,Microsoft.Data.Odbc,version=1.0.3300.0,publicKeyToken=b77a5c561934e089,culture=neutral</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>ODBC .NET Data Provider</b>.
            </example>
            <example>Use the Oracle Provider. 
            <code>System.Data.OracleClient.OracleConnection, System.Data.OracleClient, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</code>
            This is an optional package that you can download from 
            <a href="http://msdn.microsoft.com/downloads">http://msdn.microsoft.com/downloads</a> 
            search for <b>.NET Managed Provider for Oracle</b>.
            </example>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.CommandText">
            <summary>
            Gets or sets the command text that is used to insert logging events
            into the database.
            </summary>
            <value>
            The command text used to insert logging events into the database.
            </value>
            <remarks>
            <para>
            Either the text of the prepared statement or the
            name of the stored procedure to execute to write into
            the database.
            </para>
            <para>
            The <see cref="P:TinyFx.Log4net.AdoNetAppender.CommandType"/> property determines if
            this text is a prepared statement or a stored procedure.
            </para>
            <para>
            If this property is not set, the command text is retrieved by invoking
            <see cref="M:TinyFx.Log4net.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.CommandType">
            <summary>
            Gets or sets the command type to execute.
            </summary>
            <value>
            The command type to execute.
            </value>
            <remarks>
            <para>
            This value may be either <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>) to specify
            that the <see cref="P:TinyFx.Log4net.AdoNetAppender.CommandText"/> is a prepared statement to execute, 
            or <see cref="F:System.Data.CommandType.StoredProcedure"/> (<c>System.Data.CommandType.StoredProcedure</c>) to specify that the
            <see cref="P:TinyFx.Log4net.AdoNetAppender.CommandText"/> property is the name of a stored procedure
            to execute.
            </para>
            <para>
            The default value is <see cref="F:System.Data.CommandType.Text"/> (<c>System.Data.CommandType.Text</c>).
            </para>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.UseTransactions">
            <summary>
            Should transactions be used to insert logging events in the database.
            </summary>
            <value>
            <c>true</c> if transactions should be used to insert logging events in
            the database, otherwise <c>false</c>. The default value is <c>true</c>.
            </value>
            <remarks>
            <para>
            Gets or sets a value that indicates whether transactions should be used
            to insert logging events in the database.
            </para>
            <para>
            When set a single transaction will be used to insert the buffered events
            into the database. Otherwise each event will be inserted without using
            an explicit transaction.
            </para>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.SecurityContext">
            <summary>
            Gets or sets the <see cref="P:TinyFx.Log4net.AdoNetAppender.SecurityContext"/> used to call the NetSend method.
            </summary>
            <value>
            The <see cref="P:TinyFx.Log4net.AdoNetAppender.SecurityContext"/> used to call the NetSend method.
            </value>
            <remarks>
            <para>
            Unless a <see cref="P:TinyFx.Log4net.AdoNetAppender.SecurityContext"/> specified here for this appender
            the <see cref="P:log4net.Core.SecurityContextProvider.DefaultProvider"/> is queried for the
            security context to use. The default behavior is to use the security context
            of the current thread.
            </para>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.ReconnectOnError">
            <summary>
            Should this appender try to reconnect to the database on error.
            </summary>
            <value>
            <c>true</c> if the appender should try to reconnect to the database after an
            error has occurred, otherwise <c>false</c>. The default value is <c>false</c>, 
            i.e. not to try to reconnect.
            </value>
            <remarks>
            <para>
            The default behaviour is for the appender not to try to reconnect to the
            database if an error occurs. Subsequent logging events are discarded.
            </para>
            <para>
            To force the appender to attempt to reconnect to the database set this
            property to <c>true</c>.
            </para>
            <note>
            When the appender attempts to connect to the database there may be a
            delay of up to the connection timeout specified in the connection string.
            This delay will block the calling application's thread. 
            Until the connection can be reestablished this potential delay may occur multiple times.
            </note>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppender.Connection">
            <summary>
            Gets or sets the underlying <see cref="T:System.Data.IDbConnection" />.
            </summary>
            <value>
            The underlying <see cref="T:System.Data.IDbConnection" />.
            </value>
            <remarks>
            <see cref="T:TinyFx.Log4net.AdoNetAppender" /> creates a <see cref="T:System.Data.IDbConnection" /> to insert 
            logging events into a database.  Classes deriving from <see cref="T:TinyFx.Log4net.AdoNetAppender" /> 
            can use this property to get or set this <see cref="T:System.Data.IDbConnection" />.  Use the 
            underlying <see cref="T:System.Data.IDbConnection" /> returned from <see cref="P:TinyFx.Log4net.AdoNetAppender.Connection" /> if 
            you require access beyond that which <see cref="T:TinyFx.Log4net.AdoNetAppender" /> provides.
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.ActivateOptions">
            <summary>
            Initialize the appender based on the options set
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:log4net.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:TinyFx.Log4net.AdoNetAppender.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:TinyFx.Log4net.AdoNetAppender.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:TinyFx.Log4net.AdoNetAppender.ActivateOptions"/> must be called again.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.OnClose">
            <summary>
            Override the parent method to close the database
            </summary>
            <remarks>
            <para>
            Closes the database command and database connection.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.SendBuffer(log4net.Core.LoggingEvent[])">
            <summary>
            Inserts the events into the database.
            </summary>
            <param name="events">The events to insert into the database.</param>
            <remarks>
            <para>
            Insert all the events specified in the <paramref name="events"/>
            array into the database.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.AddParameter(TinyFx.Log4net.AdoNetAppenderParameter)">
            <summary>
            Adds a parameter to the command.
            </summary>
            <param name="parameter">The parameter to add to the command.</param>
            <remarks>
            <para>
            Adds a parameter to the ordered list of command parameters.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,log4net.Core.LoggingEvent[])">
            <summary>
            Writes the events to the database using the transaction specified.
            </summary>
            <param name="dbTran">The transaction that the events will be executed under.</param>
            <param name="events">The array of events to insert into the database.</param>
            <remarks>
            <para>
            The transaction argument can be <c>null</c> if the appender has been
            configured not to use transactions. See <see cref="P:TinyFx.Log4net.AdoNetAppender.UseTransactions"/>
            property for more information.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.GetLogStatement(log4net.Core.LoggingEvent)">
            <summary>
            Formats the log message into database statement text.
            </summary>
            <param name="logEvent">The event being logged.</param>
            <remarks>
            This method can be overridden by subclasses to provide 
            more control over the format of the database statement.
            </remarks>
            <returns>
            Text that can be passed to a <see cref="T:System.Data.IDbCommand"/>.
            </returns>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.CreateConnection(System.Type,System.String)">
            <summary>
            Creates an <see cref="T:System.Data.IDbConnection"/> instance used to connect to the database.
            </summary>
            <remarks>
            This method is called whenever a new IDbConnection is needed (i.e. when a reconnect is necessary).
            </remarks>
            <param name="connectionType">The <see cref="T:System.Type"/> of the <see cref="T:System.Data.IDbConnection"/> object.</param>
            <param name="connectionString">The connectionString output from the ResolveConnectionString method.</param>
            <returns>An <see cref="T:System.Data.IDbConnection"/> instance with a valid connection string.</returns>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.ResolveConnectionString(System.String@)">
            <summary>
            Resolves the connection string from the ConnectionString, ConnectionStringName, or AppSettingsKey
            property.
            </summary>
            <remarks>
            ConnectiongStringName is only supported on .NET 2.0 and higher.
            </remarks>
            <param name="connectionStringContext">Additional information describing the connection string.</param>
            <returns>A connection string used to connect to the database.</returns>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.ResolveConnectionType">
            <summary>
            Retrieves the class type of the ADO.NET provider.
            </summary>
            <remarks>
            <para>
            Gets the Type of the ADO.NET provider to use to connect to the
            database. This method resolves the type specified in the 
            <see cref="P:TinyFx.Log4net.AdoNetAppender.ConnectionType"/> property.
            </para>
            <para>
            Subclasses can override this method to return a different type
            if necessary.
            </para>
            </remarks>
            <returns>The <see cref="T:System.Type"/> of the ADO.NET provider</returns>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.InitializeDatabaseConnection">
            <summary>
            Connects to the database.
            </summary>		
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppender.DiposeConnection">
            <summary>
            Cleanup the existing connection.
            </summary>
            <remarks>
            Calls the IDbConnection's <see cref="M:System.Data.IDbConnection.Close"/> method.
            </remarks>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_parameters">
            <summary>
            The list of <see cref="T:TinyFx.Log4net.AdoNetAppenderParameter"/> objects.
            </summary>
            <remarks>
            <para>
            The list of <see cref="T:TinyFx.Log4net.AdoNetAppenderParameter"/> objects.
            </para>
            </remarks>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_securityContext">
            <summary>
            The security context to use for privileged calls
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_dbConnection">
            <summary>
            The <see cref="T:System.Data.IDbConnection" /> that will be used
            to insert logging events into a database.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_connectionString">
            <summary>
            Database connection string.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_appSettingsKey">
            <summary>
            The appSettings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_connectionStringName">
            <summary>
            The connectionStrings key from App.Config that contains the connection string.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_connectionType">
            <summary>
            String type name of the <see cref="T:System.Data.IDbConnection"/> type name.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_commandText">
            <summary>
            The text of the command.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_commandType">
            <summary>
            The command type.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_useTransactions">
            <summary>
            Indicates whether to use transactions when writing to the database.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.m_reconnectOnError">
            <summary>
            Indicates whether to reconnect when a connection is lost.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppender.declaringType">
            <summary>
            The fully qualified type of the AdoNetAppender class.
            </summary>
            <remarks>
            Used by the internal logger to record the Type of the
            log message.
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppenderParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TinyFx.Log4net.AdoNetAppenderParameter" /> class.
            </summary>
            <remarks>
            Default constructor for the AdoNetAppenderParameter class.
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.ParameterName">
            <summary>
            Gets or sets the name of this parameter.
            </summary>
            <value>
            The name of this parameter.
            </value>
            <remarks>
            <para>
            The name of this parameter. The parameter name
            must match up to a named parameter to the SQL stored procedure
            or prepared statement.
            </para>
            </remarks>
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.DbType">
            <summary>
            Gets or sets the database type for this parameter.
            </summary>
            <value>
            The database type for this parameter.
            </value>
            <remarks>
            <para>
            The database type for this parameter. This property should
            be set to the database type from the <see cref="P:TinyFx.Log4net.AdoNetAppenderParameter.DbType"/>
            enumeration. See <see cref="P:System.Data.IDataParameter.DbType"/>.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the type from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDataParameter.DbType" />
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.Precision">
            <summary>
            Gets or sets the precision for this parameter.
            </summary>
            <value>
            The precision for this parameter.
            </value>
            <remarks>
            <para>
            The maximum number of digits used to represent the Value.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the precision from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Precision" />
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.Scale">
            <summary>
            Gets or sets the scale for this parameter.
            </summary>
            <value>
            The scale for this parameter.
            </value>
            <remarks>
            <para>
            The number of decimal places to which Value is resolved.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the scale from the value.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Scale" />
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.Size">
            <summary>
            Gets or sets the size for this parameter.
            </summary>
            <value>
            The size for this parameter.
            </value>
            <remarks>
            <para>
            The maximum size, in bytes, of the data within the column.
            </para>
            <para>
            This property is optional. If not specified the ADO.NET provider 
            will attempt to infer the size from the value.
            </para>
            <para>
            For BLOB data types like VARCHAR(max) it may be impossible to infer the value automatically, use -1 as the size in this case.
            </para>
            </remarks>
            <seealso cref="P:System.Data.IDbDataParameter.Size" />
        </member>
        <member name="P:TinyFx.Log4net.AdoNetAppenderParameter.Layout">
            <summary>
            Gets or sets the <see cref="T:log4net.Layout.IRawLayout"/> to use to 
            render the logging event into an object for this 
            parameter.
            </summary>
            <value>
            The <see cref="T:log4net.Layout.IRawLayout"/> used to render the
            logging event into an object for this parameter.
            </value>
            <remarks>
            <para>
            The <see cref="T:log4net.Layout.IRawLayout"/> that renders the value for this
            parameter.
            </para>
            <para>
            The <see cref="T:log4net.Layout.RawLayoutConverter"/> can be used to adapt
            any <see cref="T:log4net.Layout.ILayout"/> into a <see cref="T:log4net.Layout.IRawLayout"/>
            for use in the property.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
            <summary>
            Prepare the specified database command object.
            </summary>
            <param name="command">The command to prepare.</param>
            <remarks>
            <para>
            Prepares the database command object by adding
            this parameter to its collection of parameters.
            </para>
            </remarks>
        </member>
        <member name="M:TinyFx.Log4net.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,log4net.Core.LoggingEvent)">
            <summary>
            Renders the logging event and set the parameter value in the command.
            </summary>
            <param name="command">The command containing the parameter.</param>
            <param name="loggingEvent">The event to be rendered.</param>
            <remarks>
            <para>
            Renders the logging event using this parameters layout
            object. Sets the value of the parameter on the command object.
            </para>
            </remarks>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_parameterName">
            <summary>
            The name of this parameter.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_dbType">
            <summary>
            The database type for this parameter.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_inferType">
            <summary>
            Flag to infer type rather than use the DbType
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_precision">
            <summary>
            The precision for this parameter.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_scale">
            <summary>
            The scale for this parameter.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_size">
            <summary>
            The size for this parameter.
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.AdoNetAppenderParameter.m_layout">
            <summary>
            The <see cref="T:log4net.Layout.IRawLayout"/> to use to render the
            logging event into an object for this parameter.
            </summary>
        </member>
        <member name="T:TinyFx.Log4net.TinyLogImpl">
            <summary>
            TinyFx的Log类
            记录日志时properties参数说明：
                配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取
                例如：Debug("日志记录信息", ("ID", 1), ("NAME", "johny"));
            </summary>
        </member>
        <member name="P:TinyFx.Log4net.TinyLogImpl.CallerType">
            <summary>
            该方法的声明类型是该调用的日志记录系统中的堆栈边界
            </summary>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            构造函数
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Debug(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Debug(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Debug级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Error(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Error(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Error级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Fatal(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Fatal(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Fatal级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Info(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Info(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Info级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Warn(System.Object,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogImpl.Warn(System.Object,System.Exception,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            记录Warn级别日志
            </summary>
            <param name="message">日志信息</param>
            <param name="exception">异常</param>
            <param name="properties">属性信息集合【配置中可通过log4net.Layout.PatternLayout的%property{key}格式获取】</param>
        </member>
        <member name="T:TinyFx.Log4net.TinyLogManager">
            <summary>
            创建Log的静态管理器
            </summary>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.Exists(System.String)">
            <summary>
            如果存在返回ILog否则null
            </summary>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.Exists(System.String,System.String)">
            <summary>
            如果存在返回ILog否则null
            </summary>
            <param name="repository">logger所在repository</param>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            如果存在返回ILog否则null
            </summary>
            <param name="assembly">查找domain中的assembly</param>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetCurrentLoggers">
            <summary>
            返回默认repository中的所有loggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetCurrentLoggers(System.String)">
            <summary>
            返回repository中的所有loggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            返回assembly中的所有loggers
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.String)">
            <summary>
            获取指定Logger Name的logger【log4net.config中配置】
            </summary>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.String,System.String)">
            <summary>
            获取repository中指定Logger Name的logger
            </summary>
            <param name="repository">logger所在repository</param>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            获取assembly中指定Logger Name的logger
            </summary>
            <param name="assembly">logger所在assembly</param>
            <param name="name">log4net.config中配置的Logger Name</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.Type)">
            <summary>
            获取name为type.FullName的logger
            </summary>
            <param name="type">将作为logger名称的Type</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.String,System.Type)">
            <summary>
            获取name为type.FullName的logger
            </summary>
            <param name="repository">type所在repository</param>
            <param name="type">将作为logger名称的Type</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            获取name为type.FullName的logger
            </summary>
            <param name="assembly">type所在assembly</param>
            <param name="type">将作为logger名称的Type</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Log4net.TinyLogProperties">
            <summary>
            自定义log4net的properties
            配置文件中可通过log4net.Layout.PatternLayout的%property{key}格式获取
            </summary>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogProperties.AddTinyLogProperties(log4net.Util.PropertiesDictionary,System.Exception)">
            <summary>
            处理
            </summary>
            <param name="properties"></param>
            <param name="exp"></param>
        </member>
        <member name="M:TinyFx.Log4net.TinyLogProperties.AddConstProperty(System.String,System.String)">
            <summary>
            添加常量参数
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="F:TinyFx.Log4net.TinyLogProperties.ProjectId">
            <summary>
            项目标识
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.TinyLogProperties.HostIp">
            <summary>
            IP地址，可以是服务器地址，也可以是来源地址
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.TinyLogProperties.HostName">
            <summary>
            主机名称
            </summary>
        </member>
        <member name="F:TinyFx.Log4net.TinyLogProperties.ExpUserData">
            <summary>
            异常用户数据
            </summary>
        </member>
        <member name="T:TinyFx.Net.FtpClient">
            <summary>
            FTP客户端类，用于简单连接FTP服务器
            例如：
            FtpClient ftp = new FtpClient("172.28.19.61", 21, "Administrator", "create");
            ftp.UploadFile("/1.txt", "d:\1.txt");
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Server">
            <summary>
            获取FTP服务器地址: 192.168.0.1或机器名
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Port">
            <summary>
            获取FTP端口
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Username">
            <summary>
            获取FTP帐户名
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Password">
            <summary>
            获取FTP帐户密码
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.UseBinary">
            <summary>
            获取或设置指定文件传输的数据类型，默认为true
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.KeepAlive">
            <summary>
            获取或设置请求完成后是否关闭连接，默认为true
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.UsePassive">
            <summary>
            获取或设置是否使用被动模式(PASV)[主动模式(PORT)]，默认为true
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.EnableSsl">
            <summary>
            获取或设置 Boolean，它指定是否使用 SSL 连接。默认为false
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.ClientCertificate">
            <summary>
            获取或设置用于建立到 FTP 服务器的加密连接的证书
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.BufferSize">
            <summary>
            获取或设置上传下载时缓存大小，默认2048
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Encoding">
            <summary>
            字符集
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.Timeout">
            <summary>
            获取或设置等待请求的毫秒数。默认30秒
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpClient.CurrentPath">
            <summary>
            当前服务器路径
            操作时都是基于此路径之上的，如：当前路径/root 调用GetFileInfo("/mydir/1.txt")时最终访问的是服务器/root/mydir/1.txt
            </summary>
        </member>
        <member name="M:TinyFx.Net.FtpClient.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="server">FTP服务器地址</param>
            <param name="port">FTP端口,FTP默认端口是21</param>
            <param name="userName">FTP帐户名</param>
            <param name="password">FTP帐户密码</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.GetFileSize(System.String)">
            <summary>
            获得文件大小
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.GetFileInfo(System.String)">
            <summary>
            获得指定路径的文件信息
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.List(System.String)">
            <summary>
            获得指定路径的FTP详细信息列表
            </summary>
            <param name="path">FTP相对路径，如：/root/mydir</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.IsFile(System.String)">
            <summary>
            判断指定的路径是否是文件
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.IsExist(System.String)">
            <summary>
            判断文件或目录是否存在
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt或/root/mydir</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.MakeDir(System.String,System.Boolean)">
            <summary>
            创建目录
            </summary>
            <param name="path">FTP相对路径，如：/root/mydir</param>
            <param name="isMakeParent">是否创建父路径</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.Rename(System.String,System.String)">
            <summary>
            修改目录或文件的名称
            </summary>
            <param name="oldName">旧名称，必须包含FTP相对路径，如：/root/old.txt或/root/mydir</param>
            <param name="newName">新名称，可包含路径（意味着移动），如：/newdir/new.txt或new.txt</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.Move(System.String,System.String)">
            <summary>
            移动目录或文件
            </summary>
            <param name="oldName">源名称，必须包含FTP相对路径，如：/root/1.txt 或/root/source</param>
            <param name="newName">新名称，包含路径和目标名称，如：/newroot/1.txt或/newroot/source</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DeleteDir(System.String)">
            <summary>
            删除目录包括子目录
            </summary>
            <param name="path">FTP相对路径，如：/root/mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.Delete(System.String)">
            <summary>
            删除文件或目录
            </summary>
            <param name="path">FTP相对路径，如：/root/1.txt或/root/mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.UploadStream(System.String,System.IO.Stream)">
            <summary>
            根据数据流上传文件
            </summary>
            <param name="path">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <param name="input">文件数据流</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.UploadData(System.String,System.Byte[])">
            <summary>
            根据字节数组上传文件
            </summary>
            <param name="path">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <param name="data">文件数据</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="serverPath">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <param name="localPath">本地文件路径（包含文件名），如：C:\1.txt</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.UploadDir(System.String,System.String)">
            <summary>
            上传目录
            </summary>
            <param name="serverPath">FTP相对路径（包含目录名），如：/root/mydir</param>
            <param name="localPath">本地目录路径（包含目录名），如：C:\mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.Upload(System.String,System.String)">
            <summary>
            上传文件或目录
            </summary>
            <param name="serverPath">FTP相对路径（包含文件名或目录名），如：/root/1.txt或/root/mydir</param>
            <param name="localPath">本地路径（包含文件名或目录名），如：C:\1.txt或C:\mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DownloadStream(System.String)">
            <summary>
            下载文件的数据流
            </summary>
            <param name="path">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DownloadData(System.String)">
            <summary>
            下载文件的字节数组
            </summary>
            <param name="path">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DownloadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="serverPath">FTP相对路径（包含文件名），如：/root/1.txt</param>
            <param name="localPath">本地文件路径（包含文件名），如：C:\1.txt</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.DownloadDir(System.String,System.String)">
            <summary>
            下载目录
            </summary>
            <param name="serverPath">FTP相对路径（包含目录名），如：/root/mydir</param>
            <param name="localPath">本地目录路径（包含目录名），如：C:\mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.Download(System.String,System.String)">
            <summary>
            下载文件或目录
            </summary>
            <param name="serverPath">FTP相对路径（包含文件名或目录名），如：/root/1.txt或/root/mydir</param>
            <param name="localPath">本地路径（包含文件名或目录名），如：C:\1.txt或C:\mydir</param>
        </member>
        <member name="M:TinyFx.Net.FtpClient.GetFtpPath(System.String)">
            <summary>
            获得FTP全路径
            </summary>
            <param name="path">相对路径</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.FtpClient.FormatFileSize(System.Int64)">
            <summary>
            获得文件大小字符串表示，以KB MB GB结尾
            </summary>
            <param name="fileSize"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.FtpFileInfo">
            <summary>
            FTP服务器列表文件信息
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpFileInfo.Name">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpFileInfo.Size">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpFileInfo.IsDir">
            <summary>
            是否是文件夹
            </summary>
        </member>
        <member name="P:TinyFx.Net.FtpFileInfo.ModifyDate">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="M:TinyFx.Net.FtpFileInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TinyFx.Net.FtpFileInfo.#ctor(System.String,System.Int64,System.Boolean,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="name">文件名</param>
            <param name="size">文件大小</param>
            <param name="isDir">是否是文件夹</param>
            <param name="modifyDate">修改时间</param>
        </member>
        <member name="T:TinyFx.Net.HttpClientEx">
            <summary>
            HttpClient扩展
            </summary>
        </member>
        <member name="T:TinyFx.Net.HttpGetRequest">
            <summary>
            HTTP GET 请求类
            </summary>
        </member>
        <member name="M:TinyFx.Net.HttpGetRequest.#ctor(System.String,System.Text.Encoding,System.Net.CookieCollection)">
            <summary>
            构造函数
            </summary>
            <param name="url">URL</param>
            <param name="encoding">字符集</param>
            <param name="cookies">Cookies</param>
        </member>
        <member name="M:TinyFx.Net.HttpGetRequest.GetResponse">
            <summary>
            获得Response对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.HttpPostContentType">
            <summary>
            ContentType类型
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.FormUrlencoded">
            <summary>
            表单数据处理为键值对
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.FormData">
            <summary>
            表单数据处理为一条消息。以标签为单元，用分隔符分开。既可以上传键值队，也可以上传文件
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.Binary">
            <summary>
            上传二进制数据。一次只能上传一个文件
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.Text">
            <summary>
            TEXT
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.JSON">
            <summary>
            JSON
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.Javascript">
            <summary>
            Javascript
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostContentType.HTML">
            <summary>
            HTML
            </summary>
        </member>
        <member name="T:TinyFx.Net.HttpPostMethod">
            <summary>
            http提交模式
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.FormData">
            <summary>
            表单数据处理为一条消息。以标签为单元，用分隔符分开。既可以上传键值队，也可以上传文件
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.FormUrlencoded">
            <summary>
            表单数据处理为键值对
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.Binary">
            <summary>
            上传二进制数据。一次只能上传一个文件
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.Text">
            <summary>
            TEXT
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.JSON">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.Javascript">
            <summary>
            Javascript
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.Xml">
            <summary>
            xml
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostMethod.HTML">
            <summary>
            html
            </summary>
        </member>
        <member name="T:TinyFx.Net.HttpPostRequest">
            <summary>
            HTTP POST 请求类
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpPostRequest.PostMethod">
            <summary>
            Post Method模式
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpPostRequest.RefererAspNetWebFormHtml">
            <summary>
            上一个AspNet WebForm页面的HTML
            </summary>
        </member>
        <member name="M:TinyFx.Net.HttpPostRequest.#ctor(System.String,System.Text.Encoding,System.Net.CookieCollection)">
            <summary>
            构造函数
            </summary>
            <param name="url">URL</param>
            <param name="encoding">字符集</param>
            <param name="cookies">Cookies</param>
        </member>
        <member name="F:TinyFx.Net.HttpPostRequest.FormDatas">
            <summary>
            表单数据
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpPostRequest.UploadFiles">
            <summary>
            上传文件列表
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpPostRequest.PostContent">
            <summary>
            提交文本内容，包含：text, json, javascript, xml, html
            </summary>
        </member>
        <member name="M:TinyFx.Net.HttpPostRequest.AddUploadFile(System.String,System.IO.Stream)">
            <summary>
            添加上传文件
            </summary>
            <param name="filename"></param>
            <param name="fileStream"></param>
        </member>
        <member name="M:TinyFx.Net.HttpPostRequest.AddUploadFile(System.String,System.String,System.IO.Stream)">
            <summary>
            添加上传文件
            </summary>
            <param name="key"></param>
            <param name="fileName"></param>
            <param name="fileStream"></param>
        </member>
        <member name="M:TinyFx.Net.HttpPostRequest.AddFormData(System.String,System.String)">
            <summary>
            添加表单数据
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Net.HttpPostRequest.GetResponse">
            <summary>
            获得Response对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.HttpRequestBase">
            <summary>
            HTTP Web请求基类
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.BaseUrl">
            <summary>
            基础URL
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.UseHttps">
            <summary>
            是否HTTPS访问
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.CertificatePath">
            <summary>
            证书所在路径
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.Method">
            <summary>
            请求GET/POST
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.Encoding">
            <summary>
            字符集
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.RefererUrl">
            <summary>
            上一个引用URL
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.UserAgent">
            <summary>
            UserAgent
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.Timeout">
            <summary>
            请求超时
            </summary>
        </member>
        <member name="P:TinyFx.Net.HttpRequestBase.KeepAlive">
            <summary>
            是否与 Internet 资源建立持续型连接
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpRequestBase.UrlParams">
            <summary>
            Request's URL参数
            </summary>
        </member>
        <member name="F:TinyFx.Net.HttpRequestBase.Headers">
            <summary>
            Request's Headers
            </summary>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.#ctor(System.String,System.Text.Encoding,System.Net.CookieCollection)">
            <summary>
            构造函数
            </summary>
            <param name="url">URL</param>
            <param name="encoding">字符集</param>
            <param name="cookies">Cookies</param>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.AddUrlParam(System.String,System.String)">
            <summary>
            添加URL参数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.AddUrlParam(System.String)">
            <summary>
            添加URL参数
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.GetUrl">
            <summary>
            获取完整URL
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.AddHeader(System.Net.HttpRequestHeader,System.String)">
            <summary>
            添加Request's Header
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.AppendHeaders(System.Net.HttpWebRequest)">
            <summary>
            修改Request添加Headers
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.CreateRequest">
            <summary>
            创建Request
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.GetResponse">
            <summary>
            获取Response
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.GetString(System.Net.HttpWebResponse)">
            <summary>
            获取Response内容的String表示
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.GetResponseString">
            <summary>
            获取返回的String类型表示
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.HttpRequestBase.GetDecompressStream(System.Net.HttpWebResponse)">
            <summary>
            获取解压缩的流
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.IpAddressParser">
            <summary>
            IP地址解析器
            用于获取IP地址类型，整值，区域信息
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.Ip">
            <summary>
            获取当前的IP地址
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.LongValue">
            <summary>
            获取IP对应的long值
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.IpMode">
            <summary>
            获取IP地址类型
            </summary>
        </member>
        <member name="M:TinyFx.Net.IpAddressParser.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:TinyFx.Net.IpAddressParser.GetIpMode(System.String)">
            <summary>
            获取IP地址类型
            </summary>
            <param name="ip">IP地址</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.IpAddressParser.IpModeValue">
            <summary>
            IP值区间段对应的地址类型
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.IpModeValue.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.IpModeValue.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:TinyFx.Net.IpAddressParser.IpModeValue.Mode">
            <summary>
            IP地址类型
            </summary>
        </member>
        <member name="M:TinyFx.Net.IpAddressParser.ToString">
            <summary>
            重写输出IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.IpAddressMode">
            <summary>
            IP地址类型
            </summary>
        </member>
        <member name="F:TinyFx.Net.IpAddressMode.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TinyFx.Net.IpAddressMode.Public">
            <summary>
            公网地址
            </summary>
        </member>
        <member name="F:TinyFx.Net.IpAddressMode.Private">
            <summary>
            内网地址
            10.0.0.0 - 10.255.255.255 
            172.16.0.0 - 172.31.255.255 
            192.168.0.0 - 192.168.255.555  
            </summary>
        </member>
        <member name="F:TinyFx.Net.IpAddressMode.Loopback">
            <summary>
            环回地址 127.0.0.1 - 127.255.255.254
            </summary>
        </member>
        <member name="F:TinyFx.Net.IpAddressMode.Multicast">
            <summary>
            多播地址 224.0.0.0到239.255.255.255
            </summary>
        </member>
        <member name="T:TinyFx.Net.Mobile.ICCIDParser">
            <summary>
            手机的ICCID解析类
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.ICCIDParser.Telecom">
            <summary>
            电信运营商类型
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.ICCIDParser.YearString">
            <summary>
            生产年份字符串，如：12 代表2012
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.ICCIDParser.Year">
            <summary>
            制卡年份
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.ICCIDParser.ProvinceString">
            <summary>
            解析的省份字符串
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.ICCIDParser.Province">
            <summary>
            省市
            </summary>
        </member>
        <member name="M:TinyFx.Net.Mobile.ICCIDParser.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="iccid"></param>
        </member>
        <member name="M:TinyFx.Net.Mobile.ICCIDParser.ParseChinaMobile(System.String)">
            <summary>
            解析中国移动iccid
            号码规则：898600(898602) MFSS YYGXX XXXXP
            规则解析：
                M - 用户号码前3位。0：159 1：158 2：150 3：151 4-9：134-139 A：157 B：188 C：152 D：147 E：187
                F - 用户号码第 4 位
                SS - 省份 
                YY - 编制 ICCID 时年号的后两位
                G - SIM卡供应商
                P - 校验位
            </summary>
            <param name="iccid"></param>
        </member>
        <member name="M:TinyFx.Net.Mobile.ICCIDParser.ParseChinaUnicom(System.String)">
            <summary>
            解析联通iccid
            号码位置：898601(898609) Y1Y2 MH0 A1A2A3 N1N2N3N4N5N6 S
            位置解析：
                Y1Y2 - 制卡年号 
                M - 手机号码前三位的最后一位,例如130的0 
                A1A2A3 - 地区号 如上海区号为010，为‘010’;长沙区号为0731，则为‘731’
                N1N2N3N4N5N6 - 6位流水号
                S - SIM卡供应商
            </summary>
            <param name="iccid"></param>
        </member>
        <member name="M:TinyFx.Net.Mobile.ICCIDParser.ParseChinaTelecom(System.String)">
            <summary>
            解析电信iccid 898603，898606
            898606 MY1Y2H1H2H3 XXXXXXXX
            898603 YYXMHHHXXXXXXP
                YY - 年
                HHH - 地区代码
            </summary>
            <param name="iccid"></param>
        </member>
        <member name="T:TinyFx.Net.Mobile.IMSIParser">
            <summary>
            手机IMSI解析类
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.Telecom">
            <summary>
            运营商类型 0-未知 1-移动 2-联通 3-电信
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.IMSI">
            <summary>
            IMSI号
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.MCC">
            <summary>
            MCC
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.MNC">
            <summary>
            MNC
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.MIN">
            <summary>
            MIN
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.Segment">
            <summary>
            手机号段,如1330102
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.IMSIParser.Province">
            <summary>
            省市
            </summary>
        </member>
        <member name="M:TinyFx.Net.Mobile.IMSIParser.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="imsi"></param>
        </member>
        <member name="T:TinyFx.Net.Mobile.MobileParser">
            <summary>
            手机号解析类。可根据手机号获取运营商类型和所在省市
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.MobileParser.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.MobileParser.Telecom">
            <summary>
            电信运营商类型
            </summary>
        </member>
        <member name="P:TinyFx.Net.Mobile.MobileParser.Province">
            <summary>
            省市
            </summary>
        </member>
        <member name="M:TinyFx.Net.Mobile.MobileParser.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="mobile"></param>
        </member>
        <member name="M:TinyFx.Net.Mobile.MobileParser.GetTelecom(System.String)">
            <summary>
            获取手机号所在运营商
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.Mobile.MobileParser.GetProvince(System.String)">
            <summary>
            根据手机号获取省信息
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.Mobile.TelecomMode">
            <summary>
            运营商类型
            </summary>
        </member>
        <member name="F:TinyFx.Net.Mobile.TelecomMode.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:TinyFx.Net.Mobile.TelecomMode.ChinaMobile">
            <summary>
            移动
            </summary>
        </member>
        <member name="F:TinyFx.Net.Mobile.TelecomMode.ChinaUnicom">
            <summary>
            联通
            </summary>
        </member>
        <member name="F:TinyFx.Net.Mobile.TelecomMode.ChinaTelecom">
            <summary>
            电信
            </summary>
        </member>
        <member name="T:TinyFx.Net.NetUtil">
            <summary>
            网络通用类
            </summary>
        </member>
        <member name="M:TinyFx.Net.NetUtil.GetIpString(System.Int64)">
            <summary>
            转换long类型的IP值为字符串类型的IP地址
            </summary>
            <param name="ip">long类型的IP值</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.NetUtil.GetIpLong(System.String)">
            <summary>
            转换字符串类型的IP地址为long类型的值
            </summary>
            <param name="ip">IP地址，如：127.0.0.1</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.NetUtil.GetIpMode(System.String)">
            <summary>
            获取IP地址类型
            </summary>
            <param name="ip">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.NetUtil.GetInterIps">
            <summary>
            获取本机内网IP集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Net.NetUtil.GetInterIp">
            <summary>
            获取IPv4地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Net.SmtpClientEx">
            <summary>
            SmtpClient封装扩展
            </summary>
        </member>
        <member name="M:TinyFx.Net.SmtpClientEx.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="T:TinyFx.Net.WebApiClient">
            <summary>
            Web API访问客户端
            </summary>
        </member>
        <member name="P:TinyFx.Net.WebApiClient.DecompressionMethod">
            <summary>
            压缩模式
            </summary>
        </member>
        <member name="P:TinyFx.Net.WebApiClient.Formatter">
            <summary>
            Web API传输格式
            </summary>
        </member>
        <member name="P:TinyFx.Net.WebApiClient.BaseAddress">
            <summary>
            Web API基地址
            </summary>
        </member>
        <member name="M:TinyFx.Net.WebApiClient.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="baseAddress"></param>
        </member>
        <member name="T:TinyFx.Net.WebApiResultFormatters">
            <summary>
            Web API返回值格式
            </summary>
        </member>
        <member name="F:TinyFx.Net.WebApiResultFormatters.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:TinyFx.Net.WebApiResultFormatters.Xml">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:TinyFx.Net.WebApiResultFormatters.Json">
            <summary>
            JSON
            </summary>
        </member>
        <member name="T:TinyFx.Reflection.AssemblyPublishDateAttribute">
            <summary>
            Assembly发布日期
            [assembly: AssemblyPublishDate("2016-06-20")]
            </summary>
        </member>
        <member name="P:TinyFx.Reflection.AssemblyPublishDateAttribute.PublishDate">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="M:TinyFx.Reflection.AssemblyPublishDateAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="publishDate"></param>
        </member>
        <member name="M:TinyFx.Reflection.AssemblyPublishDateAttribute.GetAttribute(System.Reflection.Assembly)">
            <summary>
            获取指定Assembly中定义的AssemblyPublishDateAttribute
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Reflection.EmbeddedAssembly">
            <summary>
            加载嵌入式Assembly类（将程序集以资源的方式嵌入到当前程序集，使用的时候释放出来）
            TODO: EmbeddedAssembly未处理
            </summary>
        </member>
        <member name="M:TinyFx.Reflection.EmbeddedAssembly.Load(System.String,System.String)">
            <summary>
            从嵌入资源加载程序集到内存
            </summary>
            <param name="embeddedResource"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:TinyFx.Reflection.EmbeddedAssembly.Get(System.String)">
            <summary>
            获取已加载到内存中的程序集
            </summary>
            <param name="assemblyFullName"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Reflection.ReflectionUtil">
            <summary>
            反射辅助方法类
            </summary>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetAssemblyProduct(System.Reflection.Assembly)">
            <summary>
            获取AssemblyInfo.cs中定义的Product
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            获取AssemblyInfo.cs中定义的版本信息
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetAssemblyGuidString(System.Reflection.Assembly)">
            <summary>
            获取指定Assembly的GUID
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.IsPrimitiveType(System.Type)">
            <summary>
            类型是否是基元类型
            https://msdn.microsoft.com/en-us/library/system.type.isprimitive.aspx
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.IsSimpleType(System.Type)">
            <summary>
            简单类型：基元类型 + TimeSpan + DateTime + Guid + Decimal + String + Byte[] + 任何可从字符串转入的对象（暂未加入判断）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.MapToJsType(System.Type)">
            <summary>
            获得.NET类型映射的JS类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetPropertyValue(System.Object,System.String)">
            <summary>
            通过反射获取对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            通过反射获取对象属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            通过反射设置对象属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.CreateInstance``1(System.String)">
            <summary>
            根据类型名称创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Reflection.ReflectionUtil.GetManifestResourceString(System.Reflection.Assembly,System.String,System.Text.Encoding)">
            <summary>
            获取字符串类型的嵌入资源
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Security.RSAKeyMode">
            <summary>
            RSA 秘钥格式
            </summary>
        </member>
        <member name="F:TinyFx.Security.RSAKeyMode.MSXml">
            <summary>
            微软生成的Xml格式的秘钥
            </summary>
        </member>
        <member name="F:TinyFx.Security.RSAKeyMode.OpenSSL">
            <summary>
            OpenSSL格式的秘钥
            </summary>
        </member>
        <member name="T:TinyFx.Security.CertificateInstaller">
            <summary>
            证书安装服务工具
            </summary>
        </member>
        <member name="P:TinyFx.Security.CertificateInstaller.TargetStoreLocation">
            <summary>
            证书存储区的位置，默认StoreLocation.LocalMachine
            </summary>
        </member>
        <member name="P:TinyFx.Security.CertificateInstaller.TargetStoreName">
            <summary>
            证书存储区的名称，默认 StoreName.My
            </summary>
        </member>
        <member name="M:TinyFx.Security.CertificateInstaller.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
            <summary>
            构造函数
            </summary>
            <param name="certFile">证书文件名</param>
            <param name="password">证书密码</param>
            <param name="flags"></param>
        </member>
        <member name="M:TinyFx.Security.CertificateInstaller.Install">
            <summary>
            安装证书
            </summary>
        </member>
        <member name="M:TinyFx.Security.CertificateInstaller.Remove">
            <summary>
            移除证书
            </summary>
        </member>
        <member name="M:TinyFx.Security.CertificateInstaller.Exist">
            <summary>
            检测证书是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.CertificateInstaller.Check">
            <summary>
            检查证书，如不存在则安装
            </summary>
        </member>
        <member name="T:TinyFx.Security.SecurityUtil">
            <summary>
            安全辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.GetPasswordSalt">
            <summary>
            获取用户密码Hash所需要的Salt
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.EncryptPassword(System.String,System.String)">
            <summary>
            使用Salt加密密码
            </summary>
            <param name="password">密码明文</param>
            <param name="salt">加密Salt</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.ValidatePassword(System.String,System.String,System.String)">
            <summary>
            验证传入的密码
            </summary>
            <param name="password">用户密码，一般有用户传入</param>
            <param name="passwordHash">hash后的密码，一般存在数据库</param>
            <param name="salt">hash所需的salt，一般存储在数据库</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.Base64Encrypt(System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.Base64Decrypt(System.String)">
            <summary>
            Base64解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA1Hash(System.Byte[])">
            <summary>
            SHA1 哈希值
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA1Hash(System.String,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            SHA1 哈希值的Base64字符串
            </summary>
            <param name="src"></param>
            <param name="encoding"></param>
            <param name="cipherEncode"></param>
            <returns>返回Base64字符串</returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA1Verify(System.Byte[],System.Byte[])">
            <summary>
            SHA1 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前SHA1 的哈希数据</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA1Verify(System.String,System.String,System.Boolean,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            SHA1 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前SHA1 的哈希数据</param>
            <param name="ignoreCase">忽略大小写</param>
            <param name="encoding">字符集</param>
            <param name="cipherEncode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA256Hash(System.Byte[])">
            <summary>
            SHA256 哈希值
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA256Hash(System.String,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            SHA256 哈希值的Base64字符串
            </summary>
            <param name="src"></param>
            <param name="encoding"></param>
            <param name="cipherEncode"></param>
            <returns>返回Base64字符串</returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA256Verify(System.Byte[],System.Byte[])">
            <summary>
            SHA256 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前SHA1 的哈希数据</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.SHA256Verify(System.String,System.String,System.Boolean,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            SHA256 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前SHA1 的哈希数据</param>
            <param name="ignoreCase">忽略大小写</param>
            <param name="encoding">字符集</param>
            <param name="cipherEncode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.MD5Hash(System.Byte[])">
            <summary>
            MD5 哈希值
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.MD5Hash(System.String,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            MD5 哈希值的Base64字符串
            </summary>
            <param name="src"></param>
            <param name="encoding"></param>
            <param name="cipherEncode"></param>
            <returns>返回Base64字符串</returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.MD5Verify(System.Byte[],System.Byte[])">
            <summary>
            MD5 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前MD5的哈希数据</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.MD5Verify(System.String,System.String,System.Boolean,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            MD5 哈希值验证
            </summary>
            <param name="source">原始数据</param>
            <param name="hashValue">之前MD5的哈希数据</param>
            <param name="ignoreCase">忽略大小写</param>
            <param name="encoding">字符集</param>
            <param name="cipherEncode"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.CreateDESProvider(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构建DES加密类
            </summary>
            <param name="key">密钥(8byte)</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.DESEncrypt(System.Byte[],System.String)">
            <summary>
            DES加密字节数组
            </summary>
            <param name="clearBytes">明文字节数组</param>
            <param name="key">密钥(8byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.DESEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            DES加密字符串
            </summary>
            <param name="clearText">明文</param>
            <param name="key">密钥(8byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.DESDecrypt(System.Byte[],System.String)">
            <summary>
            DES解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <param name="key">密钥(8byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.DESDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            DES解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="key">密钥(8byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.CreateTripleDESProvider(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构建TripleDES加密类
            </summary>
            <param name="key">密钥(16byte或24Byte)</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.TripleDESEncrypt(System.Byte[],System.String)">
            <summary>
            TripleDES加密字节数组
            </summary>
            <param name="clearBytes">明文字节数组</param>
            <param name="key">密钥(16byte或24Byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.TripleDESEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            TripleDES加密字符串
            </summary>
            <param name="clearText">明文</param>
            <param name="key">密钥(16byte或24Byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.TripleDESDecrypt(System.Byte[],System.String)">
            <summary>
            TripleDES解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <param name="key">密钥(16byte或24Byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.TripleDESDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            TripleDES解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="key">密钥(16byte或24Byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.CreateRC2Provider(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构建RC2加密类
            </summary>
            <param name="key">密钥(5byte-16byte)</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RC2Encrypt(System.Byte[],System.String)">
            <summary>
            RC2加密字节数组
            </summary>
            <param name="clearBytes">明文字节数组</param>
            <param name="key">密钥(5byte-16byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RC2Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            RC2加密字符串
            </summary>
            <param name="clearText">明文</param>
            <param name="key">密钥(5byte-16byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RC2Decrypt(System.Byte[],System.String)">
            <summary>
            RC2解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <param name="key">密钥(5byte-16byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RC2Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            RC2解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="key">密钥(5byte-16byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.CreateRijndaelProvider(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构建Rijndael加密类
            </summary>
            <param name="key">密钥(5byte-16byte)</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RijndaelEncrypt(System.Byte[],System.String)">
            <summary>
            RC2加密字节数组
            </summary>
            <param name="clearBytes">明文字节数组</param>
            <param name="key">密钥(16byte，24byte或者32byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RijndaelEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Rijndael加密字符串
            </summary>
            <param name="clearText">明文</param>
            <param name="key">密钥(16byte，24byte或者32byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RijndaelDecrypt(System.Byte[],System.String)">
            <summary>
            Rijndael解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <param name="key">密钥(16byte，24byte或者32byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RijndaelDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            Rijndael解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="key">密钥(16byte，24byte或者32byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.CreateAESProvider(System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构建AES加密类
            </summary>
            <param name="key">密钥(128byte，192byte或者256byte)</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.AESEncrypt(System.Byte[],System.String)">
            <summary>
            AES加密字节数组
            </summary>
            <param name="clearBytes">明文字节数组</param>
            <param name="key">密钥(128byte，192byte或者256byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.AESEncrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES加密字符串
            </summary>
            <param name="clearText">明文</param>
            <param name="key">密钥(128byte，192byte或者256byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.AESDecrypt(System.Byte[],System.String)">
            <summary>
            AES解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <param name="key">密钥(128byte，192byte或者256byte)</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.AESDecrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            AES解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <param name="key">密钥(128byte，192byte或者256byte)</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.GenRSAKeyPair(System.Int32)">
            <summary>
            获取Microsoft生成的XML格式的RSA秘钥对.
            </summary>
            <param name="dwKeySize"></param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSAEncrypt(System.Byte[],System.String,TinyFx.Security.RSAKeyMode)">
            <summary>
            RSA 公钥加密，使用 PKCS#1 1.5 版填充
            </summary>
            <param name="clearBytes">明文</param>
            <param name="publicKey">公钥</param>
            <param name="keyMode">指定提供的RSA公钥格式，默认微软的XML格式的RSA公钥</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSAEncrypt(System.String,System.String,TinyFx.Security.RSAKeyMode,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            RSA 公钥加密，使用 PKCS#1 1.5 版填充。返回base64格式字符串
            js可使用jsencrypt.min.js进行openssl加密
            </summary>
            <param name="clearText">明文</param>
            <param name="publicKey">公钥</param>
            <param name="keyMode">指定提供的RSA公钥格式，默认微软的XML格式的RSA公钥</param>
            <param name="encoding">字符集，默认UTF8</param>
            <param name="cipherEncode">指定返回密文的编码格式：base64格式还是hex格式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSADecrypt(System.Byte[],System.String,TinyFx.Security.RSAKeyMode)">
            <summary>
            RSA 私钥解密，使用 PKCS#1 1.5 版填充
            </summary>
            <param name="cipherBytes">密文</param>
            <param name="privateKey">私钥</param>
            <param name="keyMode">指定提供的RSA私钥格式，默认微软的XML格式的RSA私钥</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSADecrypt(System.String,System.String,TinyFx.Security.RSAKeyMode,System.Text.Encoding,TinyFx.Security.CipherEncode)">
            <summary>
            RSA 私钥解密，使用 PKCS#1 1.5 版填充
            </summary>
            <param name="cipherText">密文(base64格式)</param>
            <param name="privateKey">私钥</param>
            <param name="keyMode">指定提供的RSA私钥格式，默认微软的XML格式的RSA私钥</param>
            <param name="encoding">字符集</param>
            <param name="cipherEncode">指定输入密文的编码格式：base64格式还是hex格式</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSAEncryptByPrivateKey(System.String,System.String,TinyFx.Security.RSAKeyMode)">
            <summary>
            RSA 私钥加密，使用 PKCS#1 1.5 版填充（不推荐）
            </summary>
            <param name="clearText">明文</param>
            <param name="privateKey">私钥</param>
            <param name="keyMode">指定提供的RSA私钥格式，默认微软的XML格式的RSA私钥</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSADecryptByPublicKey(System.String,System.String,TinyFx.Security.RSAKeyMode)">
            <summary>
            RSA 公钥解密，使用 PKCS#1 1.5 版填充（不推荐）
            </summary>
            <param name="cipherText">密文</param>
            <param name="publicKey">公钥</param>
            <param name="keyMode">指定提供的RSA公钥格式，默认微软的XML格式的RSA公钥</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSASignData(System.String,System.String,TinyFx.Security.RSAKeyMode,System.Security.Cryptography.HashAlgorithmName,System.Text.Encoding)">
            <summary>
            RSA 使用指定的哈希算法计算指定字节数组的哈希值，并对计算所得的哈希值签名（Base64格式）。
            默认使用的哈希算法：SHA1 填充方式：PKCS1
            </summary>
            <param name="source">原文</param>
            <param name="privateKey">私钥</param>
            <param name="keyMode">指定提供的RSA私钥格式，默认微软的XML格式的RSA私钥</param>
            <param name="hashName">用于创建哈希值的哈希算法</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SecurityUtil.RSAVerifyData(System.String,System.String,System.String,TinyFx.Security.RSAKeyMode,System.Security.Cryptography.HashAlgorithmName,System.Text.Encoding)">
            <summary>
            RSA 使用公钥确定签名中的哈希值并将其与所提供数据的哈希值进行比较验证数字签名是否有效。
            默认使用的哈希算法：SHA1 填充方式：PKCS1
            </summary>
            <param name="source">原文</param>
            <param name="sign">Base64格式的签名</param>
            <param name="publicKey">公钥</param>
            <param name="keyMode">指定提供的RSA公钥格式，默认微软的XML格式的RSA公钥</param>
            <param name="hashName">用于创建哈希值的哈希算法</param>
            <param name="encoding">字符集</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Security.RSAKeyPair">
            <summary>
            RSA秘钥对信息
            </summary>
        </member>
        <member name="P:TinyFx.Security.RSAKeyPair.PrivateKeyXml">
            <summary>
            RSA 对象的密钥的 XML 字符串
            </summary>
        </member>
        <member name="P:TinyFx.Security.RSAKeyPair.PublicKeyXml">
            <summary>
            公钥XML格式
            </summary>
        </member>
        <member name="P:TinyFx.Security.RSAKeyPair.ExponentHex">
            <summary>
            RSA 算法的 Exponent 参数Hex表示
            </summary>
        </member>
        <member name="P:TinyFx.Security.RSAKeyPair.ModulusHex">
            <summary>
            RSA 算法的 Modulus 参数Hex表示
            </summary>
        </member>
        <member name="P:TinyFx.Security.RSAKeyPair.PublicKeyHex">
            <summary>
            公钥Hex表示，ExponentHex + "," + ModulusHex
            </summary>
        </member>
        <member name="T:TinyFx.Security.CipherEncode">
            <summary>
            密文的编码格式
            </summary>
        </member>
        <member name="F:TinyFx.Security.CipherEncode.Base64">
            <summary>
            密文采用Base64编码
            </summary>
        </member>
        <member name="F:TinyFx.Security.CipherEncode.Hex">
            <summary>
            密文采用16进制字符串处理
            </summary>
        </member>
        <member name="T:TinyFx.Security.SymmetricMode">
            <summary>
            对称加密类型
            </summary>
        </member>
        <member name="F:TinyFx.Security.SymmetricMode.DES">
            <summary>
            DES（密钥长度8byte）
            </summary>
        </member>
        <member name="F:TinyFx.Security.SymmetricMode.TripleDES">
            <summary>
             TripleDES（密钥长度16byte或24Byte）
            </summary>
        </member>
        <member name="F:TinyFx.Security.SymmetricMode.RC2">
            <summary>
             RC2（密钥长度5byte-16byte）
            </summary>
        </member>
        <member name="F:TinyFx.Security.SymmetricMode.Rijndael">
            <summary>
            Rijndael（密钥长度16byte，24byte或者32byte）
            </summary>
        </member>
        <member name="F:TinyFx.Security.SymmetricMode.AES">
            <summary>
            AES算法（密钥长度128byte，192byte或者256byte）
            </summary>
        </member>
        <member name="T:TinyFx.Security.SymmetricProvider">
            <summary>
            对称加密基类
            支持DES, Rijndael, RC2, TripleDES, AES
            </summary>
        </member>
        <member name="P:TinyFx.Security.SymmetricProvider.Key">
            <summary>
            获取或设置密钥
            </summary>
        </member>
        <member name="P:TinyFx.Security.SymmetricProvider.IV">
            <summary>
            获取或设置初始化向量
            </summary>
        </member>
        <member name="P:TinyFx.Security.SymmetricProvider.Encoding">
            <summary>
            获取或设置字符集
            </summary>
        </member>
        <member name="P:TinyFx.Security.SymmetricProvider.Mode">
            <summary>
            获取或设置运算模式
            </summary>
        </member>
        <member name="P:TinyFx.Security.SymmetricProvider.Padding">
            <summary>
            获取或设置填充模式
            </summary>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.#ctor(TinyFx.Security.SymmetricMode,System.String,System.Byte[],System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="symmetric">加密方式</param>
            <param name="key">秘钥</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.#ctor(TinyFx.Security.SymmetricMode,System.Byte[],System.Byte[],System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="symmetric">加密方式</param>
            <param name="key">秘钥</param>
            <param name="iv">IV</param>
            <param name="encoding">字符集</param>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.Encrypt(System.Byte[])">
            <summary>
            加密字节数组
            </summary>
            <param name="clearBytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="clearText">明文</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.Decrypt(System.Byte[])">
            <summary>
            解密字节数组
            </summary>
            <param name="cipherBytes">密文字节数组</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Security.SymmetricProvider.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="cipherText">密文</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Text.IDCardInfo">
            <summary>
            居民身份证信息类
            </summary>
        </member>
        <member name="M:TinyFx.Text.IDCardInfo.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="P:TinyFx.Text.IDCardInfo.Number">
            <summary>
            身份证号码
            </summary>
        </member>
        <member name="P:TinyFx.Text.IDCardInfo.ProvinceName">
            <summary>
            省市信息
            </summary>
        </member>
        <member name="P:TinyFx.Text.IDCardInfo.Province">
            <summary>
            获取省市信息
            </summary>
        </member>
        <member name="P:TinyFx.Text.IDCardInfo.Birthday">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:TinyFx.Text.IDCardInfo.Sex">
            <summary>
            性别，男true 女false
            </summary>
        </member>
        <member name="M:TinyFx.Text.IDCardInfo.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:TinyFx.Text.IDCardInfo.IsValid(System.String)">
            <summary>
            验证身份证号码是否有效
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Text.LimitedCharFilter">
            <summary>
            字符限制检查器，用于检验或替换字符串，常用于注册
            存在有两种模式：
                1）只允许模式，不存在于已定义的字符集合中的字符都是被禁止的
                2）只禁止模式，不存在于已定义的字符集合中的字符都是被允许的
            </summary>
        </member>
        <member name="P:TinyFx.Text.LimitedCharFilter.IsAllow">
            <summary>
            此检查器是只允许模式还是只禁止模式
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            构造函数
            </summary>
            <param name="isAllow">检查器模式:true只允许模式 false只禁止模式</param>
            <param name="chars">定义的字符集合</param>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddChar(System.Char)">
            <summary>
            添加字符定义
            </summary>
            <param name="chr"></param>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddChars(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            添加字符集合定义
            </summary>
            <param name="chars">字符集合</param>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddChars(System.String)">
            <summary>
            添加字符集合定义
            </summary>
            <param name="chars">字符集合</param>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddNumberChars">
            <summary>
            添加数字字符集合定义
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddLowerChars">
            <summary>
            添加小写字符集合定义
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddUpperChars">
            <summary>
            添加大写字符集合定义
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddLetterChars">
            <summary>
            添加字母字符集合定义
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddCommonPunctuationChars">
            <summary>
            添加常用英文标点符号数组
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.AddChinese">
            <summary>
            添加中文字符集合定义
            </summary>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.IsValid(System.String)">
            <summary>
            验证是否有效
            </summary>
            <param name="input">输入的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.Replace(System.String,System.String)">
            <summary>
            用指定字符串替换限制的字符
            </summary>
            <param name="input">输入的字符串</param>
            <param name="mask">替换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.LimitedCharFilter.GetLimitedChars">
            <summary>
            获得定义的字符集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Text.MoneyUtil">
            <summary>
            金额转换类。静态类，用于金额大小写转换的类
            </summary>
        </member>
        <member name="M:TinyFx.Text.MoneyUtil.ToCN(System.Decimal)">
            <summary>
            货币金额中文大写转换方法, 符合财务记帐要求
            </summary>
            <param name="money">金额</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.MoneyUtil.ToCN(System.String)">
            <summary>
            货币金额中文大写转换方法, 符合财务记帐要求
            </summary>
            <param name="money">金额字符串</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.MoneyUtil.ToEN(System.Decimal)">
            <summary>
            货币金额英文大写转换方法
            </summary>
            <param name="money">金额</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.MoneyUtil.ToEN(System.String)">
            <summary>
            货币金额英文大写转换方法
            </summary>
            <param name="money">金额</param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Text.RandomString">
            <summary>
            随机字符串生成器,包括随机生成汉字，字母和数字
            </summary>
        </member>
        <member name="P:TinyFx.Text.RandomString.Scope">
            <summary>
            获取或设置可选取的字符范围
            </summary>
        </member>
        <member name="P:TinyFx.Text.RandomString.Length">
            <summary> 
            获取或设置随机String的长度 
            </summary>
        </member>
        <member name="M:TinyFx.Text.RandomString.#ctor(TinyFx.CharsScope,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="scope">可选取的字符范围</param>
            <param name="length">随机字符串的长度</param>
        </member>
        <member name="M:TinyFx.Text.RandomString.#ctor(System.Char[],System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="scope">可选取的字符范围</param>
            <param name="length">随机字符串的长度</param>
        </member>
        <member name="M:TinyFx.Text.RandomString.Next(TinyFx.CharsScope,System.Int32)">
            <summary> 
            获得随机字符串 
            </summary>
            <param name="scope">可选取的字符范围</param>
            <param name="length">生成随机String的长度</param>
            <returns>返回随机字符串</returns>
        </member>
        <member name="M:TinyFx.Text.RandomString.Next(System.Char[],System.Int32)">
            <summary>
            获得随机字符串 
            </summary>
            <param name="scope">可选取的字符范围</param>
            <param name="length">生成随机String的长度</param>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.RandomString.Next">
            <summary>
            获得随机字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Text.TextUtil">
            <summary>
            Text辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Text.TextUtil.AppendFormatLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            添加
            </summary>
            <param name="sb"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:TinyFx.Text.TimestampIDGenerator">
            <summary>
            时间戳ID序列生成器，产生唯一数
            序列号生成格式：时间标识（默认12位yyMMddHHmmss）+ 序列累计数（默认4位，表示每单位时间可同时产生10000个序列号）+ 服务器标识（默认3位，取IP最后一位值）
            通常用于生成数据库主键，注意每个数据库表必须创建且只创建一个实例用于生成它的ID，不能交叉使用，存在群集的通过ServerId区别，线程安全
            </summary>
        </member>
        <member name="P:TinyFx.Text.TimestampIDGenerator.DateFormat">
            <summary>
            获取生成时间标识的格式yyyyMMddHHmmssffff
            </summary>
        </member>
        <member name="P:TinyFx.Text.TimestampIDGenerator.SerialLength">
            <summary>
            获取序列数长度
            </summary>
        </member>
        <member name="P:TinyFx.Text.TimestampIDGenerator.ServerId">
            <summary>
            获取服务器标识
            </summary>
        </member>
        <member name="M:TinyFx.Text.TimestampIDGenerator.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="dateFormat">获取生成时间标识的格式，默认yyMMddHHmmss</param>
            <param name="serialLength">获取序列数长度，默认4位</param>
            <param name="serverId">获取服务器标识，如果为null则取IP地址最后3位</param>
        </member>
        <member name="M:TinyFx.Text.TimestampIDGenerator.Generate">
            <summary>
            生成序列号
            </summary>
            <returns></returns>
        </member>
        <member name="M:TinyFx.Text.TimestampIDGenerator.GenerateInt64">
            <summary>
            生成序列号
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Web.UriBuilderEx">
            <summary>
            UriBuilder继承扩展类
            </summary>
        </member>
        <member name="M:TinyFx.Web.UriBuilderEx.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:TinyFx.Web.UriBuilderEx.QueryString">
            <summary>
            URL中的QueryString键值对
            </summary>
        </member>
        <member name="M:TinyFx.Web.UriBuilderEx.AppendQueryString(System.String,System.String,System.Text.Encoding)">
            <summary>
            添加QueryString值，如果指定Encoding则使用HttpUtility.UrlEncode编码
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:TinyFx.Web.UriBuilderEx.GetQueryStringValue(System.String,System.Text.Encoding)">
            <summary>
            获取QueryString值，如果指定Encoding则使用HttpUtility.UrlDecode解码
            </summary>
            <param name="name"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:TinyFx.Web.VersionControlMode">
            <summary>
            版本控制方式
            </summary>
        </member>
        <member name="F:TinyFx.Web.VersionControlMode.None">
            <summary>
            没有版本控制
            </summary>
        </member>
        <member name="F:TinyFx.Web.VersionControlMode.RequestHeader">
            <summary>
            请求的Headers中添加: api-version : 2
            </summary>
        </member>
        <member name="F:TinyFx.Web.VersionControlMode.UrlParameter">
            <summary>
            请求URL中添加：~/api/v2/demo/get1?id=2
            </summary>
        </member>
        <member name="F:TinyFx.Web.VersionControlMode.ContentType">
            <summary>
            ContentType添加：Accept: application/vnd.haveibeenpwned+json; version=2.0
            </summary>
        </member>
        <member name="T:TinyFx.Web.WebUtil">
            <summary>
            Web辅助类
            </summary>
        </member>
        <member name="M:TinyFx.Web.WebUtil.IsWebImage(System.String)">
            <summary>
            判断文件类型是否为WEB格式图片(注：JPG,GIF,BMP,PNG)
            </summary>
            <param name="contentType">HTTP MIME 类型</param>
            <returns></returns>
        </member>
        <member name="M:SharpICTCLAS.Utility.ConvertToQJC(System.Char)">
            <summary>
            把字符转换为全角的(半角转全角)
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SharpICTCLAS.Utility.ConvertToBJC(System.Char)">
            <summary>
            把字符转换为半角的(全角转半角)
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:SharpICTCLAS.Utility.ToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:SharpICTCLAS.Utility.ToDBC(System.String)">
             <summary>
             转半角的函数(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.PosStateBits">
            <summary>
            Specifies number of postion state bits for LZMA 
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.LitContextBits">
            <summary>
            Specifies number of literal context bits for LZMA
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.LitPosBits">
            <summary>
            Specifies number of literal position bits for LZMA
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
    </members>
</doc>
